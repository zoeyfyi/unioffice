//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*

Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_ag "archive/zip";_cc "bytes";_d "errors";_b "fmt";_cg "github.com/unidoc/unioffice";_aa "github.com/unidoc/unioffice/color";_bd "github.com/unidoc/unioffice/common";_cb "github.com/unidoc/unioffice/common/tempstorage";_cce "github.com/unidoc/unioffice/internal/license";_bg "github.com/unidoc/unioffice/measurement";_df "github.com/unidoc/unioffice/schema/schemas.microsoft.com/office/activeX";_dg "github.com/unidoc/unioffice/schema/soo/dml";_ba "github.com/unidoc/unioffice/schema/soo/dml/picture";_be "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_gc "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_dc "github.com/unidoc/unioffice/schema/soo/wml";_cf "github.com/unidoc/unioffice/zippkg";_ab "image";_gg "image/jpeg";_ga "io";_f "log";_g "math/rand";_ce "os";_gd "path/filepath";_fd "strings";_a "unicode";);func (_bgec Paragraph )addFldCharsForField (_agfa ,_face string )FormField {_egdc :=_bgec .addBeginFldChar (_agfa );_edff :=FormField {_cede :_egdc };_adaec :=_bgec ._bfdb .Bookmarks ();_aaacf :=int64 (len (_adaec ));if _agfa !=""{_bgec .addStartBookmark (_aaacf ,_agfa );};_bgec .addInstrText (_face );_bgec .addSeparateFldChar ();if _face =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_cecc :=_bgec .AddRun ();_accce :=_dc .NewEG_RunInnerContent ();_cecc ._ggab .EG_RunInnerContent =[]*_dc .EG_RunInnerContent {_accce };_edff ._dgad =_accce ;};_bgec .addEndFldChar ();if _agfa !=""{_bgec .addEndBookmark (_aaacf );};return _edff ;};

// AddTable adds a new table to the document body.
func (_bdc *Document )AddTable ()Table {_dcg :=_dc .NewEG_BlockLevelElts ();_bdc ._ace .Body .EG_BlockLevelElts =append (_bdc ._ace .Body .EG_BlockLevelElts ,_dcg );_gec :=_dc .NewEG_ContentBlockContent ();_dcg .EG_ContentBlockContent =append (_dcg .EG_ContentBlockContent ,_gec );_ddc :=_dc .NewCT_Tbl ();_gec .Tbl =append (_gec .Tbl ,_ddc );return Table {_bdc ,_ddc };};

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_ebag Paragraph )AddFootnote (text string )Footnote {var _gaddg int64 ;if _ebag ._bfdb .HasFootnotes (){for _ ,_fcbf :=range _ebag ._bfdb .Footnotes (){if _fcbf .id ()> _gaddg {_gaddg =_fcbf .id ();};};_gaddg ++;}else {_gaddg =0;_ebag ._bfdb ._aae =&_dc .Footnotes {};_ebag ._bfdb ._aae .CT_Footnotes =_dc .CT_Footnotes {};_ebag ._bfdb ._aae .Footnote =make ([]*_dc .CT_FtnEdn ,0);};_geafb :=_dc .NewCT_FtnEdn ();_edeg :=_dc .NewCT_FtnEdnRef ();_edeg .IdAttr =_gaddg ;_ebag ._bfdb ._aae .CT_Footnotes .Footnote =append (_ebag ._bfdb ._aae .CT_Footnotes .Footnote ,_geafb );_egbb :=_ebag .AddRun ();_adcfg :=_egbb .Properties ();_adcfg .SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0041n\u0063\u0068\u006f\u0072");_egbb ._ggab .EG_RunInnerContent =[]*_dc .EG_RunInnerContent {_dc .NewEG_RunInnerContent ()};_egbb ._ggab .EG_RunInnerContent [0].FootnoteReference =_edeg ;_gbbgd :=Footnote {_ebag ._bfdb ,_geafb };_gbbgd ._afba .IdAttr =_gaddg ;_gbbgd ._afba .EG_BlockLevelElts =[]*_dc .EG_BlockLevelElts {_dc .NewEG_BlockLevelElts ()};_gfdb :=_gbbgd .AddParagraph ();_gfdb .Properties ().SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065");_gfdb ._feea .PPr .RPr =_dc .NewCT_ParaRPr ();_gfdg :=_gfdb .AddRun ();_gfdg .AddTab ();_gfdg .AddText (text );return _gbbgd ;};

// SetHangingIndent controls the hanging indent of the paragraph.
func (_bcgc ParagraphStyleProperties )SetHangingIndent (m _bg .Distance ){if _bcgc ._acgef .Ind ==nil {_bcgc ._acgef .Ind =_dc .NewCT_Ind ();};if m ==_bg .Zero {_bcgc ._acgef .Ind .HangingAttr =nil ;}else {_bcgc ._acgef .Ind .HangingAttr =&_be .ST_TwipsMeasure {};_bcgc ._acgef .Ind .HangingAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (m /_bg .Twips ));};};

// read reads a document from an io.Reader.
func Read (r _ga .ReaderAt ,size int64 )(*Document ,error ){return _bde (r ,size ,"")};

// Margins allows controlling individual cell margins.
func (_cgb CellProperties )Margins ()CellMargins {if _cgb ._cea .TcMar ==nil {_cgb ._cea .TcMar =_dc .NewCT_TcMar ();};return CellMargins {_cgb ._cea .TcMar };};

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_gaa AnchoredDrawing )SetTextWrapNone (){_gaa ._cfc .Choice =&_dc .WdEG_WrapTypeChoice {};_gaa ._cfc .Choice .WrapNone =_dc .NewWdCT_WrapNone ();};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_gcec RunProperties )ComplexSizeMeasure ()string {if _fbec :=_gcec ._becce .SzCs ;_fbec !=nil {_ecge :=_fbec .ValAttr ;if _ecge .ST_PositiveUniversalMeasure !=nil {return *_ecge .ST_PositiveUniversalMeasure ;};};return "";};

// SetHANSITheme sets the font H ANSI Theme.
func (_ffg Fonts )SetHANSITheme (t _dc .ST_Theme ){_ffg ._dccb .HAnsiThemeAttr =t };func (_dbdb *Document )insertTable (_egdg Paragraph ,_acad bool )Table {_fge :=_dbdb ._ace .Body ;if _fge ==nil {return _dbdb .AddTable ();};_dae :=_egdg .X ();for _dbc ,_cef :=range _fge .EG_BlockLevelElts {for _ ,_eeg :=range _cef .EG_ContentBlockContent {for _fcd ,_gbba :=range _eeg .P {if _gbba ==_dae {_daca :=_dc .NewCT_Tbl ();_fbfe :=_dc .NewEG_BlockLevelElts ();_bfb :=_dc .NewEG_ContentBlockContent ();_fbfe .EG_ContentBlockContent =append (_fbfe .EG_ContentBlockContent ,_bfb );_bfb .Tbl =append (_bfb .Tbl ,_daca );_fge .EG_BlockLevelElts =append (_fge .EG_BlockLevelElts ,nil );if _acad {copy (_fge .EG_BlockLevelElts [_dbc +1:],_fge .EG_BlockLevelElts [_dbc :]);_fge .EG_BlockLevelElts [_dbc ]=_fbfe ;if _fcd !=0{_deg :=_dc .NewEG_BlockLevelElts ();_ffdf :=_dc .NewEG_ContentBlockContent ();_deg .EG_ContentBlockContent =append (_deg .EG_ContentBlockContent ,_ffdf );_ffdf .P =_eeg .P [:_fcd ];_fge .EG_BlockLevelElts =append (_fge .EG_BlockLevelElts ,nil );copy (_fge .EG_BlockLevelElts [_dbc +1:],_fge .EG_BlockLevelElts [_dbc :]);_fge .EG_BlockLevelElts [_dbc ]=_deg ;};_eeg .P =_eeg .P [_fcd :];}else {copy (_fge .EG_BlockLevelElts [_dbc +2:],_fge .EG_BlockLevelElts [_dbc +1:]);_fge .EG_BlockLevelElts [_dbc +1]=_fbfe ;if _fcd !=len (_eeg .P )-1{_adc :=_dc .NewEG_BlockLevelElts ();_acb :=_dc .NewEG_ContentBlockContent ();_adc .EG_ContentBlockContent =append (_adc .EG_ContentBlockContent ,_acb );_acb .P =_eeg .P [_fcd +1:];_fge .EG_BlockLevelElts =append (_fge .EG_BlockLevelElts ,nil );copy (_fge .EG_BlockLevelElts [_dbc +3:],_fge .EG_BlockLevelElts [_dbc +2:]);_fge .EG_BlockLevelElts [_dbc +2]=_adc ;};_eeg .P =_eeg .P [:_fcd +1];};return Table {_dbdb ,_daca };};};for _ ,_bbf :=range _eeg .Tbl {_gcc :=_eaa (_bbf ,_dae ,_acad );if _gcc !=nil {return Table {_dbdb ,_gcc };};};};};return _dbdb .AddTable ();};

// SetStyle sets the style of a paragraph.
func (_ecea ParagraphProperties )SetStyle (s string ){if s ==""{_ecea ._efff .PStyle =nil ;}else {_ecea ._efff .PStyle =_dc .NewCT_String ();_ecea ._efff .PStyle .ValAttr =s ;};};

// AddTextInput adds text input form field to the paragraph and returns it.
func (_eedfa Paragraph )AddTextInput (name string )FormField {_dgcc :=_eedfa .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_dgcc ._cede .TextInput =_dc .NewCT_FFTextInput ();return _dgcc ;};

// SetAlignment controls the paragraph alignment
func (_aeffc ParagraphProperties )SetAlignment (align _dc .ST_Jc ){if align ==_dc .ST_JcUnset {_aeffc ._efff .Jc =nil ;}else {_aeffc ._efff .Jc =_dc .NewCT_Jc ();_aeffc ._efff .Jc .ValAttr =align ;};};func (_dccf Run )newIC ()*_dc .EG_RunInnerContent {_acada :=_dc .NewEG_RunInnerContent ();_dccf ._ggab .EG_RunInnerContent =append (_dccf ._ggab .EG_RunInnerContent ,_acada );return _acada ;};

// AddCell adds a cell to a row and returns it
func (_debd Row )AddCell ()Cell {_eagg :=_dc .NewEG_ContentCellContent ();_debd ._efbb .EG_ContentCellContent =append (_debd ._efbb .EG_ContentCellContent ,_eagg );_bgeae :=_dc .NewCT_Tc ();_eagg .Tc =append (_eagg .Tc ,_bgeae );return Cell {_debd ._ecaf ,_bgeae };};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_efb FormField )SetSize (size uint64 ){size *=2;if _efb ._cede .CheckBox !=nil {_efb ._cede .CheckBox .Choice =_dc .NewCT_FFCheckBoxChoice ();_efb ._cede .CheckBox .Choice .Size =_dc .NewCT_HpsMeasure ();_efb ._cede .CheckBox .Choice .Size .ValAttr =_dc .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };};};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_ead *Document )Endnote (id int64 )Endnote {for _ ,_cda :=range _ead .Endnotes (){if _cda .id ()==id {return _cda ;};};return Endnote {};};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_aaef ,_gcbc :=_ce .Open (filename );if _gcbc !=nil {return nil ,_b .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_gcbc );};defer _aaef .Close ();_bdcf ,_gcbc :=_ce .Stat (filename );if _gcbc !=nil {return nil ,_b .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_gcbc );};_ =_bdcf ;return Read (_aaef ,_bdcf .Size ());};

// SetAll sets all of the borders to a given value.
func (_aea CellBorders )SetAll (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_aea .SetBottom (t ,c ,thickness );_aea .SetLeft (t ,c ,thickness );_aea .SetRight (t ,c ,thickness );_aea .SetTop (t ,c ,thickness );_aea .SetInsideHorizontal (t ,c ,thickness );_aea .SetInsideVertical (t ,c ,thickness );};

// InsertRowBefore inserts a row before another row
func (_fbfc Table )InsertRowBefore (r Row )Row {for _cgfd ,_ddegg :=range _fbfc ._eaeb .EG_ContentRowContent {if len (_ddegg .Tr )> 0&&r .X ()==_ddegg .Tr [0]{_ggda :=_dc .NewEG_ContentRowContent ();_fbfc ._eaeb .EG_ContentRowContent =append (_fbfc ._eaeb .EG_ContentRowContent ,nil );copy (_fbfc ._eaeb .EG_ContentRowContent [_cgfd +1:],_fbfc ._eaeb .EG_ContentRowContent [_cgfd :]);_fbfc ._eaeb .EG_ContentRowContent [_cgfd ]=_ggda ;_abcf :=_dc .NewCT_Row ();_ggda .Tr =append (_ggda .Tr ,_abcf );return Row {_fbfc ._aaae ,_abcf };};};return _fbfc .AddRow ();};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_bafa TableProperties )SetCellSpacingAuto (){_bafa ._eacagd .TblCellSpacing =_dc .NewCT_TblWidth ();_bafa ._eacagd .TblCellSpacing .TypeAttr =_dc .ST_TblWidthAuto ;};

// SetShading controls the cell shading.
func (_afd CellProperties )SetShading (shd _dc .ST_Shd ,foreground ,fill _aa .Color ){if shd ==_dc .ST_ShdUnset {_afd ._cea .Shd =nil ;}else {_afd ._cea .Shd =_dc .NewCT_Shd ();_afd ._cea .Shd .ValAttr =shd ;_afd ._cea .Shd .ColorAttr =&_dc .ST_HexColor {};if foreground .IsAuto (){_afd ._cea .Shd .ColorAttr .ST_HexColorAuto =_dc .ST_HexColorAutoAuto ;}else {_afd ._cea .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_afd ._cea .Shd .FillAttr =&_dc .ST_HexColor {};if fill .IsAuto (){_afd ._cea .Shd .FillAttr .ST_HexColorAuto =_dc .ST_HexColorAutoAuto ;}else {_afd ._cea .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// SetUnderline controls underline for a run style.
func (_gfdbe RunProperties )SetUnderline (style _dc .ST_Underline ,c _aa .Color ){if style ==_dc .ST_UnderlineUnset {_gfdbe ._becce .U =nil ;}else {_gfdbe ._becce .U =_dc .NewCT_Underline ();_gfdbe ._becce .U .ColorAttr =&_dc .ST_HexColor {};_gfdbe ._becce .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();_gfdbe ._becce .U .ValAttr =style ;};};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_cbbc Header )AddImage (i _bd .Image )(_bd .ImageRef ,error ){var _bgag _bd .Relationships ;for _acadc ,_bfgef :=range _cbbc ._ecbe ._fbb {if _bfgef ==_cbbc ._ecac {_bgag =_cbbc ._ecbe ._fae [_acadc ];};};_abee :=_bd .MakeImageRef (i ,&_cbbc ._ecbe .DocBase ,_bgag );if i .Data ==nil &&i .Path ==""{return _abee ,_d .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _abee ,_d .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _abee ,_d .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_cbbc ._ecbe .Images =append (_cbbc ._ecbe .Images ,_abee );_bbcg :=_b .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_cbbc ._ecbe .Images ),i .Format );_baaf :=_bgag .AddRelationship (_bbcg ,_cg .ImageType );_abee .SetRelID (_baaf .X ().IdAttr );return _abee ,nil ;};

// AddParagraph adds a new paragraph to the document body.
func (_bbec *Document )AddParagraph ()Paragraph {_baeg :=_dc .NewEG_BlockLevelElts ();_bbec ._ace .Body .EG_BlockLevelElts =append (_bbec ._ace .Body .EG_BlockLevelElts ,_baeg );_fdea :=_dc .NewEG_ContentBlockContent ();_baeg .EG_ContentBlockContent =append (_baeg .EG_ContentBlockContent ,_fdea );_ddab :=_dc .NewCT_P ();_fdea .P =append (_fdea .P ,_ddab );return Paragraph {_bbec ,_ddab };};func _fgf (_cebf *_dc .CT_Tbl ,_ece map[string ]string ){for _ ,_fadag :=range _cebf .EG_ContentRowContent {for _ ,_dfb :=range _fadag .Tr {for _ ,_fdaa :=range _dfb .EG_ContentCellContent {for _ ,_bgb :=range _fdaa .Tc {for _ ,_fedb :=range _bgb .EG_BlockLevelElts {for _ ,_eccgc :=range _fedb .EG_ContentBlockContent {for _ ,_cffg :=range _eccgc .P {_ddgg (_cffg ,_ece );};for _ ,_faee :=range _eccgc .Tbl {_fgf (_faee ,_ece );};};};};};};};};

// X returns the inner wrapped XML type.
func (_acgf Paragraph )X ()*_dc .CT_P {return _acgf ._feea };

// RemoveParagraph removes a paragraph from a footer.
func (_fbdf Header )RemoveParagraph (p Paragraph ){for _ ,_acdc :=range _fbdf ._ecac .EG_ContentBlockContent {for _dbfd ,_cgba :=range _acdc .P {if _cgba ==p ._feea {copy (_acdc .P [_dbfd :],_acdc .P [_dbfd +1:]);_acdc .P =_acdc .P [0:len (_acdc .P )-1];return ;};};};};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_beab Run )ClearContent (){_beab ._ggab .EG_RunInnerContent =nil };

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_eeae RunProperties )SetVerticalAlignment (v _be .ST_VerticalAlignRun ){if v ==_be .ST_VerticalAlignRunUnset {_eeae ._becce .VertAlign =nil ;}else {_eeae ._becce .VertAlign =_dc .NewCT_VerticalAlignRun ();_eeae ._becce .VertAlign .ValAttr =v ;};};

// AddParagraph adds a paragraph to the endnote.
func (_efa Endnote )AddParagraph ()Paragraph {_eccaa :=_dc .NewEG_ContentBlockContent ();_fdae :=len (_efa ._dcdg .EG_BlockLevelElts [0].EG_ContentBlockContent );_efa ._dcdg .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_efa ._dcdg .EG_BlockLevelElts [0].EG_ContentBlockContent ,_eccaa );_ebaa :=_dc .NewCT_P ();var _fcad *_dc .CT_String ;if _fdae !=0{_bbac :=len (_efa ._dcdg .EG_BlockLevelElts [0].EG_ContentBlockContent [_fdae -1].P );_fcad =_efa ._dcdg .EG_BlockLevelElts [0].EG_ContentBlockContent [_fdae -1].P [_bbac -1].PPr .PStyle ;}else {_fcad =_dc .NewCT_String ();_fcad .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_eccaa .P =append (_eccaa .P ,_ebaa );_dgaf :=Paragraph {_efa ._eaab ,_ebaa };_dgaf ._feea .PPr =_dc .NewCT_PPr ();_dgaf ._feea .PPr .PStyle =_fcad ;_dgaf ._feea .PPr .RPr =_dc .NewCT_ParaRPr ();return _dgaf ;};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
func (_faeaf Paragraph )RemoveEndnote (id int64 ){_acdf :=_faeaf ._bfdb ._gcd ;var _gecf int ;for _egeg ,_dabc :=range _acdf .CT_Endnotes .Endnote {if _dabc .IdAttr ==id {_gecf =_egeg ;};};_gecf =0;_acdf .CT_Endnotes .Endnote [_gecf ]=nil ;_acdf .CT_Endnotes .Endnote [_gecf ]=_acdf .CT_Endnotes .Endnote [len (_acdf .CT_Endnotes .Endnote )-1];_acdf .CT_Endnotes .Endnote =_acdf .CT_Endnotes .Endnote [:len (_acdf .CT_Endnotes .Endnote )-1];var _fcg Run ;for _ ,_ebbag :=range _faeaf .Runs (){if _bdede ,_gbec :=_ebbag .IsEndnote ();_bdede {if _gbec ==id {_fcg =_ebbag ;};};};_faeaf .RemoveRun (_fcg );};

// Type returns the type of the field.
func (_geef FormField )Type ()FormFieldType {if _geef ._cede .TextInput !=nil {return FormFieldTypeText ;}else if _geef ._cede .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _geef ._cede .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;};

// InitializeDefault constructs a default numbering.
func (_gaed Numbering )InitializeDefault (){_eafg :=_dc .NewCT_AbstractNum ();_eafg .MultiLevelType =_dc .NewCT_MultiLevelType ();_eafg .MultiLevelType .ValAttr =_dc .ST_MultiLevelTypeHybridMultilevel ;_gaed ._cfbb .AbstractNum =append (_gaed ._cfbb .AbstractNum ,_eafg );_eafg .AbstractNumIdAttr =1;const _ecdf =720;const _egdgg =720;const _ceaba =360;for _gacd :=0;_gacd < 9;_gacd ++{_defbf :=_dc .NewCT_Lvl ();_defbf .IlvlAttr =int64 (_gacd );_defbf .Start =_dc .NewCT_DecimalNumber ();_defbf .Start .ValAttr =1;_defbf .NumFmt =_dc .NewCT_NumFmt ();_defbf .NumFmt .ValAttr =_dc .ST_NumberFormatBullet ;_defbf .Suff =_dc .NewCT_LevelSuffix ();_defbf .Suff .ValAttr =_dc .ST_LevelSuffixNothing ;_defbf .LvlText =_dc .NewCT_LevelText ();_defbf .LvlText .ValAttr =_cg .String ("\uf0b7");_defbf .LvlJc =_dc .NewCT_Jc ();_defbf .LvlJc .ValAttr =_dc .ST_JcLeft ;_defbf .RPr =_dc .NewCT_RPr ();_defbf .RPr .RFonts =_dc .NewCT_Fonts ();_defbf .RPr .RFonts .AsciiAttr =_cg .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_defbf .RPr .RFonts .HAnsiAttr =_cg .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_defbf .RPr .RFonts .HintAttr =_dc .ST_HintDefault ;_defbf .PPr =_dc .NewCT_PPrGeneral ();_effb :=int64 (_gacd *_egdgg +_ecdf );_defbf .PPr .Ind =_dc .NewCT_Ind ();_defbf .PPr .Ind .LeftAttr =&_dc .ST_SignedTwipsMeasure {};_defbf .PPr .Ind .LeftAttr .Int64 =_cg .Int64 (_effb );_defbf .PPr .Ind .HangingAttr =&_be .ST_TwipsMeasure {};_defbf .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (_ceaba ));_eafg .Lvl =append (_eafg .Lvl ,_defbf );};_ebdg :=_dc .NewCT_Num ();_ebdg .NumIdAttr =1;_ebdg .AbstractNumId =_dc .NewCT_DecimalNumber ();_ebdg .AbstractNumId .ValAttr =1;_gaed ._cfbb .Num =append (_gaed ._cfbb .Num ,_ebdg );};

// Emboss returns true if run emboss is on.
func (_ebgcg RunProperties )Emboss ()bool {return _dedc (_ebgcg ._becce .Emboss )};func _bde (_aaeg _ga .ReaderAt ,_dfga int64 ,_aee string )(*Document ,error ){const _eada ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";if !_cce .GetLicenseKey ().IsLicensed ()&&!_dcc {_b .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_b .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_d .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_adgd :=New ();_adgd .Numbering ._cfbb =nil ;if len (_aee )> 0{_adgd ._fbe =_aee ;}else {_afgb ,_addg :=_cce .GenRefId ("\u0064\u0072");if _addg !=nil {_cg .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_addg );return nil ,_addg ;};_adgd ._fbe =_afgb ;};if _efcda :=_cce .Track (_adgd ._fbe ,_eada );_efcda !=nil {_b .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_efcda );return nil ,_efcda ;};_gfd ,_bfed :=_cb .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");if _bfed !=nil {return nil ,_bfed ;};_adgd .TmpPath =_gfd ;_efeg ,_bfed :=_ag .NewReader (_aaeg ,_dfga );if _bfed !=nil {return nil ,_b .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_bfed );};_gge :=[]*_ag .File {};_gge =append (_gge ,_efeg .File ...);_ged :=false ;for _ ,_dgc :=range _gge {if _dgc .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ged =true ;break ;};};if _ged {_adgd .CreateCustomProperties ();};_gege :=_adgd ._ace .ConformanceAttr ;_fbeg :=_cf .DecodeMap {};_fbeg .SetOnNewRelationshipFunc (_adgd .onNewRelationship );_fbeg .AddTarget (_cg .ContentTypesFilename ,_adgd .ContentTypes .X (),"",0);_fbeg .AddTarget (_cg .BaseRelsFilename ,_adgd .Rels .X (),"",0);if _bdd :=_fbeg .Decode (_gge );_bdd !=nil {return nil ,_bdd ;};_adgd ._ace .ConformanceAttr =_gege ;for _ ,_cedc :=range _gge {if _cedc ==nil {continue ;};if _fdc :=_adgd .AddExtraFileFromZip (_cedc );_fdc !=nil {return nil ,_fdc ;};};if _ged {_gdab :=false ;for _ ,_ecdd :=range _adgd .Rels .X ().Relationship {if _ecdd .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_gdab =true ;break ;};};if !_gdab {_adgd .AddCustomRelationships ();};};return _adgd ,nil ;};

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_ddbb Paragraph )InsertRunAfter (relativeTo Run )Run {return _ddbb .insertRun (relativeTo ,false )};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_dcagb ParagraphStyleProperties )SetSpacing (before ,after _bg .Distance ){if _dcagb ._acgef .Spacing ==nil {_dcagb ._acgef .Spacing =_dc .NewCT_Spacing ();};if before ==_bg .Zero {_dcagb ._acgef .Spacing .BeforeAttr =nil ;}else {_dcagb ._acgef .Spacing .BeforeAttr =&_be .ST_TwipsMeasure {};_dcagb ._acgef .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (before /_bg .Twips ));};if after ==_bg .Zero {_dcagb ._acgef .Spacing .AfterAttr =nil ;}else {_dcagb ._acgef .Spacing .AfterAttr =&_be .ST_TwipsMeasure {};_dcagb ._acgef .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (after /_bg .Twips ));};};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_bbcf CellBorders )SetInsideHorizontal (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_bbcf ._gfa .InsideH =_dc .NewCT_Border ();_eacaa (_bbcf ._gfa .InsideH ,t ,c ,thickness );};

// SetEnabled marks a FormField as enabled or disabled.
func (_beee FormField )SetEnabled (enabled bool ){_abc :=_dc .NewCT_OnOff ();_abc .ValAttr =&_be .ST_OnOff {Bool :&enabled };_beee ._cede .Enabled =[]*_dc .CT_OnOff {_abc };};

// SetItalic sets the run to italic.
func (_aabc RunProperties )SetItalic (b bool ){if !b {_aabc ._becce .I =nil ;_aabc ._becce .ICs =nil ;}else {_aabc ._becce .I =_dc .NewCT_OnOff ();_aabc ._becce .ICs =_dc .NewCT_OnOff ();};};

// Type returns the type of the style.
func (_cacae Style )Type ()_dc .ST_StyleType {return _cacae ._afaf .TypeAttr };

// X returns the inner wrapped XML type.
func (_eced Table )X ()*_dc .CT_Tbl {return _eced ._eaeb };

// Header is a header for a document section.
type Header struct{_ecbe *Document ;_ecac *_dc .Hdr ;};

// Clear resets the numbering.
func (_aabe Numbering )Clear (){_aabe ._cfbb .AbstractNum =nil ;_aabe ._cfbb .Num =nil ;_aabe ._cfbb .NumIdMacAtCleanup =nil ;_aabe ._cfbb .NumPicBullet =nil ;};

// Definitions returns the defined numbering definitions.
func (_cadg Numbering )Definitions ()[]NumberingDefinition {_ddcg :=[]NumberingDefinition {};for _ ,_gffbd :=range _cadg ._cfbb .AbstractNum {_ddcg =append (_ddcg ,NumberingDefinition {_gffbd });};return _ddcg ;};

// SetBasedOn sets the style that this style is based on.
func (_gbcd Style )SetBasedOn (name string ){if name ==""{_gbcd ._afaf .BasedOn =nil ;}else {_gbcd ._afaf .BasedOn =_dc .NewCT_String ();_gbcd ._afaf .BasedOn .ValAttr =name ;};};

// SaveToFile writes the document out to a file.
func (_cdd *Document )SaveToFile (path string )error {_abef ,_gaaf :=_ce .Create (path );if _gaaf !=nil {return _gaaf ;};defer _abef .Close ();return _cdd .Save (_abef );};

// SetFormat sets the numbering format.
func (_gagca NumberingLevel )SetFormat (f _dc .ST_NumberFormat ){if _gagca ._dbab .NumFmt ==nil {_gagca ._dbab .NumFmt =_dc .NewCT_NumFmt ();};_gagca ._dbab .NumFmt .ValAttr =f ;};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_becg ParagraphSpacing )SetBeforeAuto (b bool ){if b {_becg ._abeg .BeforeAutospacingAttr =&_be .ST_OnOff {};_becg ._abeg .BeforeAutospacingAttr .Bool =_cg .Bool (true );}else {_becg ._abeg .BeforeAutospacingAttr =nil ;};};func (_ebad *Document )insertParagraph (_aace Paragraph ,_aabd bool )Paragraph {if _ebad ._ace .Body ==nil {return _ebad .AddParagraph ();};_bdee :=_aace .X ();for _ ,_bag :=range _ebad ._ace .Body .EG_BlockLevelElts {for _ ,_abdd :=range _bag .EG_ContentBlockContent {for _fcdc ,_ddfd :=range _abdd .P {if _ddfd ==_bdee {_ebf :=_dc .NewCT_P ();_abdd .P =append (_abdd .P ,nil );if _aabd {copy (_abdd .P [_fcdc +1:],_abdd .P [_fcdc :]);_abdd .P [_fcdc ]=_ebf ;}else {copy (_abdd .P [_fcdc +2:],_abdd .P [_fcdc +1:]);_abdd .P [_fcdc +1]=_ebf ;};return Paragraph {_ebad ,_ebf };};};for _ ,_ccfe :=range _abdd .Tbl {for _ ,_bgedg :=range _ccfe .EG_ContentRowContent {for _ ,_bddd :=range _bgedg .Tr {for _ ,_bdbag :=range _bddd .EG_ContentCellContent {for _ ,_gcac :=range _bdbag .Tc {for _ ,_bfdf :=range _gcac .EG_BlockLevelElts {for _ ,_fage :=range _bfdf .EG_ContentBlockContent {for _agb ,_fgcd :=range _fage .P {if _fgcd ==_bdee {_aefe :=_dc .NewCT_P ();_fage .P =append (_fage .P ,nil );if _aabd {copy (_fage .P [_agb +1:],_fage .P [_agb :]);_fage .P [_agb ]=_aefe ;}else {copy (_fage .P [_agb +2:],_fage .P [_agb +1:]);_fage .P [_agb +1]=_aefe ;};return Paragraph {_ebad ,_aefe };};};};};};};};};};if _abdd .Sdt !=nil &&_abdd .Sdt .SdtContent !=nil &&_abdd .Sdt .SdtContent .P !=nil {for _fffa ,_dfgd :=range _abdd .Sdt .SdtContent .P {if _dfgd ==_bdee {_dgcb :=_dc .NewCT_P ();_abdd .Sdt .SdtContent .P =append (_abdd .Sdt .SdtContent .P ,nil );if _aabd {copy (_abdd .Sdt .SdtContent .P [_fffa +1:],_abdd .Sdt .SdtContent .P [_fffa :]);_abdd .Sdt .SdtContent .P [_fffa ]=_dgcb ;}else {copy (_abdd .Sdt .SdtContent .P [_fffa +2:],_abdd .Sdt .SdtContent .P [_fffa +1:]);_abdd .Sdt .SdtContent .P [_fffa +1]=_dgcb ;};return Paragraph {_ebad ,_dgcb };};};};};};return _ebad .AddParagraph ();};

// Footers returns the footers defined in the document.
func (_dga *Document )Footers ()[]Footer {_aff :=[]Footer {};for _ ,_gdc :=range _dga ._ddg {_aff =append (_aff ,Footer {_dga ,_gdc });};return _aff ;};

// ClearColor clears the text color.
func (_ebfb RunProperties )ClearColor (){_ebfb ._becce .Color =nil };

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_beb CellProperties )SetVerticalAlignment (align _dc .ST_VerticalJc ){if align ==_dc .ST_VerticalJcUnset {_beb ._cea .VAlign =nil ;}else {_beb ._cea .VAlign =_dc .NewCT_VerticalJc ();_beb ._cea .VAlign .ValAttr =align ;};};

// X returns the inner wrapped XML type.
func (_bbab Footer )X ()*_dc .Ftr {return _bbab ._bgga };func (_ecba Paragraph )insertRun (_ecfdf Run ,_gfbb bool )Run {for _ ,_caa :=range _ecba ._feea .EG_PContent {for _gaeb ,_aadef :=range _caa .EG_ContentRunContent {if _aadef .R ==_ecfdf .X (){_bbadc :=_dc .NewCT_R ();_caa .EG_ContentRunContent =append (_caa .EG_ContentRunContent ,nil );if _gfbb {copy (_caa .EG_ContentRunContent [_gaeb +1:],_caa .EG_ContentRunContent [_gaeb :]);_caa .EG_ContentRunContent [_gaeb ]=_dc .NewEG_ContentRunContent ();_caa .EG_ContentRunContent [_gaeb ].R =_bbadc ;}else {copy (_caa .EG_ContentRunContent [_gaeb +2:],_caa .EG_ContentRunContent [_gaeb +1:]);_caa .EG_ContentRunContent [_gaeb +1]=_dc .NewEG_ContentRunContent ();_caa .EG_ContentRunContent [_gaeb +1].R =_bbadc ;};return Run {_ecba ._bfdb ,_bbadc };};if _aadef .Sdt !=nil &&_aadef .Sdt .SdtContent !=nil {for _ ,_beag :=range _aadef .Sdt .SdtContent .EG_ContentRunContent {if _beag .R ==_ecfdf .X (){_dede :=_dc .NewCT_R ();_aadef .Sdt .SdtContent .EG_ContentRunContent =append (_aadef .Sdt .SdtContent .EG_ContentRunContent ,nil );if _gfbb {copy (_aadef .Sdt .SdtContent .EG_ContentRunContent [_gaeb +1:],_aadef .Sdt .SdtContent .EG_ContentRunContent [_gaeb :]);_aadef .Sdt .SdtContent .EG_ContentRunContent [_gaeb ]=_dc .NewEG_ContentRunContent ();_aadef .Sdt .SdtContent .EG_ContentRunContent [_gaeb ].R =_dede ;}else {copy (_aadef .Sdt .SdtContent .EG_ContentRunContent [_gaeb +2:],_aadef .Sdt .SdtContent .EG_ContentRunContent [_gaeb +1:]);_aadef .Sdt .SdtContent .EG_ContentRunContent [_gaeb +1]=_dc .NewEG_ContentRunContent ();_aadef .Sdt .SdtContent .EG_ContentRunContent [_gaeb +1].R =_dede ;};return Run {_ecba ._bfdb ,_dede };};};};};};return _ecba .AddRun ();};

// ParagraphProperties returns the paragraph style properties.
func (_aabdd Style )ParagraphProperties ()ParagraphStyleProperties {if _aabdd ._afaf .PPr ==nil {_aabdd ._afaf .PPr =_dc .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_aabdd ._afaf .PPr };};

// Levels returns all of the numbering levels defined in the definition.
func (_babf NumberingDefinition )Levels ()[]NumberingLevel {_dbfa :=[]NumberingLevel {};for _ ,_ebbe :=range _babf ._ffee .Lvl {_dbfa =append (_dbfa ,NumberingLevel {_ebbe });};return _dbfa ;};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_ggff Paragraph )SetNumberingLevel (listLevel int ){_ggff .ensurePPr ();if _ggff ._feea .PPr .NumPr ==nil {_ggff ._feea .PPr .NumPr =_dc .NewCT_NumPr ();};_gbd :=_dc .NewCT_DecimalNumber ();_gbd .ValAttr =int64 (listLevel );_ggff ._feea .PPr .NumPr .Ilvl =_gbd ;};

// EastAsiaFont returns the name of run font family for East Asia.
func (_ffgg RunProperties )EastAsiaFont ()string {if _cefc :=_ffgg ._becce .RFonts ;_cefc !=nil {if _cefc .EastAsiaAttr !=nil {return *_cefc .EastAsiaAttr ;};};return "";};

// FormFieldType is the type of the form field.
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// X returns the inner wml.CT_TblBorders
func (_fdbc TableBorders )X ()*_dc .CT_TblBorders {return _fdbc ._egdf };

// RunProperties returns the run style properties.
func (_dggc Style )RunProperties ()RunProperties {if _dggc ._afaf .RPr ==nil {_dggc ._afaf .RPr =_dc .NewCT_RPr ();};return RunProperties {_dggc ._afaf .RPr };};

// X returns the inner wrapped XML type.
func (_ae Bookmark )X ()*_dc .CT_Bookmark {return _ae ._dcd };

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_dgcbe ParagraphProperties )CharacterSpacingMeasure ()string {if _ddabc :=_dgcbe ._efff .RPr .Spacing ;_ddabc !=nil {_dade :=_ddabc .ValAttr ;if _dade .ST_UniversalMeasure !=nil {return *_dade .ST_UniversalMeasure ;};};return "";};func (_dgd *Document )InsertTableAfter (relativeTo Paragraph )Table {return _dgd .insertTable (relativeTo ,false );};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_daff Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_ggag :=_daff .newIC ();_ggag .FldChar =_dc .NewCT_FldChar ();_ggag .FldChar .FldCharTypeAttr =_dc .ST_FldCharTypeBegin ;if isDirty {_ggag .FldChar .DirtyAttr =&_be .ST_OnOff {};_ggag .FldChar .DirtyAttr .Bool =_cg .Bool (true );};_ggag =_daff .newIC ();_ggag .InstrText =_dc .NewCT_Text ();if fmt !=""{_ggag .InstrText .Content =code +"\u0020"+fmt ;}else {_ggag .InstrText .Content =code ;};_ggag =_daff .newIC ();_ggag .FldChar =_dc .NewCT_FldChar ();_ggag .FldChar .FldCharTypeAttr =_dc .ST_FldCharTypeEnd ;};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_cfce Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_cfce .ensurePPr ();if _cfce ._feea .PPr .NumPr ==nil {_cfce ._feea .PPr .NumPr =_dc .NewCT_NumPr ();};_gcdea :=_dc .NewCT_DecimalNumber ();_gcdea .ValAttr =int64 (abstractNumberID );_cfce ._feea .PPr .NumPr .NumId =_gcdea ;};

// Color returns the style's Color.
func (_dgbbc RunProperties )Color ()Color {if _dgbbc ._becce .Color ==nil {_dgbbc ._becce .Color =_dc .NewCT_Color ();};return Color {_dgbbc ._becce .Color };};

// StyleID returns the style ID.
func (_ddcac Style )StyleID ()string {if _ddcac ._afaf .StyleIdAttr ==nil {return "";};return *_ddcac ._afaf .StyleIdAttr ;};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_defb *Document )FormFields ()[]FormField {_bcd :=[]FormField {};for _ ,_fcdf :=range _defb .Paragraphs (){_ddcaa :=_fcdf .Runs ();for _dge ,_bcc :=range _ddcaa {for _ ,_dbe :=range _bcc ._ggab .EG_RunInnerContent {if _dbe .FldChar ==nil ||_dbe .FldChar .FfData ==nil {continue ;};if _dbe .FldChar .FldCharTypeAttr ==_dc .ST_FldCharTypeBegin {if len (_dbe .FldChar .FfData .Name )==0||_dbe .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_fgdf :=FormField {_cede :_dbe .FldChar .FfData };if _dbe .FldChar .FfData .TextInput !=nil {for _afcg :=_dge +1;_afcg < len (_ddcaa )-1;_afcg ++{if len (_ddcaa [_afcg ]._ggab .EG_RunInnerContent )==0{continue ;};_cfgd :=_ddcaa [_afcg ]._ggab .EG_RunInnerContent [0];if _cfgd .FldChar !=nil &&_cfgd .FldChar .FldCharTypeAttr ==_dc .ST_FldCharTypeSeparate {if len (_ddcaa [_afcg +1]._ggab .EG_RunInnerContent )==0{continue ;};if _ddcaa [_afcg +1]._ggab .EG_RunInnerContent [0].FldChar ==nil {_fgdf ._dgad =_ddcaa [_afcg +1]._ggab .EG_RunInnerContent [0];break ;};};};};_bcd =append (_bcd ,_fgdf );};};};};return _bcd ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_ebae Footer )AddImage (i _bd .Image )(_bd .ImageRef ,error ){var _abddg _bd .Relationships ;for _dafg ,_gddf :=range _ebae ._ffgf ._ddg {if _gddf ==_ebae ._bgga {_abddg =_ebae ._ffgf ._bf [_dafg ];};};_bbgbg :=_bd .MakeImageRef (i ,&_ebae ._ffgf .DocBase ,_abddg );if i .Data ==nil &&i .Path ==""{return _bbgbg ,_d .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _bbgbg ,_d .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _bbgbg ,_d .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_ebae ._ffgf .Images =append (_ebae ._ffgf .Images ,_bbgbg );_fdfe :=_b .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_ebae ._ffgf .Images ),i .Format );_fgda :=_abddg .AddRelationship (_fdfe ,_cg .ImageType );_bbgbg .SetRelID (_fgda .X ().IdAttr );return _bbgbg ,nil ;};

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_dbab *_dc .CT_Lvl };

// SetPageMargins sets the page margins for a section
func (_gbbf Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _bg .Distance ){_fecf :=_dc .NewCT_PageMar ();_fecf .TopAttr .Int64 =_cg .Int64 (int64 (top /_bg .Twips ));_fecf .BottomAttr .Int64 =_cg .Int64 (int64 (bottom /_bg .Twips ));_fecf .RightAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (right /_bg .Twips ));_fecf .LeftAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (left /_bg .Twips ));_fecf .HeaderAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (header /_bg .Twips ));_fecf .FooterAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (footer /_bg .Twips ));_fecf .GutterAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (gutter /_bg .Twips ));_gbbf ._fcbff .PgMar =_fecf ;};

// SetStartPct sets the cell start margin
func (_db CellMargins )SetStartPct (pct float64 ){_db ._acg .Start =_dc .NewCT_TblWidth ();_afb (_db ._acg .Start ,pct );};

// X returns the inner wrapped XML type.
func (_gcfgb TableStyleProperties )X ()*_dc .CT_TblPrBase {return _gcfgb ._abce };

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_ccff *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _ccff .insertParagraph (relativeTo ,false );};

// SetAlignment controls the paragraph alignment
func (_gdbb ParagraphStyleProperties )SetAlignment (align _dc .ST_Jc ){if align ==_dc .ST_JcUnset {_gdbb ._acgef .Jc =nil ;}else {_gdbb ._acgef .Jc =_dc .NewCT_Jc ();_gdbb ._acgef .Jc .ValAttr =align ;};};

// SetASCIITheme sets the font ASCII Theme.
func (_eccag Fonts )SetASCIITheme (t _dc .ST_Theme ){_eccag ._dccb .AsciiThemeAttr =t };

// Style is a style within the styles.xml file.
type Style struct{_afaf *_dc .CT_Style };

// Paragraphs returns the paragraphs defined in a footer.
func (_fgdd Footer )Paragraphs ()[]Paragraph {_feff :=[]Paragraph {};for _ ,_eaee :=range _fgdd ._bgga .EG_ContentBlockContent {for _ ,_adfb :=range _eaee .P {_feff =append (_feff ,Paragraph {_fgdd ._ffgf ,_adfb });};};for _ ,_cgcb :=range _fgdd .Tables (){for _ ,_faab :=range _cgcb .Rows (){for _ ,_egad :=range _faab .Cells (){_feff =append (_feff ,_egad .Paragraphs ()...);};};};return _feff ;};

// Shadow returns true if paragraph shadow is on.
func (_baafg ParagraphProperties )Shadow ()bool {return _dedc (_baafg ._efff .RPr .Shadow )};

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_cfge *Document )Copy ()(*Document ,error ){_bbbg :=_cc .NewBuffer ([]byte {});_fcdcg :=_cfge .save (_bbbg ,_cfge ._fbe );if _fcdcg !=nil {return nil ,_fcdcg ;};_gcgg :=_bbbg .Bytes ();_bggg :=_cc .NewReader (_gcgg );return _bde (_bggg ,int64 (_bggg .Len ()),_cfge ._fbe );};

// SetLeft sets the cell left margin
func (_cfd CellMargins )SetLeft (d _bg .Distance ){_cfd ._acg .Left =_dc .NewCT_TblWidth ();_ccg (_cfd ._acg .Left ,d );};

// AddText adds tet to a run.
func (_afcc Run )AddText (s string ){_fgbg :=_dc .NewEG_RunInnerContent ();_afcc ._ggab .EG_RunInnerContent =append (_afcc ._ggab .EG_RunInnerContent ,_fgbg );_fgbg .T =_dc .NewCT_Text ();if _cg .NeedsSpacePreserve (s ){_badg :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_fgbg .T .SpaceAttr =&_badg ;};_fgbg .T .Content =s ;};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_dbff ParagraphSpacing )SetAfterAuto (b bool ){if b {_dbff ._abeg .AfterAutospacingAttr =&_be .ST_OnOff {};_dbff ._abeg .AfterAutospacingAttr .Bool =_cg .Bool (true );}else {_dbff ._abeg .AfterAutospacingAttr =nil ;};};

// SetEndIndent controls the end indentation.
func (_egea ParagraphProperties )SetEndIndent (m _bg .Distance ){if _egea ._efff .Ind ==nil {_egea ._efff .Ind =_dc .NewCT_Ind ();};if m ==_bg .Zero {_egea ._efff .Ind .EndAttr =nil ;}else {_egea ._efff .Ind .EndAttr =&_dc .ST_SignedTwipsMeasure {};_egea ._efff .Ind .EndAttr .Int64 =_cg .Int64 (int64 (m /_bg .Twips ));};};func (_dbac *Document )tables (_bcb *_dc .EG_ContentBlockContent )[]Table {_gda :=[]Table {};for _ ,_cbe :=range _bcb .Tbl {_gda =append (_gda ,Table {_dbac ,_cbe });for _ ,_egag :=range _cbe .EG_ContentRowContent {for _ ,_dda :=range _egag .Tr {for _ ,_bdag :=range _dda .EG_ContentCellContent {for _ ,_fdb :=range _bdag .Tc {for _ ,_gee :=range _fdb .EG_BlockLevelElts {for _ ,_aed :=range _gee .EG_ContentBlockContent {for _ ,_bec :=range _dbac .tables (_aed ){_gda =append (_gda ,_bec );};};};};};};};};return _gda ;};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_ddeg Document )SetStrict (strict bool ){if strict {_ddeg ._ace .ConformanceAttr =_be .ST_ConformanceClassStrict ;}else {_ddeg ._ace .ConformanceAttr =_be .ST_ConformanceClassTransitional ;};};

// DoubleStrike returns true if paragraph is double striked.
func (_edba ParagraphProperties )DoubleStrike ()bool {return _dedc (_edba ._efff .RPr .Dstrike )};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_egegd TableBorders )SetInsideHorizontal (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_egegd ._egdf .InsideH =_dc .NewCT_Border ();_eacaa (_egegd ._egdf .InsideH ,t ,c ,thickness );};

// SetShadow sets the run to shadowed text.
func (_aaab RunProperties )SetShadow (b bool ){if !b {_aaab ._becce .Shadow =nil ;}else {_aaab ._becce .Shadow =_dc .NewCT_OnOff ();};};func _ccg (_bgd *_dc .CT_TblWidth ,_aad _bg .Distance ){_bgd .TypeAttr =_dc .ST_TblWidthDxa ;_bgd .WAttr =&_dc .ST_MeasurementOrPercent {};_bgd .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_bgd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (_aad /_bg .Dxa ));};

// Properties returns the table properties.
func (_ddaf Table )Properties ()TableProperties {if _ddaf ._eaeb .TblPr ==nil {_ddaf ._eaeb .TblPr =_dc .NewCT_TblPr ();};return TableProperties {_ddaf ._eaeb .TblPr };};

// SetRight sets the cell right margin
func (_ccc CellMargins )SetRight (d _bg .Distance ){_ccc ._acg .Right =_dc .NewCT_TblWidth ();_ccg (_ccc ._acg .Right ,d );};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_gfade TableStyleProperties )SetCellSpacingAuto (){_gfade ._abce .TblCellSpacing =_dc .NewCT_TblWidth ();_gfade ._abce .TblCellSpacing .TypeAttr =_dc .ST_TblWidthAuto ;};

// Paragraphs returns the paragraphs within a structured document tag.
func (_eebf StructuredDocumentTag )Paragraphs ()[]Paragraph {if _eebf ._gedde .SdtContent ==nil {return nil ;};_fagb :=[]Paragraph {};for _ ,_egba :=range _eebf ._gedde .SdtContent .P {_fagb =append (_fagb ,Paragraph {_eebf ._cffa ,_egba });};return _fagb ;};

// Table is a table within a document.
type Table struct{_aaae *Document ;_eaeb *_dc .CT_Tbl ;};

// SetLeft sets the left border to a specified type, color and thickness.
func (_gafaf TableBorders )SetLeft (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_gafaf ._egdf .Left =_dc .NewCT_Border ();_eacaa (_gafaf ._egdf .Left ,t ,c ,thickness );};var _dcc =false ;

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_eagc TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _eagc ._gcacc .PPr ==nil {_eagc ._gcacc .PPr =_dc .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_eagc ._gcacc .PPr };};

// X returns the inner wrapped XML type.
func (_cggg InlineDrawing )X ()*_dc .WdInline {return _cggg ._effc };

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_dgage TableBorders )SetBottom (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_dgage ._egdf .Bottom =_dc .NewCT_Border ();_eacaa (_dgage ._egdf .Bottom ,t ,c ,thickness );};

// AddParagraph adds a paragraph to the footnote.
func (_afab Footnote )AddParagraph ()Paragraph {_dea :=_dc .NewEG_ContentBlockContent ();_eccb :=len (_afab ._afba .EG_BlockLevelElts [0].EG_ContentBlockContent );_afab ._afba .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_afab ._afba .EG_BlockLevelElts [0].EG_ContentBlockContent ,_dea );_gffe :=_dc .NewCT_P ();var _fagec *_dc .CT_String ;if _eccb !=0{_cfcg :=len (_afab ._afba .EG_BlockLevelElts [0].EG_ContentBlockContent [_eccb -1].P );_fagec =_afab ._afba .EG_BlockLevelElts [0].EG_ContentBlockContent [_eccb -1].P [_cfcg -1].PPr .PStyle ;}else {_fagec =_dc .NewCT_String ();_fagec .ValAttr ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065";};_dea .P =append (_dea .P ,_gffe );_cdda :=Paragraph {_afab ._accc ,_gffe };_cdda ._feea .PPr =_dc .NewCT_PPr ();_cdda ._feea .PPr .PStyle =_fagec ;_cdda ._feea .PPr .RPr =_dc .NewCT_ParaRPr ();return _cdda ;};func _cbba (_eebe *_dg .CT_Blip ,_agec map[string ]string ){if _eebe .EmbedAttr !=nil {if _cefg ,_fbce :=_agec [*_eebe .EmbedAttr ];_fbce {*_eebe .EmbedAttr =_cefg ;};};};

// Runs returns all of the runs in a paragraph.
func (_bbee Paragraph )Runs ()[]Run {_eedf :=[]Run {};for _ ,_dffa :=range _bbee ._feea .EG_PContent {for _ ,_ggfb :=range _dffa .EG_ContentRunContent {if _ggfb .R !=nil {_eedf =append (_eedf ,Run {_bbee ._bfdb ,_ggfb .R });};if _ggfb .Sdt !=nil &&_ggfb .Sdt .SdtContent !=nil {for _ ,_fcabe :=range _ggfb .Sdt .SdtContent .EG_ContentRunContent {if _fcabe .R !=nil {_eedf =append (_eedf ,Run {_bbee ._bfdb ,_fcabe .R });};};};};};return _eedf ;};

// Endnotes returns the endnotes defined in the document.
func (_geaf *Document )Endnotes ()[]Endnote {_fda :=[]Endnote {};for _ ,_cbdf :=range _geaf ._gcd .CT_Endnotes .Endnote {_fda =append (_fda ,Endnote {_geaf ,_cbdf });};return _fda ;};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_fabf ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_fabf ._acgef .ContextualSpacing =nil ;}else {_fabf ._acgef .ContextualSpacing =_dc .NewCT_OnOff ();};};

// TableProperties returns the table style properties.
func (_aeca Style )TableProperties ()TableStyleProperties {if _aeca ._afaf .TblPr ==nil {_aeca ._afaf .TblPr =_dc .NewCT_TblPrBase ();};return TableStyleProperties {_aeca ._afaf .TblPr };};

// SetLinkedStyle sets the style that this style is linked to.
func (_ddee Style )SetLinkedStyle (name string ){if name ==""{_ddee ._afaf .Link =nil ;}else {_ddee ._afaf .Link =_dc .NewCT_String ();_ddee ._afaf .Link .ValAttr =name ;};};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_ggf AnchoredDrawing )SetAlignment (h _dc .WdST_AlignH ,v _dc .WdST_AlignV ){_ggf .SetHAlignment (h );_ggf .SetVAlignment (v );};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_abgbb Style )TableConditionalFormatting (typ _dc .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_cedd :=range _abgbb ._afaf .TblStylePr {if _cedd .TypeAttr ==typ {return TableConditionalFormatting {_cedd };};};_aedg :=_dc .NewCT_TblStylePr ();_aedg .TypeAttr =typ ;_abgbb ._afaf .TblStylePr =append (_abgbb ._afaf .TblStylePr ,_aedg );return TableConditionalFormatting {_aedg };};

// X returns the inner wrapped XML type.
func (_efcg Style )X ()*_dc .CT_Style {return _efcg ._afaf };

// InsertRowAfter inserts a row after another row
func (_gadgd Table )InsertRowAfter (r Row )Row {for _faag ,_dcea :=range _gadgd ._eaeb .EG_ContentRowContent {if len (_dcea .Tr )> 0&&r .X ()==_dcea .Tr [0]{_dfdfb :=_dc .NewEG_ContentRowContent ();if len (_gadgd ._eaeb .EG_ContentRowContent )< _faag +2{return _gadgd .AddRow ();};_gadgd ._eaeb .EG_ContentRowContent =append (_gadgd ._eaeb .EG_ContentRowContent ,nil );copy (_gadgd ._eaeb .EG_ContentRowContent [_faag +2:],_gadgd ._eaeb .EG_ContentRowContent [_faag +1:]);_gadgd ._eaeb .EG_ContentRowContent [_faag +1]=_dfdfb ;_abefe :=_dc .NewCT_Row ();_dfdfb .Tr =append (_dfdfb .Tr ,_abefe );return Row {_gadgd ._aaae ,_abefe };};};return _gadgd .AddRow ();};func (_fegde Endnote )content ()[]*_dc .EG_ContentBlockContent {var _beea []*_dc .EG_ContentBlockContent ;for _ ,_fcab :=range _fegde ._dcdg .EG_BlockLevelElts {_beea =append (_beea ,_fcab .EG_ContentBlockContent ...);};return _beea ;};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_dccb *_dc .CT_Fonts };

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_afcf NumberingDefinition )MultiLevelType ()_dc .ST_MultiLevelType {if _afcf ._ffee .MultiLevelType !=nil {return _afcf ._ffee .MultiLevelType .ValAttr ;}else {return _dc .ST_MultiLevelTypeUnset ;};};

// SetWidthPercent sets the cell to a width percentage.
func (_add CellProperties )SetWidthPercent (pct float64 ){_add ._cea .TcW =_dc .NewCT_TblWidth ();_add ._cea .TcW .TypeAttr =_dc .ST_TblWidthPct ;_add ._cea .TcW .WAttr =&_dc .ST_MeasurementOrPercent {};_add ._cea .TcW .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_add ._cea .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (pct *50));};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_ddda Paragraph )InsertRunBefore (relativeTo Run )Run {return _ddda .insertRun (relativeTo ,true )};

// SetColumnBandSize sets the number of Columns in the column band
func (_edffa TableStyleProperties )SetColumnBandSize (cols int64 ){_edffa ._abce .TblStyleColBandSize =_dc .NewCT_DecimalNumber ();_edffa ._abce .TblStyleColBandSize .ValAttr =cols ;};

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_gcacc *_dc .CT_TblStylePr };

// Tables returns the tables defined in the header.
func (_fdgd Header )Tables ()[]Table {_dege :=[]Table {};if _fdgd ._ecac ==nil {return nil ;};for _ ,_dff :=range _fdgd ._ecac .EG_ContentBlockContent {for _ ,_fgbd :=range _fdgd ._ecbe .tables (_dff ){_dege =append (_dege ,_fgbd );};};return _dege ;};

// AddBreak adds a line break to a run.
func (_fdebg Run )AddBreak (){_baad :=_fdebg .newIC ();_baad .Br =_dc .NewCT_Br ()};func (_cba *Document )save (_deb _ga .Writer ,_bfa string )error {const _ffd ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";if _aaad :=_cba ._ace .Validate ();_aaad !=nil {_cg .Log ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_aaad );};_bda :=_cg .DocTypeDocument ;if !_cce .GetLicenseKey ().IsLicensed ()&&!_dcc {_b .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_b .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _d .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_cba ._fbe )==0{if len (_bfa )> 0{_cba ._fbe =_bfa ;}else {_gca ,_eag :=_cce .GenRefId ("\u0064\u0077");if _eag !=nil {_cg .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_eag );return _eag ;};_cba ._fbe =_gca ;};};if _ebc :=_cce .Track (_cba ._fbe ,_ffd );_ebc !=nil {_b .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_ebc );return _ebc ;};_fgc :=_ag .NewWriter (_deb );defer _fgc .Close ();if _ffc :=_cf .MarshalXML (_fgc ,_cg .BaseRelsFilename ,_cba .Rels .X ());_ffc !=nil {return _ffc ;};if _fdeb :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .ExtendedPropertiesType ,_cba .AppProperties .X ());_fdeb !=nil {return _fdeb ;};if _eab :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .CorePropertiesType ,_cba .CoreProperties .X ());_eab !=nil {return _eab ;};if _cba .CustomProperties .X ()!=nil {if _dee :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .CustomPropertiesType ,_cba .CustomProperties .X ());_dee !=nil {return _dee ;};};if _cba .Thumbnail !=nil {_dadc ,_egd :=_fgc .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _egd !=nil {return _egd ;};if _ddb :=_gg .Encode (_dadc ,_cba .Thumbnail ,nil );_ddb !=nil {return _ddb ;};};if _fddc :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .SettingsType ,_cba .Settings .X ());_fddc !=nil {return _fddc ;};_bbd :=_cg .AbsoluteFilename (_bda ,_cg .OfficeDocumentType ,0);if _cfb :=_cf .MarshalXML (_fgc ,_bbd ,_cba ._ace );_cfb !=nil {return _cfb ;};if _fff :=_cf .MarshalXML (_fgc ,_cf .RelationsPathFor (_bbd ),_cba ._afde .X ());_fff !=nil {return _fff ;};if _cba .Numbering .X ()!=nil {if _eed :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .NumberingType ,_cba .Numbering .X ());_eed !=nil {return _eed ;};};if _gdg :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .StylesType ,_cba .Styles .X ());_gdg !=nil {return _gdg ;};if _cba ._fegd !=nil {if _bdb :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .WebSettingsType ,_cba ._fegd );_bdb !=nil {return _bdb ;};};if _cba ._ff !=nil {if _ggb :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .FontTableType ,_cba ._ff );_ggb !=nil {return _ggb ;};};if _cba ._gcd !=nil {if _fbf :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .EndNotesType ,_cba ._gcd );_fbf !=nil {return _fbf ;};};if _cba ._aae !=nil {if _fab :=_cf .MarshalXMLByType (_fgc ,_bda ,_cg .FootNotesType ,_cba ._aae );_fab !=nil {return _fab ;};};for _gcga ,_abe :=range _cba ._ega {if _edf :=_cf .MarshalXMLByTypeIndex (_fgc ,_bda ,_cg .ThemeType ,_gcga +1,_abe );_edf !=nil {return _edf ;};};for _eff ,_acgb :=range _cba ._dad {if _dfa :=_cf .MarshalXMLByTypeIndex (_fgc ,_bda ,_cg .ControlType ,_eff +1,_acgb );_dfa !=nil {return _dfa ;};};for _ade ,_ffcg :=range _cba ._fbb {_gga :=_cg .AbsoluteFilename (_bda ,_cg .HeaderType ,_ade +1);if _bbg :=_cf .MarshalXML (_fgc ,_gga ,_ffcg );_bbg !=nil {return _bbg ;};if !_cba ._fae [_ade ].IsEmpty (){_cf .MarshalXML (_fgc ,_cf .RelationsPathFor (_gga ),_cba ._fae [_ade ].X ());};};for _ca ,_dfag :=range _cba ._ddg {_aca :=_cg .AbsoluteFilename (_bda ,_cg .FooterType ,_ca +1);if _ced :=_cf .MarshalXMLByTypeIndex (_fgc ,_bda ,_cg .FooterType ,_ca +1,_dfag );_ced !=nil {return _ced ;};if !_cba ._bf [_ca ].IsEmpty (){_cf .MarshalXML (_fgc ,_cf .RelationsPathFor (_aca ),_cba ._bf [_ca ].X ());};};for _egg ,_edg :=range _cba .Images {if _cffe :=_bd .AddImageToZip (_fgc ,_edg ,_egg +1,_cg .DocTypeDocument );_cffe !=nil {return _cffe ;};};if _cca :=_cf .MarshalXML (_fgc ,_cg .ContentTypesFilename ,_cba .ContentTypes .X ());_cca !=nil {return _cca ;};if _gdf :=_cba .WriteExtraFiles (_fgc );_gdf !=nil {return _gdf ;};return _fgc .Close ();};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_fcdb Run )AddTab (){_ceba :=_fcdb .newIC ();_ceba .Tab =_dc .NewCT_Empty ()};

// Clear clears all content within a footer
func (_aged Footer )Clear (){_aged ._bgga .EG_ContentBlockContent =nil };func _badb (_fccg *_dc .CT_P ,_bafc ,_fgb map[int64 ]int64 ){for _ ,_bddc :=range _fccg .EG_PContent {for _ ,_ggfd :=range _bddc .EG_ContentRunContent {if _ggfd .R !=nil {for _ ,_bfdd :=range _ggfd .R .EG_RunInnerContent {_fgec :=_bfdd .EndnoteReference ;if _fgec !=nil &&_fgec .IdAttr > 0{if _fdbg ,_bedd :=_fgb [_fgec .IdAttr ];_bedd {_fgec .IdAttr =_fdbg ;};};_gabb :=_bfdd .FootnoteReference ;if _gabb !=nil &&_gabb .IdAttr > 0{if _dacad ,_eebd :=_bafc [_gabb .IdAttr ];_eebd {_gabb .IdAttr =_dacad ;};};};};};};};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_gfdd ParagraphProperties )EastAsiaFont ()string {if _adaed :=_gfdd ._efff .RPr .RFonts ;_adaed !=nil {if _adaed .EastAsiaAttr !=nil {return *_adaed .EastAsiaAttr ;};};return "";};

// InitializeDefault constructs the default styles.
func (_fddd Styles )InitializeDefault (){_fddd .initializeDocDefaults ();_fddd .initializeStyleDefaults ();};

// Save writes the document to an io.Writer in the Zip package format.
func (_gce *Document )Save (w _ga .Writer )error {return _gce .save (w ,_gce ._fbe )};

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_dgb CellProperties )SetColumnSpan (cols int ){if cols ==0{_dgb ._cea .GridSpan =nil ;}else {_dgb ._cea .GridSpan =_dc .NewCT_DecimalNumber ();_dgb ._cea .GridSpan .ValAttr =int64 (cols );};};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_bgea *Document )GetImageByRelID (relID string )(_bd .ImageRef ,bool ){for _ ,_ecb :=range _bgea .Images {if _ecb .RelID ()==relID {return _ecb ,true ;};};return _bd .ImageRef {},false ;};

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;};

// Bookmarks returns all of the bookmarks defined in the document.
func (_ebea Document )Bookmarks ()[]Bookmark {if _ebea ._ace .Body ==nil {return nil ;};_gcgaa :=[]Bookmark {};for _ ,_geee :=range _ebea ._ace .Body .EG_BlockLevelElts {for _ ,_adcf :=range _geee .EG_ContentBlockContent {for _ ,_agbg :=range _afcga (_adcf ){_gcgaa =append (_gcgaa ,_agbg );};};};return _gcgaa ;};

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_cbfe *_dc .Styles };

// Footnote is an individual footnote reference within the document.
type Footnote struct{_accc *Document ;_afba *_dc .CT_FtnEdn ;};

// SetWidth sets the table with to a specified width.
func (_adbbd TableProperties )SetWidth (d _bg .Distance ){_adbbd ._eacagd .TblW =_dc .NewCT_TblWidth ();_adbbd ._eacagd .TblW .TypeAttr =_dc .ST_TblWidthDxa ;_adbbd ._eacagd .TblW .WAttr =&_dc .ST_MeasurementOrPercent {};_adbbd ._eacagd .TblW .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_adbbd ._eacagd .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (d /_bg .Twips ));};

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_efbe Run )IsEndnote ()(bool ,int64 ){if _efbe ._ggab .EG_RunInnerContent !=nil {if _efbe ._ggab .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_efbe ._ggab .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;};

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_dbb *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _dbb .insertParagraph (relativeTo ,true );};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_cffc TableProperties )SetCellSpacingPercent (pct float64 ){_cffc ._eacagd .TblCellSpacing =_dc .NewCT_TblWidth ();_cffc ._eacagd .TblCellSpacing .TypeAttr =_dc .ST_TblWidthPct ;_cffc ._eacagd .TblCellSpacing .WAttr =&_dc .ST_MeasurementOrPercent {};_cffc ._eacagd .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_cffc ._eacagd .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (pct *50));};

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_cdaa Paragraph )AddDropdownList (name string )FormField {_gbbe :=_cdaa .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_gbbe ._cede .DdList =_dc .NewCT_FFDDList ();return _gbbe ;};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_gcbab ParagraphProperties )SetFirstLineIndent (m _bg .Distance ){if _gcbab ._efff .Ind ==nil {_gcbab ._efff .Ind =_dc .NewCT_Ind ();};if m ==_bg .Zero {_gcbab ._efff .Ind .FirstLineAttr =nil ;}else {_gcbab ._efff .Ind .FirstLineAttr =&_be .ST_TwipsMeasure {};_gcbab ._efff .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (m /_bg .Twips ));};};

// SetOutline sets the run to outlined text.
func (_bcba RunProperties )SetOutline (b bool ){if !b {_bcba ._becce .Outline =nil ;}else {_bcba ._becce .Outline =_dc .NewCT_OnOff ();};};

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_bccg ParagraphProperties )AddTabStop (position _bg .Distance ,justificaton _dc .ST_TabJc ,leader _dc .ST_TabTlc ){if _bccg ._efff .Tabs ==nil {_bccg ._efff .Tabs =_dc .NewCT_Tabs ();};_bdgg :=_dc .NewCT_TabStop ();_bdgg .LeaderAttr =leader ;_bdgg .ValAttr =justificaton ;_bdgg .PosAttr .Int64 =_cg .Int64 (int64 (position /_bg .Twips ));_bccg ._efff .Tabs .Tab =append (_bccg ._efff .Tabs .Tab ,_bdgg );};

// Name returns the name of the field.
func (_cgff FormField )Name ()string {return *_cgff ._cede .Name [0].ValAttr };

// SetWidthAuto sets the the table width to automatic.
func (_ebbab TableProperties )SetWidthAuto (){_ebbab ._eacagd .TblW =_dc .NewCT_TblWidth ();_ebbab ._eacagd .TblW .TypeAttr =_dc .ST_TblWidthAuto ;};

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_aeag RunProperties )ItalicValue ()OnOffValue {return _bcca (_aeag ._becce .I )};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_ecf *Document )Append (d1orig *Document )error {_dfeg ,_dadb :=d1orig .Copy ();if _dadb !=nil {return _dadb ;};_ecf .DocBase =_ecf .DocBase .Append (_dfeg .DocBase );if _dfeg ._ace .ConformanceAttr !=_be .ST_ConformanceClassStrict {_ecf ._ace .ConformanceAttr =_dfeg ._ace .ConformanceAttr ;};_eegf :=_ecf ._afde .X ().Relationship ;_eddc :=_dfeg ._afde .X ().Relationship ;_gegg :=_dfeg ._ace .Body ;_badag :=map[string ]string {};_dcbfg :=map[int64 ]int64 {};_bdbd :=map[int64 ]int64 {};for _ ,_egac :=range _eddc {_ddbf :=true ;_bccd :=_egac .IdAttr ;_bca :=_egac .TargetAttr ;_fada :=_egac .TypeAttr ;_cfgb :=_fada ==_cg .ImageType ;_geb :=_fada ==_cg .HyperLinkType ;var _bfbc string ;for _ ,_agfd :=range _eegf {if _agfd .TypeAttr ==_fada &&_agfd .TargetAttr ==_bca {_ddbf =false ;_bfbc =_agfd .IdAttr ;break ;};};if _cfgb {_aafe :="\u0077\u006f\u0072d\u002f"+_bca ;for _ ,_fca :=range _dfeg .DocBase .Images {if _fca .Target ()==_aafe {_dcgbc ,_ecg :=_bd .ImageFromStorage (_fca .Path ());if _ecg !=nil {return _ecg ;};_ggbe ,_ecg :=_ecf .AddImage (_dcgbc );if _ecg !=nil {return _ecg ;};_bfbc =_ggbe .RelID ();break ;};};}else if _ddbf {if _geb {_feec :=_ecf ._afde .AddHyperlink (_bca );_bfbc =_bd .Relationship (_feec ).ID ();}else {_fgef :=_ecf ._afde .AddRelationship (_bca ,_fada );_bfbc =_fgef .X ().IdAttr ;};};if _bccd !=_bfbc {_badag [_bccd ]=_bfbc ;};};if _gegg .SectPr !=nil {for _ ,_aagg :=range _gegg .SectPr .EG_HdrFtrReferences {if _aagg .HeaderReference !=nil {if _bdbbg ,_bgf :=_badag [_aagg .HeaderReference .IdAttr ];_bgf {_aagg .HeaderReference .IdAttr =_bdbbg ;_ecf ._fae =append (_ecf ._fae ,_bd .NewRelationships ());};}else if _aagg .FooterReference !=nil {if _faea ,_ddabg :=_badag [_aagg .FooterReference .IdAttr ];_ddabg {_aagg .FooterReference .IdAttr =_faea ;_ecf ._bf =append (_ecf ._bf ,_bd .NewRelationships ());};};};};_gbe ,_eggf :=_ecf ._gcd ,_dfeg ._gcd ;if _gbe !=nil {if _eggf !=nil {if _gbe .Endnote !=nil {if _eggf .Endnote !=nil {_aefc :=int64 (len (_gbe .Endnote )+1);for _ ,_ecce :=range _eggf .Endnote {_cgcc :=_ecce .IdAttr ;if _cgcc > 0{_ecce .IdAttr =_aefc ;_gbe .Endnote =append (_gbe .Endnote ,_ecce );_bdbd [_cgcc ]=_aefc ;_aefc ++;};};};}else {_gbe .Endnote =_eggf .Endnote ;};};}else if _eggf !=nil {_gbe =_eggf ;};_ecf ._gcd =_gbe ;_eccf ,_bdagf :=_ecf ._aae ,_dfeg ._aae ;if _eccf !=nil {if _bdagf !=nil {if _eccf .Footnote !=nil {if _bdagf .Footnote !=nil {_bcf :=int64 (len (_eccf .Footnote )+1);for _ ,_bcbb :=range _bdagf .Footnote {_agd :=_bcbb .IdAttr ;if _agd > 0{_bcbb .IdAttr =_bcf ;_eccf .Footnote =append (_eccf .Footnote ,_bcbb );_dcbfg [_agd ]=_bcf ;_bcf ++;};};};}else {_eccf .Footnote =_bdagf .Footnote ;};};}else if _bdagf !=nil {_eccf =_bdagf ;};_ecf ._aae =_eccf ;for _ ,_fabg :=range _gegg .EG_BlockLevelElts {for _ ,_fgg :=range _fabg .EG_ContentBlockContent {for _ ,_ccec :=range _fgg .P {_dadcf (_ccec ,_badag );_ddgg (_ccec ,_badag );_badb (_ccec ,_dcbfg ,_bdbd );};for _ ,_acge :=range _fgg .Tbl {_addb (_acge ,_badag );_fgf (_acge ,_badag );_bdbf (_acge ,_dcbfg ,_bdbd );};};};_ecf ._ace .Body .EG_BlockLevelElts =append (_ecf ._ace .Body .EG_BlockLevelElts ,_dfeg ._ace .Body .EG_BlockLevelElts ...);if _ecf ._ace .Body .SectPr ==nil {_ecf ._ace .Body .SectPr =_dfeg ._ace .Body .SectPr ;}else {var _ebfe ,_eegd bool ;for _ ,_bfea :=range _ecf ._ace .Body .SectPr .EG_HdrFtrReferences {if _bfea .HeaderReference !=nil {_ebfe =true ;}else if _bfea .FooterReference !=nil {_eegd =true ;};};if !_ebfe {for _ ,_cfba :=range _dfeg ._ace .Body .SectPr .EG_HdrFtrReferences {if _cfba .HeaderReference !=nil {_ecf ._ace .Body .SectPr .EG_HdrFtrReferences =append (_ecf ._ace .Body .SectPr .EG_HdrFtrReferences ,_cfba );break ;};};};if !_eegd {for _ ,_bdgd :=range _dfeg ._ace .Body .SectPr .EG_HdrFtrReferences {if _bdgd .FooterReference !=nil {_ecf ._ace .Body .SectPr .EG_HdrFtrReferences =append (_ecf ._ace .Body .SectPr .EG_HdrFtrReferences ,_bdgd );break ;};};};if _ecf ._ace .Body .SectPr .Cols ==nil &&_dfeg ._ace .Body .SectPr .Cols !=nil {_ecf ._ace .Body .SectPr .Cols =_dfeg ._ace .Body .SectPr .Cols ;};};_gdcb :=_ecf .Numbering ._cfbb ;_baf :=_dfeg .Numbering ._cfbb ;if _gdcb !=nil {if _baf !=nil {_gdcb .NumPicBullet =append (_gdcb .NumPicBullet ,_baf .NumPicBullet ...);_gdcb .AbstractNum =append (_gdcb .AbstractNum ,_baf .AbstractNum ...);_gdcb .Num =append (_gdcb .Num ,_baf .Num ...);};}else if _baf !=nil {_gdcb =_baf ;};_ecf .Numbering ._cfbb =_gdcb ;if _ecf .Styles ._cbfe ==nil &&_dfeg .Styles ._cbfe !=nil {_ecf .Styles ._cbfe =_dfeg .Styles ._cbfe ;};_ecf ._ega =append (_ecf ._ega ,_dfeg ._ega ...);_ecf ._dad =append (_ecf ._dad ,_dfeg ._dad ...);if len (_ecf ._fbb )==0{_ecf ._fbb =_dfeg ._fbb ;};if len (_ecf ._ddg )==0{_ecf ._ddg =_dfeg ._ddg ;};_gfg :=_ecf ._fegd ;_gefa :=_dfeg ._fegd ;if _gfg !=nil {if _gefa !=nil {if _gfg .Divs !=nil {if _gefa .Divs !=nil {_gfg .Divs .Div =append (_gfg .Divs .Div ,_gefa .Divs .Div ...);};}else {_gfg .Divs =_gefa .Divs ;};};_gfg .Frameset =nil ;}else if _gefa !=nil {_gfg =_gefa ;_gfg .Frameset =nil ;};_ecf ._fegd =_gfg ;_ebbb :=_ecf ._ff ;_eddg :=_dfeg ._ff ;if _ebbb !=nil {if _eddg !=nil {if _ebbb .Font !=nil {if _eddg .Font !=nil {for _ ,_gbgc :=range _eddg .Font {_cgf :=true ;for _ ,_dfde :=range _ebbb .Font {if _dfde .NameAttr ==_gbgc .NameAttr {_cgf =false ;break ;};};if _cgf {_ebbb .Font =append (_ebbb .Font ,_gbgc );};};};}else {_ebbb .Font =_eddg .Font ;};};}else if _eddg !=nil {_ebbb =_eddg ;};_ecf ._ff =_ebbb ;return nil ;};

// AddStyle adds a new empty style.
func (_adbb Styles )AddStyle (styleID string ,t _dc .ST_StyleType ,isDefault bool )Style {_acefa :=_dc .NewCT_Style ();_acefa .TypeAttr =t ;if isDefault {_acefa .DefaultAttr =&_be .ST_OnOff {};_acefa .DefaultAttr .Bool =_cg .Bool (isDefault );};_acefa .StyleIdAttr =_cg .String (styleID );_adbb ._cbfe .Style =append (_adbb ._cbfe .Style ,_acefa );return Style {_acefa };};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_eef *Document )Paragraphs ()[]Paragraph {_gcba :=[]Paragraph {};if _eef ._ace .Body ==nil {return nil ;};for _ ,_cceb :=range _eef ._ace .Body .EG_BlockLevelElts {for _ ,_gdae :=range _cceb .EG_ContentBlockContent {for _ ,_adg :=range _gdae .P {_gcba =append (_gcba ,Paragraph {_eef ,_adg });};};};for _ ,_aaac :=range _eef .Tables (){for _ ,_def :=range _aaac .Rows (){for _ ,_aced :=range _def .Cells (){_gcba =append (_gcba ,_aced .Paragraphs ()...);};};};return _gcba ;};func (_egc Footnote )content ()[]*_dc .EG_ContentBlockContent {var _dfbda []*_dc .EG_ContentBlockContent ;for _ ,_badbe :=range _egc ._afba .EG_BlockLevelElts {_dfbda =append (_dfbda ,_badbe .EG_ContentBlockContent ...);};return _dfbda ;};

// VerticalAlign returns the value of run vertical align.
func (_gffbf RunProperties )VerticalAlignment ()_be .ST_VerticalAlignRun {if _fbeb :=_gffbf ._becce .VertAlign ;_fbeb !=nil {return _fbeb .ValAttr ;};return 0;};

// SetEmboss sets the run to embossed text.
func (_adbc RunProperties )SetEmboss (b bool ){if !b {_adbc ._becce .Emboss =nil ;}else {_adbc ._becce .Emboss =_dc .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_ccga NumberingDefinition )X ()*_dc .CT_AbstractNum {return _ccga ._ffee };

// RunProperties returns the run properties controlling text formatting within the table.
func (_cfga TableConditionalFormatting )RunProperties ()RunProperties {if _cfga ._gcacc .RPr ==nil {_cfga ._gcacc .RPr =_dc .NewCT_RPr ();};return RunProperties {_cfga ._gcacc .RPr };};

// SetHeight allows controlling the height of a row within a table.
func (_bdeb RowProperties )SetHeight (ht _bg .Distance ,rule _dc .ST_HeightRule ){if rule ==_dc .ST_HeightRuleUnset {_bdeb ._adaeg .TrHeight =nil ;}else {_bbfe :=_dc .NewCT_Height ();_bbfe .HRuleAttr =rule ;_bbfe .ValAttr =&_be .ST_TwipsMeasure {};_bbfe .ValAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (ht /_bg .Twips ));_bdeb ._adaeg .TrHeight =[]*_dc .CT_Height {_bbfe };};};func (_adgf Paragraph )addBeginFldChar (_ceege string )*_dc .CT_FFData {_dabg :=_adgf .addFldChar ();_dabg .FldCharTypeAttr =_dc .ST_FldCharTypeBegin ;_dabg .FfData =_dc .NewCT_FFData ();_fgfg :=_dc .NewCT_FFName ();_fgfg .ValAttr =&_ceege ;_dabg .FfData .Name =[]*_dc .CT_FFName {_fgfg };return _dabg .FfData ;};

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_ac *Document ;_cfc *_dc .WdAnchor ;};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_ffdc Run )DrawingAnchored ()[]AnchoredDrawing {_adag :=[]AnchoredDrawing {};for _ ,_dfae :=range _ffdc ._ggab .EG_RunInnerContent {if _dfae .Drawing ==nil {continue ;};for _ ,_efcdb :=range _dfae .Drawing .Anchor {_adag =append (_adag ,AnchoredDrawing {_ffdc ._gbbb ,_efcdb });};};return _adag ;};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_eaab *Document ;_dcdg *_dc .CT_FtnEdn ;};

// GetColor returns the color.Color object representing the run color.
func (_aadfa RunProperties )GetColor ()_aa .Color {if _ccdec :=_aadfa ._becce .Color ;_ccdec !=nil {_ddaba :=_ccdec .ValAttr ;if _ddaba .ST_HexColorRGB !=nil {return _aa .FromHex (*_ddaba .ST_HexColorRGB );};};return _aa .Color {};};

// SetSmallCaps sets the run to small caps.
func (_fcdac RunProperties )SetSmallCaps (b bool ){if !b {_fcdac ._becce .SmallCaps =nil ;}else {_fcdac ._becce .SmallCaps =_dc .NewCT_OnOff ();};};

// SetBottomPct sets the cell bottom margin
func (_eb CellMargins )SetBottomPct (pct float64 ){_eb ._acg .Bottom =_dc .NewCT_TblWidth ();_afb (_eb ._acg .Bottom ,pct );};func _gcad (_fcda []*_dc .EG_ContentBlockContent ,_edfb *TableInfo )[]TextItem {_egaf :=[]TextItem {};for _ ,_dedd :=range _fcda {if _cedbe :=_dedd .Sdt ;_cedbe !=nil {if _bcfb :=_cedbe .SdtContent ;_bcfb !=nil {_egaf =append (_egaf ,_abgb (_bcfb .P ,_edfb ,nil )...);};};_egaf =append (_egaf ,_abgb (_dedd .P ,_edfb ,nil )...);for _ ,_gdad :=range _dedd .Tbl {for _agc ,_bfdde :=range _gdad .EG_ContentRowContent {for _ ,_fbbb :=range _bfdde .Tr {for _aaedc ,_beeab :=range _fbbb .EG_ContentCellContent {for _ ,_edbd :=range _beeab .Tc {_gage :=&TableInfo {Table :_gdad ,Row :_fbbb ,Cell :_edbd ,RowIndex :_agc ,ColIndex :_aaedc };for _ ,_facbf :=range _edbd .EG_BlockLevelElts {_egaf =append (_egaf ,_gcad (_facbf .EG_ContentBlockContent ,_gage )...);};};};};};};};return _egaf ;};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_acadb Paragraph )AddBookmark (name string )Bookmark {_cced :=_dc .NewEG_PContent ();_eafgf :=_dc .NewEG_ContentRunContent ();_cced .EG_ContentRunContent =append (_cced .EG_ContentRunContent ,_eafgf );_ffaf :=_dc .NewEG_RunLevelElts ();_eafgf .EG_RunLevelElts =append (_eafgf .EG_RunLevelElts ,_ffaf );_cbac :=_dc .NewEG_RangeMarkupElements ();_ddece :=_dc .NewCT_Bookmark ();_cbac .BookmarkStart =_ddece ;_ffaf .EG_RangeMarkupElements =append (_ffaf .EG_RangeMarkupElements ,_cbac );_cbac =_dc .NewEG_RangeMarkupElements ();_cbac .BookmarkEnd =_dc .NewCT_MarkupRange ();_ffaf .EG_RangeMarkupElements =append (_ffaf .EG_RangeMarkupElements ,_cbac );_acadb ._feea .EG_PContent =append (_acadb ._feea .EG_PContent ,_cced );_cgabf :=Bookmark {_ddece };_cgabf .SetName (name );return _cgabf ;};

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_deedc TableLook )SetHorizontalBanding (on bool ){if !on {_deedc ._cecg .NoHBandAttr =&_be .ST_OnOff {};_deedc ._cecg .NoHBandAttr .ST_OnOff1 =_be .ST_OnOff1On ;}else {_deedc ._cecg .NoHBandAttr =&_be .ST_OnOff {};_deedc ._cecg .NoHBandAttr .ST_OnOff1 =_be .ST_OnOff1Off ;};};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;func (_gegf *Document )validateTableCells ()error {for _ ,_fba :=range _gegf ._ace .Body .EG_BlockLevelElts {for _ ,_abg :=range _fba .EG_ContentBlockContent {for _ ,_aaga :=range _abg .Tbl {for _ ,_dfd :=range _aaga .EG_ContentRowContent {for _ ,_acf :=range _dfd .Tr {_dgdd :=false ;for _ ,_bdeg :=range _acf .EG_ContentCellContent {_gdd :=false ;for _ ,_ebcg :=range _bdeg .Tc {_dgdd =true ;for _ ,_ccab :=range _ebcg .EG_BlockLevelElts {for _ ,_gagc :=range _ccab .EG_ContentBlockContent {if len (_gagc .P )> 0{_gdd =true ;break ;};};};};if !_gdd {return _d .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_dgdd {return _d .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");};};};};};};return nil ;};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_bfd *Document )Validate ()error {if _bfd ==nil ||_bfd ._ace ==nil {return _d .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");};for _ ,_gbg :=range []func ()error {_bfd .validateTableCells ,_bfd .validateBookmarks }{if _fef :=_gbg ();_fef !=nil {return _fef ;};};if _bdcc :=_bfd ._ace .Validate ();_bdcc !=nil {return _bdcc ;};return nil ;};

// GetStyleByID returns Style by it's IdAttr.
func (_eece *Document )GetStyleByID (id string )Style {for _ ,_gadf :=range _eece .Styles ._cbfe .Style {if _gadf .StyleIdAttr !=nil &&*_gadf .StyleIdAttr ==id {return Style {_gadf };};};return Style {};};

// SetSize sets the size of the displayed image on the page.
func (_fgd AnchoredDrawing )SetSize (w ,h _bg .Distance ){_fgd ._cfc .Extent .CxAttr =int64 (float64 (w *_bg .Pixel72 )/_bg .EMU );_fgd ._cfc .Extent .CyAttr =int64 (float64 (h *_bg .Pixel72 )/_bg .EMU );};

// IsBold returns true if the run has been set to bold.
func (_cdbc RunProperties )IsBold ()bool {return _cdbc .BoldValue ()==OnOffValueOn };

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_gdeg ParagraphProperties )Style ()string {if _gdeg ._efff .PStyle !=nil {return _gdeg ._efff .PStyle .ValAttr ;};return "";};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_ebee TableStyleProperties )SetCellSpacingPercent (pct float64 ){_ebee ._abce .TblCellSpacing =_dc .NewCT_TblWidth ();_ebee ._abce .TblCellSpacing .TypeAttr =_dc .ST_TblWidthPct ;_ebee ._abce .TblCellSpacing .WAttr =&_dc .ST_MeasurementOrPercent {};_ebee ._abce .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_ebee ._abce .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (pct *50));};

// ExtractFromHeader returns text from the document header as an array of TextItems.
func ExtractFromHeader (header *_dc .Hdr )[]TextItem {return _gcad (header .EG_ContentBlockContent ,nil )};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_cfg AnchoredDrawing )GetImage ()(_bd .ImageRef ,bool ){_cbd :=_cfg ._cfc .Graphic .GraphicData .Any ;if len (_cbd )> 0{_cee ,_bb :=_cbd [0].(*_ba .Pic );if _bb {if _cee .BlipFill !=nil &&_cee .BlipFill .Blip !=nil &&_cee .BlipFill .Blip .EmbedAttr !=nil {return _cfg ._ac .GetImageByRelID (*_cee .BlipFill .Blip .EmbedAttr );};};};return _bd .ImageRef {},false ;};

// X returns the inner wrapped XML type.
func (_edbcg ParagraphStyleProperties )X ()*_dc .CT_PPrGeneral {return _edbcg ._acgef };

// SetVerticalMerge controls the vertical merging of cells.
func (_ad CellProperties )SetVerticalMerge (mergeVal _dc .ST_Merge ){if mergeVal ==_dc .ST_MergeUnset {_ad ._cea .VMerge =nil ;}else {_ad ._cea .VMerge =_dc .NewCT_VMerge ();_ad ._cea .VMerge .ValAttr =mergeVal ;};};

// AddRun adds a run to a paragraph.
func (_dfbe Paragraph )AddRun ()Run {_dfc :=_dc .NewEG_PContent ();_dfbe ._feea .EG_PContent =append (_dfbe ._feea .EG_PContent ,_dfc );_gcdfd :=_dc .NewEG_ContentRunContent ();_dfc .EG_ContentRunContent =append (_dfc .EG_ContentRunContent ,_gcdfd );_gedb :=_dc .NewCT_R ();_gcdfd .R =_gedb ;return Run {_dfbe ._bfdb ,_gedb };};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_fg AnchoredDrawing )SetOffset (x ,y _bg .Distance ){_fg .SetXOffset (x );_fg .SetYOffset (y )};

// RunProperties controls run styling properties
type RunProperties struct{_becce *_dc .CT_RPr };

// SetThemeColor sets the color from the theme.
func (_bed Color )SetThemeColor (t _dc .ST_ThemeColor ){_bed ._eca .ThemeColorAttr =t };

// Borders allows manipulation of the table borders.
func (_fedbf TableStyleProperties )Borders ()TableBorders {if _fedbf ._abce .TblBorders ==nil {_fedbf ._abce .TblBorders =_dc .NewCT_TblBorders ();};return TableBorders {_fedbf ._abce .TblBorders };};

// RemoveParagraph removes a paragraph from the endnote.
func (_cccb Endnote )RemoveParagraph (p Paragraph ){for _ ,_cgce :=range _cccb .content (){for _dagdf ,_bgff :=range _cgce .P {if _bgff ==p ._feea {copy (_cgce .P [_dagdf :],_cgce .P [_dagdf +1:]);_cgce .P =_cgce .P [0:len (_cgce .P )-1];return ;};};};};func (_eac *Document )InsertTableBefore (relativeTo Paragraph )Table {return _eac .insertTable (relativeTo ,true );};func (_ffcb Endnote )id ()int64 {return _ffcb ._dcdg .IdAttr };

// SetBefore sets the spacing that comes before the paragraph.
func (_ggfe ParagraphSpacing )SetBefore (before _bg .Distance ){_ggfe ._abeg .BeforeAttr =&_be .ST_TwipsMeasure {};_ggfe ._abeg .BeforeAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (before /_bg .Twips ));};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_fedg RunProperties )SetCharacterSpacing (size _bg .Distance ){_fedg ._becce .Spacing =_dc .NewCT_SignedTwipsMeasure ();_fedg ._becce .Spacing .ValAttr .Int64 =_cg .Int64 (int64 (size /_bg .Twips ));};

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_fegb ParagraphProperties )SetKeepWithNext (b bool ){if !b {_fegb ._efff .KeepNext =nil ;}else {_fegb ._efff .KeepNext =_dc .NewCT_OnOff ();};};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_ccaa Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_ccaa ._dcgc .UpdateFields =nil ;}else {_ccaa ._dcgc .UpdateFields =_dc .NewCT_OnOff ();};};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_edae HyperLink )SetTargetByRef (link _bd .Hyperlink ){_edae ._bgfg .IdAttr =_cg .String (_bd .Relationship (link ).ID ());_edae ._bgfg .AnchorAttr =nil ;};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_abeg *_dc .CT_Spacing };

// SetEastAsiaTheme sets the font East Asia Theme.
func (_dadd Fonts )SetEastAsiaTheme (t _dc .ST_Theme ){_dadd ._dccb .EastAsiaThemeAttr =t };

// Shadow returns true if run shadow is on.
func (_aefad RunProperties )Shadow ()bool {return _dedc (_aefad ._becce .Shadow )};

// AddRow adds a row to a table.
func (_eege Table )AddRow ()Row {_eebed :=_dc .NewEG_ContentRowContent ();_eege ._eaeb .EG_ContentRowContent =append (_eege ._eaeb .EG_ContentRowContent ,_eebed );_ffgad :=_dc .NewCT_Row ();_eebed .Tr =append (_eebed .Tr ,_ffgad );return Row {_eege ._aaae ,_ffgad };};

// SetImprint sets the run to imprinted text.
func (_faed RunProperties )SetImprint (b bool ){if !b {_faed ._becce .Imprint =nil ;}else {_faed ._becce .Imprint =_dc .NewCT_OnOff ();};};

// Italic returns true if paragraph font is italic.
func (_ggfg ParagraphProperties )Italic ()bool {_dbbb :=_ggfg ._efff .RPr ;return _dedc (_dbbb .I )||_dedc (_dbbb .ICs );};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_gaede TableLook )SetFirstColumn (on bool ){if !on {_gaede ._cecg .FirstColumnAttr =&_be .ST_OnOff {};_gaede ._cecg .FirstColumnAttr .ST_OnOff1 =_be .ST_OnOff1Off ;}else {_gaede ._cecg .FirstColumnAttr =&_be .ST_OnOff {};_gaede ._cecg .FirstColumnAttr .ST_OnOff1 =_be .ST_OnOff1On ;};};func _abgb (_ccca []*_dc .CT_P ,_dada *TableInfo ,_gdcd *DrawingInfo )[]TextItem {_eeaa :=[]TextItem {};for _ ,_fdag :=range _ccca {_eeaa =append (_eeaa ,_cbc (_fdag ,nil ,_dada ,_gdcd ,_fdag .EG_PContent )...);};return _eeaa ;};

// GetImageObjByRelId returns a common.Image with the associated relation ID in the
// document.
func (_ecbc *Document )GetImageObjByRelId (relId string )(_bd .Image ,error ){_ecca :=_ecbc ._afde .GetTargetByRelId (relId );return _ecbc .DocBase .GetImageBytesByTarget (_ecca );};

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_ceee Style )SetUnhideWhenUsed (b bool ){if b {_ceee ._afaf .UnhideWhenUsed =_dc .NewCT_OnOff ();}else {_ceee ._afaf .UnhideWhenUsed =nil ;};};

// Font returns the name of paragraph font family.
func (_edbc ParagraphProperties )Font ()string {if _cegg :=_edbc ._efff .RPr .RFonts ;_cegg !=nil {if _cegg .AsciiAttr !=nil {return *_cegg .AsciiAttr ;}else if _cegg .HAnsiAttr !=nil {return *_cegg .HAnsiAttr ;}else if _cegg .CsAttr !=nil {return *_cegg .CsAttr ;};};return "";};

// Color controls the run or styles color.
type Color struct{_eca *_dc .CT_Color };

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_fgga HyperLink )AddRun ()Run {_bfbae :=_dc .NewEG_ContentRunContent ();_fgga ._bgfg .EG_ContentRunContent =append (_fgga ._bgfg .EG_ContentRunContent ,_bfbae );_ddbde :=_dc .NewCT_R ();_bfbae .R =_ddbde ;return Run {_fgga ._aeee ,_ddbde };};

// X returns the inner wrapped XML type.
func (_ffb Footnote )X ()*_dc .CT_FtnEdn {return _ffb ._afba };

// Properties returns the run properties.
func (_dbcaa Run )Properties ()RunProperties {if _dbcaa ._ggab .RPr ==nil {_dbcaa ._ggab .RPr =_dc .NewCT_RPr ();};return RunProperties {_dbcaa ._ggab .RPr };};

// AddTabStop adds a tab stop to the paragraph.
func (_aggf ParagraphStyleProperties )AddTabStop (position _bg .Distance ,justificaton _dc .ST_TabJc ,leader _dc .ST_TabTlc ){if _aggf ._acgef .Tabs ==nil {_aggf ._acgef .Tabs =_dc .NewCT_Tabs ();};_aaggc :=_dc .NewCT_TabStop ();_aaggc .LeaderAttr =leader ;_aaggc .ValAttr =justificaton ;_aaggc .PosAttr .Int64 =_cg .Int64 (int64 (position /_bg .Twips ));_aggf ._acgef .Tabs .Tab =append (_aggf ._acgef .Tabs .Tab ,_aaggc );};

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_ffee *_dc .CT_AbstractNum };

// SetUISortOrder controls the order the style is displayed in the UI.
func (_baade Style )SetUISortOrder (order int ){_baade ._afaf .UiPriority =_dc .NewCT_DecimalNumber ();_baade ._afaf .UiPriority .ValAttr =int64 (order );};

// Outline returns true if paragraph outline is on.
func (_dgdc ParagraphProperties )Outline ()bool {return _dedc (_dgdc ._efff .RPr .Outline )};

// SetRight sets the right border to a specified type, color and thickness.
func (_gbc CellBorders )SetRight (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_gbc ._gfa .Right =_dc .NewCT_Border ();_eacaa (_gbc ._gfa .Right ,t ,c ,thickness );};

// RowProperties are the properties for a row within a table
type RowProperties struct{_adaeg *_dc .CT_TrPr };

// SetAlignment sets the paragraph alignment
func (_dgba NumberingLevel )SetAlignment (j _dc .ST_Jc ){if j ==_dc .ST_JcUnset {_dgba ._dbab .LvlJc =nil ;}else {_dgba ._dbab .LvlJc =_dc .NewCT_Jc ();_dgba ._dbab .LvlJc .ValAttr =j ;};};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_gdbf Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_gdbf .ensurePPr ();if _gdbf ._feea .PPr .NumPr ==nil {_gdbf ._feea .PPr .NumPr =_dc .NewCT_NumPr ();};_beeac :=_dc .NewCT_DecimalNumber ();_fgedb :=int64 (-1);for _ ,_fgbc :=range _gdbf ._bfdb .Numbering ._cfbb .Num {if _fgbc .AbstractNumId !=nil &&_fgbc .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_fgedb =_fgbc .NumIdAttr ;};};if _fgedb ==-1{_fadaf :=_dc .NewCT_Num ();_gdbf ._bfdb .Numbering ._cfbb .Num =append (_gdbf ._bfdb .Numbering ._cfbb .Num ,_fadaf );_fadaf .NumIdAttr =int64 (len (_gdbf ._bfdb .Numbering ._cfbb .Num ));_fadaf .AbstractNumId =_dc .NewCT_DecimalNumber ();_fadaf .AbstractNumId .ValAttr =nd .AbstractNumberID ();};_beeac .ValAttr =_fgedb ;_gdbf ._feea .PPr .NumPr .NumId =_beeac ;};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_gbbb *Document ;_ggab *_dc .CT_R ;};

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_feag NumberingDefinition )AbstractNumberID ()int64 {return _feag ._ffee .AbstractNumIdAttr };

// Name returns the name of the style if set.
func (_agfbc Style )Name ()string {if _agfbc ._afaf .Name ==nil {return "";};return _agfbc ._afaf .Name .ValAttr ;};

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_bcbg Section )GetHeader (t _dc .ST_HdrFtr )(Header ,bool ){for _ ,_gccc :=range _bcbg ._fcbff .EG_HdrFtrReferences {if _gccc .HeaderReference .TypeAttr ==t {for _ ,_cffeb :=range _bcbg ._bcaa .Headers (){_aadgb :=_bcbg ._bcaa ._afde .FindRIDForN (_cffeb .Index (),_cg .HeaderType );if _aadgb ==_gccc .HeaderReference .IdAttr {return _cffeb ,true ;};};};};return Header {},false ;};

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_eeee Paragraph )AddCheckBox (name string )FormField {_aegc :=_eeee .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_aegc ._cede .CheckBox =_dc .NewCT_FFCheckBox ();return _aegc ;};

// SetWidth sets the cell width to a specified width.
func (_cd CellProperties )SetWidth (d _bg .Distance ){_cd ._cea .TcW =_dc .NewCT_TblWidth ();_cd ._cea .TcW .TypeAttr =_dc .ST_TblWidthDxa ;_cd ._cea .TcW .WAttr =&_dc .ST_MeasurementOrPercent {};_cd ._cea .TcW .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_cd ._cea .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (d /_bg .Twips ));};

// SetTopPct sets the cell top margin
func (_bae CellMargins )SetTopPct (pct float64 ){_bae ._acg .Top =_dc .NewCT_TblWidth ();_afb (_bae ._acg .Top ,pct );};

// ParagraphStyles returns only the paragraph styles.
func (_bgfgg Styles )ParagraphStyles ()[]Style {_gdbg :=[]Style {};for _ ,_dfaed :=range _bgfgg ._cbfe .Style {if _dfaed .TypeAttr !=_dc .ST_StyleTypeParagraph {continue ;};_gdbg =append (_gdbg ,Style {_dfaed });};return _gdbg ;};

// SetXOffset sets the X offset for an image relative to the origin.
func (_ef AnchoredDrawing )SetXOffset (x _bg .Distance ){_ef ._cfc .PositionH .Choice =&_dc .WdCT_PosHChoice {};_ef ._cfc .PositionH .Choice .PosOffset =_cg .Int32 (int32 (x /_bg .EMU ));};

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_dag *Document )AddHeader ()Header {_gde :=_dc .NewHdr ();_dag ._fbb =append (_dag ._fbb ,_gde );_fac :=_b .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_dag ._fbb ));_dag ._afde .AddRelationship (_fac ,_cg .HeaderType );_dag .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_fac ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");_dag ._fae =append (_dag ._fae ,_bd .NewRelationships ());return Header {_dag ,_gde };};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_beeb CellBorders )SetBottom (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_beeb ._gfa .Bottom =_dc .NewCT_Border ();_eacaa (_beeb ._gfa .Bottom ,t ,c ,thickness );};

// Caps returns true if run font is capitalized.
func (_cbcf RunProperties )Caps ()bool {return _dedc (_cbcf ._becce .Caps )};

// AddParagraph adds a paragraph to the footer.
func (_acda Footer )AddParagraph ()Paragraph {_cdaf :=_dc .NewEG_ContentBlockContent ();_acda ._bgga .EG_ContentBlockContent =append (_acda ._bgga .EG_ContentBlockContent ,_cdaf );_dfbd :=_dc .NewCT_P ();_cdaf .P =append (_cdaf .P ,_dfbd );return Paragraph {_acda ._ffgf ,_dfbd };};

// X returns the inner wrapped XML type.
func (_ddgdf Run )X ()*_dc .CT_R {return _ddgdf ._ggab };

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_bbfg ParagraphProperties )ComplexSizeValue ()float64 {if _beec :=_bbfg ._efff .RPr .SzCs ;_beec !=nil {_gadg :=_beec .ValAttr ;if _gadg .ST_UnsignedDecimalNumber !=nil {return float64 (*_gadg .ST_UnsignedDecimalNumber )/2;};};return 0.0;};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";);

// RemoveRun removes a child run from a paragraph.
func (_beac Paragraph )RemoveRun (r Run ){for _ ,_ebfc :=range _beac ._feea .EG_PContent {for _bdagc ,_gadeb :=range _ebfc .EG_ContentRunContent {if _gadeb .R ==r ._ggab {copy (_ebfc .EG_ContentRunContent [_bdagc :],_ebfc .EG_ContentRunContent [_bdagc +1:]);_ebfc .EG_ContentRunContent =_ebfc .EG_ContentRunContent [0:len (_ebfc .EG_ContentRunContent )-1];};if _gadeb .Sdt !=nil &&_gadeb .Sdt .SdtContent !=nil {for _eefg ,_bcbc :=range _gadeb .Sdt .SdtContent .EG_ContentRunContent {if _bcbc .R ==r ._ggab {copy (_gadeb .Sdt .SdtContent .EG_ContentRunContent [_eefg :],_gadeb .Sdt .SdtContent .EG_ContentRunContent [_eefg +1:]);_gadeb .Sdt .SdtContent .EG_ContentRunContent =_gadeb .Sdt .SdtContent .EG_ContentRunContent [0:len (_gadeb .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_dce ParagraphSpacing )SetLineSpacing (d _bg .Distance ,rule _dc .ST_LineSpacingRule ){if rule ==_dc .ST_LineSpacingRuleUnset {_dce ._abeg .LineRuleAttr =_dc .ST_LineSpacingRuleUnset ;_dce ._abeg .LineAttr =nil ;}else {_dce ._abeg .LineRuleAttr =rule ;_dce ._abeg .LineAttr =&_dc .ST_SignedTwipsMeasure {};_dce ._abeg .LineAttr .Int64 =_cg .Int64 (int64 (d /_bg .Twips ));};};

// X returns the inner wrapped XML type.
func (_gab Cell )X ()*_dc .CT_Tc {return _gab ._gaag };

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_dded RunProperties )BoldValue ()OnOffValue {return _bcca (_dded ._becce .B )};

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_becab :=_dc .NewSettings ();_becab .Compat =_dc .NewCT_Compat ();_bcef :=_dc .NewCT_CompatSetting ();_bcef .NameAttr =_cg .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");_bcef .UriAttr =_cg .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_bcef .ValAttr =_cg .String ("\u0031\u0035");_becab .Compat .CompatSetting =append (_becab .Compat .CompatSetting ,_bcef );return Settings {_becab };};

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_fbge Paragraph )SetStyle (s string ){_fbge .ensurePPr ();if s ==""{_fbge ._feea .PPr .PStyle =nil ;}else {_fbge ._feea .PPr .PStyle =_dc .NewCT_String ();_fbge ._feea .PPr .PStyle .ValAttr =s ;};};

// Strike returns true if run is striked.
func (_gaeea RunProperties )Strike ()bool {return _dedc (_gaeea ._becce .Strike )};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_gbafb Paragraph )SetFirstLineIndent (m _bg .Distance ){_gbafb .ensurePPr ();_dcdff :=_gbafb ._feea .PPr ;if _dcdff .Ind ==nil {_dcdff .Ind =_dc .NewCT_Ind ();};if m ==_bg .Zero {_dcdff .Ind .FirstLineAttr =nil ;}else {_dcdff .Ind .FirstLineAttr =&_be .ST_TwipsMeasure {};_dcdff .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (m /_bg .Twips ));};};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_bcgg FormField )SetCalcOnExit (calcOnExit bool ){_bddb :=_dc .NewCT_OnOff ();_bddb .ValAttr =&_be .ST_OnOff {Bool :&calcOnExit };_bcgg ._cede .CalcOnExit =[]*_dc .CT_OnOff {_bddb };};func _afb (_gef *_dc .CT_TblWidth ,_fdef float64 ){_gef .TypeAttr =_dc .ST_TblWidthPct ;_gef .WAttr =&_dc .ST_MeasurementOrPercent {};_gef .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_gef .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (_fdef *50));};func (_gafd Paragraph )addFldChar ()*_dc .CT_FldChar {_efbg :=_gafd .AddRun ();_badc :=_efbg .X ();_adaf :=_dc .NewEG_RunInnerContent ();_babb :=_dc .NewCT_FldChar ();_adaf .FldChar =_babb ;_badc .EG_RunInnerContent =append (_badc .EG_RunInnerContent ,_adaf );return _babb ;};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_cgca Run )AddDrawingAnchored (img _bd .ImageRef )(AnchoredDrawing ,error ){_eafa :=_cgca .newIC ();_eafa .Drawing =_dc .NewCT_Drawing ();_acef :=_dc .NewWdAnchor ();_bgee :=AnchoredDrawing {_cgca ._gbbb ,_acef };_acef .SimplePosAttr =_cg .Bool (false );_acef .AllowOverlapAttr =true ;_acef .CNvGraphicFramePr =_dg .NewCT_NonVisualGraphicFrameProperties ();_eafa .Drawing .Anchor =append (_eafa .Drawing .Anchor ,_acef );_acef .Graphic =_dg .NewGraphic ();_acef .Graphic .GraphicData =_dg .NewCT_GraphicalObjectData ();_acef .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_acef .SimplePos .XAttr .ST_CoordinateUnqualified =_cg .Int64 (0);_acef .SimplePos .YAttr .ST_CoordinateUnqualified =_cg .Int64 (0);_acef .PositionH .RelativeFromAttr =_dc .WdST_RelFromHPage ;_acef .PositionH .Choice =&_dc .WdCT_PosHChoice {};_acef .PositionH .Choice .PosOffset =_cg .Int32 (0);_acef .PositionV .RelativeFromAttr =_dc .WdST_RelFromVPage ;_acef .PositionV .Choice =&_dc .WdCT_PosVChoice {};_acef .PositionV .Choice .PosOffset =_cg .Int32 (0);_acef .Extent .CxAttr =int64 (float64 (img .Size ().X *_bg .Pixel72 )/_bg .EMU );_acef .Extent .CyAttr =int64 (float64 (img .Size ().Y *_bg .Pixel72 )/_bg .EMU );_acef .Choice =&_dc .WdEG_WrapTypeChoice {};_acef .Choice .WrapSquare =_dc .NewWdCT_WrapSquare ();_acef .Choice .WrapSquare .WrapTextAttr =_dc .WdST_WrapTextBothSides ;_bfgeg :=0x7FFFFFFF&_g .Uint32 ();_acef .DocPr .IdAttr =_bfgeg ;_cabg :=_ba .NewPic ();_cabg .NvPicPr .CNvPr .IdAttr =_bfgeg ;_fega :=img .RelID ();if _fega ==""{return _bgee ,_d .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_acef .Graphic .GraphicData .Any =append (_acef .Graphic .GraphicData .Any ,_cabg );_cabg .BlipFill =_dg .NewCT_BlipFillProperties ();_cabg .BlipFill .Blip =_dg .NewCT_Blip ();_cabg .BlipFill .Blip .EmbedAttr =&_fega ;_cabg .BlipFill .Stretch =_dg .NewCT_StretchInfoProperties ();_cabg .BlipFill .Stretch .FillRect =_dg .NewCT_RelativeRect ();_cabg .SpPr =_dg .NewCT_ShapeProperties ();_cabg .SpPr .Xfrm =_dg .NewCT_Transform2D ();_cabg .SpPr .Xfrm .Off =_dg .NewCT_Point2D ();_cabg .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_cg .Int64 (0);_cabg .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_cg .Int64 (0);_cabg .SpPr .Xfrm .Ext =_dg .NewCT_PositiveSize2D ();_cabg .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_bg .Point );_cabg .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_bg .Point );_cabg .SpPr .PrstGeom =_dg .NewCT_PresetGeometry2D ();_cabg .SpPr .PrstGeom .PrstAttr =_dg .ST_ShapeTypeRect ;return _bgee ,nil ;};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_bge Bookmark )Name ()string {return _bge ._dcd .NameAttr };

// SetSize sets the font size for a run.
func (_fgfa RunProperties )SetSize (size _bg .Distance ){_fgfa ._becce .Sz =_dc .NewCT_HpsMeasure ();_fgfa ._becce .Sz .ValAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (size /_bg .HalfPoint ));_fgfa ._becce .SzCs =_dc .NewCT_HpsMeasure ();_fgfa ._becce .SzCs .ValAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (size /_bg .HalfPoint ));};

// SetTop sets the cell top margin
func (_fec CellMargins )SetTop (d _bg .Distance ){_fec ._acg .Top =_dc .NewCT_TblWidth ();_ccg (_fec ._acg .Top ,d );};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_ddbd *Document )HasEndnotes ()bool {return _ddbd ._gcd !=nil };

// SetLeftPct sets the cell left margin
func (_bef CellMargins )SetLeftPct (pct float64 ){_bef ._acg .Left =_dc .NewCT_TblWidth ();_afb (_bef ._acg .Left ,pct );};

// Styles returns all styles.
func (_ebbaa Styles )Styles ()[]Style {_fdfbe :=[]Style {};for _ ,_ggbec :=range _ebbaa ._cbfe .Style {_fdfbe =append (_fdfbe ,Style {_ggbec });};return _fdfbe ;};func (_gdgg *Document )validateBookmarks ()error {_bfbad :=make (map[string ]struct{});for _ ,_egb :=range _gdgg .Bookmarks (){if _ ,_aefa :=_bfbad [_egb .Name ()];_aefa {return _b .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_egb .Name ());};_bfbad [_egb .Name ()]=struct{}{};};return nil ;};

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_gcb AnchoredDrawing )SetHAlignment (h _dc .WdST_AlignH ){_gcb ._cfc .PositionH .Choice =&_dc .WdCT_PosHChoice {};_gcb ._cfc .PositionH .Choice .Align =h ;};

// SetNextStyle sets the style that the next paragraph will use.
func (_aacef Style )SetNextStyle (name string ){if name ==""{_aacef ._afaf .Next =nil ;}else {_aacef ._afaf .Next =_dc .NewCT_String ();_aacef ._afaf .Next .ValAttr =name ;};};

// TableProperties are the properties for a table within a document
type TableProperties struct{_eacagd *_dc .CT_TblPr };

// SetBottom sets the cell bottom margin
func (_cff CellMargins )SetBottom (d _bg .Distance ){_cff ._acg .Bottom =_dc .NewCT_TblWidth ();_ccg (_cff ._acg .Bottom ,d );};

// X returns the internally wrapped *wml.CT_SectPr.
func (_fdgb Section )X ()*_dc .CT_SectPr {return _fdgb ._fcbff };

// SetStartIndent controls the start indent of the paragraph.
func (_abfe ParagraphStyleProperties )SetStartIndent (m _bg .Distance ){if _abfe ._acgef .Ind ==nil {_abfe ._acgef .Ind =_dc .NewCT_Ind ();};if m ==_bg .Zero {_abfe ._acgef .Ind .StartAttr =nil ;}else {_abfe ._acgef .Ind .StartAttr =&_dc .ST_SignedTwipsMeasure {};_abfe ._acgef .Ind .StartAttr .Int64 =_cg .Int64 (int64 (m /_bg .Twips ));};};

// AddPageBreak adds a page break to a run.
func (_bbda Run )AddPageBreak (){_ebed :=_bbda .newIC ();_ebed .Br =_dc .NewCT_Br ();_ebed .Br .TypeAttr =_dc .ST_BrTypePage ;};

// SetColor sets a specific color or auto.
func (_bad Color )SetColor (v _aa .Color ){if v .IsAuto (){_bad ._eca .ValAttr .ST_HexColorAuto =_dc .ST_HexColorAutoAuto ;_bad ._eca .ValAttr .ST_HexColorRGB =nil ;}else {_bad ._eca .ValAttr .ST_HexColorAuto =_dc .ST_HexColorAutoUnset ;_bad ._eca .ValAttr .ST_HexColorRGB =v .AsRGBString ();};};

// Footnotes returns the footnotes defined in the document.
func (_egab *Document )Footnotes ()[]Footnote {_fbfea :=[]Footnote {};for _ ,_eee :=range _egab ._aae .CT_Footnotes .Footnote {_fbfea =append (_fbfea ,Footnote {_egab ,_eee });};return _fbfea ;};

// SetFooter sets a section footer.
func (_efefa Section )SetFooter (f Footer ,t _dc .ST_HdrFtr ){_bdfa :=_dc .NewEG_HdrFtrReferences ();_efefa ._fcbff .EG_HdrFtrReferences =append (_efefa ._fcbff .EG_HdrFtrReferences ,_bdfa );_bdfa .FooterReference =_dc .NewCT_HdrFtrRef ();_bdfa .FooterReference .TypeAttr =t ;_fcfba :=_efefa ._bcaa ._afde .FindRIDForN (f .Index (),_cg .FooterType );if _fcfba ==""{_f .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");};_bdfa .FooterReference .IdAttr =_fcfba ;};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_cfbe ParagraphProperties )SetHeadingLevel (idx int ){_cfbe .SetStyle (_b .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _cfbe ._efff .NumPr ==nil {_cfbe ._efff .NumPr =_dc .NewCT_NumPr ();};_cfbe ._efff .NumPr .Ilvl =_dc .NewCT_DecimalNumber ();_cfbe ._efff .NumPr .Ilvl .ValAttr =int64 (idx );};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_ebfaa ParagraphProperties )ComplexSizeMeasure ()string {if _cdbd :=_ebfaa ._efff .RPr .SzCs ;_cdbd !=nil {_fagfc :=_cdbd .ValAttr ;if _fagfc .ST_PositiveUniversalMeasure !=nil {return *_fagfc .ST_PositiveUniversalMeasure ;};};return "";};

// HyperLink is a link within a document.
type HyperLink struct{_aeee *Document ;_bgfg *_dc .CT_Hyperlink ;};

// SetAfter sets the spacing that comes after the paragraph.
func (_cfaf ParagraphSpacing )SetAfter (after _bg .Distance ){_cfaf ._abeg .AfterAttr =&_be .ST_TwipsMeasure {};_cfaf ._abeg .AfterAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (after /_bg .Twips ));};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_effbe *Document ;_efff *_dc .CT_PPr ;};func (_eeaad Styles )initializeDocDefaults (){_eeaad ._cbfe .DocDefaults =_dc .NewCT_DocDefaults ();_eeaad ._cbfe .DocDefaults .RPrDefault =_dc .NewCT_RPrDefault ();_eeaad ._cbfe .DocDefaults .RPrDefault .RPr =_dc .NewCT_RPr ();_aaega :=RunProperties {_eeaad ._cbfe .DocDefaults .RPrDefault .RPr };_aaega .SetSize (12*_bg .Point );_aaega .Fonts ().SetASCIITheme (_dc .ST_ThemeMajorAscii );_aaega .Fonts ().SetEastAsiaTheme (_dc .ST_ThemeMajorEastAsia );_aaega .Fonts ().SetHANSITheme (_dc .ST_ThemeMajorHAnsi );_aaega .Fonts ().SetCSTheme (_dc .ST_ThemeMajorBidi );_aaega .X ().Lang =_dc .NewCT_Language ();_aaega .X ().Lang .ValAttr =_cg .String ("\u0065\u006e\u002dU\u0053");_aaega .X ().Lang .EastAsiaAttr =_cg .String ("\u0065\u006e\u002dU\u0053");_aaega .X ().Lang .BidiAttr =_cg .String ("\u0061\u0072\u002dS\u0041");_eeaad ._cbfe .DocDefaults .PPrDefault =_dc .NewCT_PPrDefault ();};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_bebd Paragraph )AddEndnote (text string )Endnote {var _effd int64 ;if _bebd ._bfdb .HasEndnotes (){for _ ,_afe :=range _bebd ._bfdb .Endnotes (){if _afe .id ()> _effd {_effd =_afe .id ();};};_effd ++;}else {_effd =0;_bebd ._bfdb ._gcd =&_dc .Endnotes {};};_acgd :=_dc .NewCT_FtnEdn ();_ceag :=_dc .NewCT_FtnEdnRef ();_ceag .IdAttr =_effd ;_bebd ._bfdb ._gcd .CT_Endnotes .Endnote =append (_bebd ._bfdb ._gcd .CT_Endnotes .Endnote ,_acgd );_fccac :=_bebd .AddRun ();_fddcf :=_fccac .Properties ();_fddcf .SetStyle ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0041\u006e\u0063\u0068\u006f\u0072");_fccac ._ggab .EG_RunInnerContent =[]*_dc .EG_RunInnerContent {_dc .NewEG_RunInnerContent ()};_fccac ._ggab .EG_RunInnerContent [0].EndnoteReference =_ceag ;_ebac :=Endnote {_bebd ._bfdb ,_acgd };_ebac ._dcdg .IdAttr =_effd ;_ebac ._dcdg .EG_BlockLevelElts =[]*_dc .EG_BlockLevelElts {_dc .NewEG_BlockLevelElts ()};_fgdc :=_ebac .AddParagraph ();_fgdc .Properties ().SetStyle ("\u0045n\u0064\u006e\u006f\u0074\u0065");_fgdc ._feea .PPr .RPr =_dc .NewCT_ParaRPr ();_effagg :=_fgdc .AddRun ();_effagg .AddTab ();_effagg .AddText (text );return _ebac ;};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_fade RunProperties )RStyle ()string {if _fade ._becce .RStyle !=nil {return _fade ._becce .RStyle .ValAttr ;};return "";};

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_gcdb *Document )HasFootnotes ()bool {return _gcdb ._aae !=nil };

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_gdeeb FormField )SetPossibleValues (values []string ){if _gdeeb ._cede .DdList !=nil {for _ ,_bceb :=range values {_geeg :=_dc .NewCT_String ();_geeg .ValAttr =_bceb ;_gdeeb ._cede .DdList .ListEntry =append (_gdeeb ._cede .DdList .ListEntry ,_geeg );};};};

// X returns the inner wrapped XML type.
func (_bfbd NumberingLevel )X ()*_dc .CT_Lvl {return _bfbd ._dbab };

// AddField adds a field (automatically computed text) to the document.
func (_fcgf Run )AddField (code string ){_fcgf .AddFieldWithFormatting (code ,"",true )};

// SetLeft sets the left border to a specified type, color and thickness.
func (_fa CellBorders )SetLeft (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_fa ._gfa .Left =_dc .NewCT_Border ();_eacaa (_fa ._gfa .Left ,t ,c ,thickness );};

// Paragraph is a paragraph within a document.
type Paragraph struct{_bfdb *Document ;_feea *_dc .CT_P ;};

// Tables returns the tables defined in the document.
func (_afg *Document )Tables ()[]Table {_acbb :=[]Table {};if _afg ._ace .Body ==nil {return nil ;};for _ ,_dcbe :=range _afg ._ace .Body .EG_BlockLevelElts {for _ ,_afdg :=range _dcbe .EG_ContentBlockContent {for _ ,_ccf :=range _afg .tables (_afdg ){_acbb =append (_acbb ,_ccf );};};};return _acbb ;};

// Tables returns the tables defined in the footer.
func (_egfd Footer )Tables ()[]Table {_debff :=[]Table {};if _egfd ._bgga ==nil {return nil ;};for _ ,_baba :=range _egfd ._bgga .EG_ContentBlockContent {for _ ,_agcd :=range _egfd ._ffgf .tables (_baba ){_debff =append (_debff ,_agcd );};};return _debff ;};

// TableWidth controls width values in table settings.
type TableWidth struct{_cffaa *_dc .CT_TblWidth };

// X returns the inner wrapped XML type.
func (_dfbc RunProperties )X ()*_dc .CT_RPr {return _dfbc ._becce };

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_dc .CT_P ;Hyperlink *_dc .CT_Hyperlink ;Run *_dc .CT_R ;TableInfo *TableInfo ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_bbc CellBorders )SetTop (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_bbc ._gfa .Top =_dc .NewCT_Border ();_eacaa (_bbc ._gfa .Top ,t ,c ,thickness );};func (_dabb Paragraph )addSeparateFldChar ()*_dc .CT_FldChar {_cfbge :=_dabb .addFldChar ();_cfbge .FldCharTypeAttr =_dc .ST_FldCharTypeSeparate ;return _cfbge ;};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_ffafa ParagraphProperties )SizeMeasure ()string {if _cggc :=_ffafa ._efff .RPr .Sz ;_cggc !=nil {_egca :=_cggc .ValAttr ;if _egca .ST_PositiveUniversalMeasure !=nil {return *_egca .ST_PositiveUniversalMeasure ;};};return "";};

// SetText sets the text to be used in bullet mode.
func (_abae NumberingLevel )SetText (t string ){if t ==""{_abae ._dbab .LvlText =nil ;}else {_abae ._dbab .LvlText =_dc .NewCT_LevelText ();_abae ._dbab .LvlText .ValAttr =_cg .String (t );};};func _ddgg (_ffe *_dc .CT_P ,_effag map[string ]string ){for _ ,_dcab :=range _ffe .EG_PContent {if _dcab .Hyperlink !=nil &&_dcab .Hyperlink .IdAttr !=nil {if _bcg ,_dec :=_effag [*_dcab .Hyperlink .IdAttr ];_dec {*_dcab .Hyperlink .IdAttr =_bcg ;};};};};

// AddDefinition adds a new numbering definition.
func (_aec Numbering )AddDefinition ()NumberingDefinition {_dacac :=_dc .NewCT_Num ();_cgdc :=int64 (1);for _ ,_cacag :=range _aec .Definitions (){if _cacag .AbstractNumberID ()>=_cgdc {_cgdc =_cacag .AbstractNumberID ()+1;};};_dbce :=int64 (1);for _ ,_ffda :=range _aec .X ().Num {if _ffda .NumIdAttr >=_dbce {_dbce =_ffda .NumIdAttr +1;};};_dacac .NumIdAttr =_dbce ;_dacac .AbstractNumId =_dc .NewCT_DecimalNumber ();_dacac .AbstractNumId .ValAttr =_cgdc ;_aedd :=_dc .NewCT_AbstractNum ();_aedd .AbstractNumIdAttr =_cgdc ;_aec ._cfbb .AbstractNum =append (_aec ._cfbb .AbstractNum ,_aedd );_aec ._cfbb .Num =append (_aec ._cfbb .Num ,_dacac );return NumberingDefinition {_aedd };};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_affg NumberingLevel )RunProperties ()RunProperties {if _affg ._dbab .RPr ==nil {_affg ._dbab .RPr =_dc .NewCT_RPr ();};return RunProperties {_affg ._dbab .RPr };};

// CellProperties returns the cell properties.
func (_eeaeb TableConditionalFormatting )CellProperties ()CellProperties {if _eeaeb ._gcacc .TcPr ==nil {_eeaeb ._gcacc .TcPr =_dc .NewCT_TcPr ();};return CellProperties {_eeaeb ._gcacc .TcPr };};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_ggcc ParagraphProperties )RStyle ()string {if _ggcc ._efff .RPr .RStyle !=nil {return _ggcc ._efff .RPr .RStyle .ValAttr ;};return "";};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_abce *_dc .CT_TblPrBase };func _eaa (_bdg *_dc .CT_Tbl ,_gbab *_dc .CT_P ,_geg bool )*_dc .CT_Tbl {for _ ,_aef :=range _bdg .EG_ContentRowContent {for _ ,_aac :=range _aef .Tr {for _ ,_dfad :=range _aac .EG_ContentCellContent {for _ ,_cdfc :=range _dfad .Tc {for _bc ,_ecd :=range _cdfc .EG_BlockLevelElts {for _ ,_afa :=range _ecd .EG_ContentBlockContent {for _egf ,_dba :=range _afa .P {if _dba ==_gbab {_bfaf :=_dc .NewEG_BlockLevelElts ();_fgeg :=_dc .NewEG_ContentBlockContent ();_bfaf .EG_ContentBlockContent =append (_bfaf .EG_ContentBlockContent ,_fgeg );_fga :=_dc .NewCT_Tbl ();_fgeg .Tbl =append (_fgeg .Tbl ,_fga );_cdfc .EG_BlockLevelElts =append (_cdfc .EG_BlockLevelElts ,nil );if _geg {copy (_cdfc .EG_BlockLevelElts [_bc +1:],_cdfc .EG_BlockLevelElts [_bc :]);_cdfc .EG_BlockLevelElts [_bc ]=_bfaf ;if _egf !=0{_bac :=_dc .NewEG_BlockLevelElts ();_eec :=_dc .NewEG_ContentBlockContent ();_bac .EG_ContentBlockContent =append (_bac .EG_ContentBlockContent ,_eec );_eec .P =_afa .P [:_egf ];_cdfc .EG_BlockLevelElts =append (_cdfc .EG_BlockLevelElts ,nil );copy (_cdfc .EG_BlockLevelElts [_bc +1:],_cdfc .EG_BlockLevelElts [_bc :]);_cdfc .EG_BlockLevelElts [_bc ]=_bac ;};_afa .P =_afa .P [_egf :];}else {copy (_cdfc .EG_BlockLevelElts [_bc +2:],_cdfc .EG_BlockLevelElts [_bc +1:]);_cdfc .EG_BlockLevelElts [_bc +1]=_bfaf ;if _egf !=len (_afa .P )-1{_bbgb :=_dc .NewEG_BlockLevelElts ();_dgbf :=_dc .NewEG_ContentBlockContent ();_bbgb .EG_ContentBlockContent =append (_bbgb .EG_ContentBlockContent ,_dgbf );_dgbf .P =_afa .P [_egf +1:];_cdfc .EG_BlockLevelElts =append (_cdfc .EG_BlockLevelElts ,nil );copy (_cdfc .EG_BlockLevelElts [_bc +3:],_cdfc .EG_BlockLevelElts [_bc +2:]);_cdfc .EG_BlockLevelElts [_bc +2]=_bbgb ;}else {_cab :=_dc .NewEG_BlockLevelElts ();_bea :=_dc .NewEG_ContentBlockContent ();_cab .EG_ContentBlockContent =append (_cab .EG_ContentBlockContent ,_bea );_bea .P =[]*_dc .CT_P {_dc .NewCT_P ()};_cdfc .EG_BlockLevelElts =append (_cdfc .EG_BlockLevelElts ,nil );copy (_cdfc .EG_BlockLevelElts [_bc +3:],_cdfc .EG_BlockLevelElts [_bc +2:]);_cdfc .EG_BlockLevelElts [_bc +2]=_cab ;};_afa .P =_afa .P [:_egf +1];};return _fga ;};};for _ ,_acac :=range _afa .Tbl {_bbea :=_eaa (_acac ,_gbab ,_geg );if _bbea !=nil {return _bbea ;};};};};};};};};return nil ;};

// Fonts returns the style's Fonts.
func (_cafc RunProperties )Fonts ()Fonts {if _cafc ._becce .RFonts ==nil {_cafc ._becce .RFonts =_dc .NewCT_Fonts ();};return Fonts {_cafc ._becce .RFonts };};

// RemoveParagraph removes a paragraph from a footer.
func (_ecfb Footer )RemoveParagraph (p Paragraph ){for _ ,_dccg :=range _ecfb ._bgga .EG_ContentBlockContent {for _cegb ,_eded :=range _dccg .P {if _eded ==p ._feea {copy (_dccg .P [_cegb :],_dccg .P [_cegb +1:]);_dccg .P =_dccg .P [0:len (_dccg .P )-1];return ;};};};};var _ggdd =[...]uint8 {0,20,37,58,79};

// UnderlineColor returns the hex color value of paragraph underline.
func (_eega ParagraphProperties )UnderlineColor ()string {if _ggca :=_eega ._efff .RPr .U ;_ggca !=nil {_gceb :=_ggca .ColorAttr ;if _gceb !=nil &&_gceb .ST_HexColorRGB !=nil {return *_gceb .ST_HexColorRGB ;};};return "";};

// X returns the inner wrapped XML type.
func (_cbce HyperLink )X ()*_dc .CT_Hyperlink {return _cbce ._bgfg };

// AddParagraph adds a paragraph to the header.
func (_gcbe Header )AddParagraph ()Paragraph {_gedc :=_dc .NewEG_ContentBlockContent ();_gcbe ._ecac .EG_ContentBlockContent =append (_gcbe ._ecac .EG_ContentBlockContent ,_gedc );_ccde :=_dc .NewCT_P ();_gedc .P =append (_gedc .P ,_ccde );return Paragraph {_gcbe ._ecbe ,_ccde };};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_dbfcd RunProperties )SizeMeasure ()string {if _aaee :=_dbfcd ._becce .Sz ;_aaee !=nil {_bcfbc :=_aaee .ValAttr ;if _bcfbc .ST_PositiveUniversalMeasure !=nil {return *_bcfbc .ST_PositiveUniversalMeasure ;};};return "";};

// GetFooter gets a section Footer for given type
func (_dbbe Section )GetFooter (t _dc .ST_HdrFtr )(Footer ,bool ){for _ ,_defd :=range _dbbe ._fcbff .EG_HdrFtrReferences {if _defd .FooterReference .TypeAttr ==t {for _ ,_cfdba :=range _dbbe ._bcaa .Footers (){_ebgb :=_dbbe ._bcaa ._afde .FindRIDForN (_cfdba .Index (),_cg .FooterType );if _ebgb ==_defd .FooterReference .IdAttr {return _cfdba ,true ;};};};};return Footer {},false ;};

// SetEffect sets a text effect on the run.
func (_fcfa RunProperties )SetEffect (e _dc .ST_TextEffect ){if e ==_dc .ST_TextEffectUnset {_fcfa ._becce .Effect =nil ;}else {_fcfa ._becce .Effect =_dc .NewCT_TextEffect ();_fcfa ._becce .Effect .ValAttr =_dc .ST_TextEffectShimmer ;};};

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_bbeg FormField )PossibleValues ()[]string {if _bbeg ._cede .DdList ==nil {return nil ;};_dab :=[]string {};for _ ,_gfed :=range _bbeg ._cede .DdList .ListEntry {if _gfed ==nil {continue ;};_dab =append (_dab ,_gfed .ValAttr );};return _dab ;};

// X returns the inner wrapped XML type.
func (_baed Endnote )X ()*_dc .CT_FtnEdn {return _baed ._dcdg };func (_cbed Paragraph )addInstrText (_fdfa string )*_dc .CT_Text {_ddfg :=_cbed .AddRun ();_aacf :=_ddfg .X ();_cabb :=_dc .NewEG_RunInnerContent ();_eede :=_dc .NewCT_Text ();_cdag :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_eede .SpaceAttr =&_cdag ;_eede .Content ="\u0020"+_fdfa +"\u0020";_cabb .InstrText =_eede ;_aacf .EG_RunInnerContent =append (_aacf .EG_RunInnerContent ,_cabb );return _eede ;};func (_gade Document )mergeFields ()[]mergeFieldInfo {_gaf :=[]Paragraph {};_gcff :=[]mergeFieldInfo {};for _ ,_fbea :=range _gade .Tables (){for _ ,_ddd :=range _fbea .Rows (){for _ ,_faabe :=range _ddd .Cells (){_gaf =append (_gaf ,_faabe .Paragraphs ()...);};};};_gaf =append (_gaf ,_gade .Paragraphs ()...);for _ ,_fbfeb :=range _gaf {_aefcb :=_fbfeb .Runs ();_afcgd :=-1;_gcdf :=-1;_ddbfe :=-1;_gcbg :=mergeFieldInfo {};for _ ,_gcbgd :=range _fbfeb ._feea .EG_PContent {for _ ,_adbe :=range _gcbgd .FldSimple {if _fd .Contains (_adbe .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_ecaa :=_dffd (_adbe .InstrAttr );_ecaa ._cbag =true ;_ecaa ._cefa =_fbfeb ;_ecaa ._fecc =_gcbgd ;_gcff =append (_gcff ,_ecaa );};};};for _gdbde :=0;_gdbde < len (_aefcb );_gdbde ++{_beaf :=_aefcb [_gdbde ];for _ ,_aabf :=range _beaf .X ().EG_RunInnerContent {if _aabf .FldChar !=nil {switch _aabf .FldChar .FldCharTypeAttr {case _dc .ST_FldCharTypeBegin :_afcgd =_gdbde ;case _dc .ST_FldCharTypeSeparate :_gcdf =_gdbde ;case _dc .ST_FldCharTypeEnd :_ddbfe =_gdbde ;if _gcbg ._aggb !=""{_gcbg ._cefa =_fbfeb ;_gcbg ._gedca =_afcgd ;_gcbg ._deab =_ddbfe ;_gcbg ._geab =_gcdf ;_gcff =append (_gcff ,_gcbg );};_afcgd =-1;_gcdf =-1;_ddbfe =-1;_gcbg =mergeFieldInfo {};};}else if _aabf .InstrText !=nil &&_fd .Contains (_aabf .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _afcgd !=-1&&_ddbfe ==-1{_gcbg =_dffd (_aabf .InstrText .Content );};};};};};return _gcff ;};

// Properties returns the paragraph properties.
func (_aadf Paragraph )Properties ()ParagraphProperties {_aadf .ensurePPr ();return ParagraphProperties {_aadf ._bfdb ,_aadf ._feea .PPr };};

// X returns the inner wrapped XML type.
func (_feaaf ParagraphProperties )X ()*_dc .CT_PPr {return _feaaf ._efff };

// SetThemeShade sets the shade based off the theme color.
func (_bged Color )SetThemeShade (s uint8 ){_cbf :=_b .Sprintf ("\u0025\u0030\u0032\u0078",s );_bged ._eca .ThemeShadeAttr =&_cbf ;};

// X returns the inner wrapped XML type.
func (_eabf Row )X ()*_dc .CT_Row {return _eabf ._efbb };

// SetPrimaryStyle marks the style as a primary style.
func (_cedee Style )SetPrimaryStyle (b bool ){if b {_cedee ._afaf .QFormat =_dc .NewCT_OnOff ();}else {_cedee ._afaf .QFormat =nil ;};};

// RemoveParagraph removes a paragraph from the footnote.
func (_bgcg Footnote )RemoveParagraph (p Paragraph ){for _ ,_acbd :=range _bgcg .content (){for _cbaf ,_cddd :=range _acbd .P {if _cddd ==p ._feea {copy (_acbd .P [_cbaf :],_acbd .P [_cbaf +1:]);_acbd .P =_acbd .P [0:len (_acbd .P )-1];return ;};};};};

// SetTop sets the top border to a specified type, color and thickness.
func (_dgdde TableBorders )SetTop (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_dgdde ._egdf .Top =_dc .NewCT_Border ();_eacaa (_dgdde ._egdf .Top ,t ,c ,thickness );};

// Caps returns true if paragraph font is capitalized.
func (_ebbg ParagraphProperties )Caps ()bool {return _dedc (_ebbg ._efff .RPr .Caps )};

// SetOutlineLevel sets the outline level of this style.
func (_afbgb ParagraphStyleProperties )SetOutlineLevel (lvl int ){_afbgb ._acgef .OutlineLvl =_dc .NewCT_DecimalNumber ();_afbgb ._acgef .OutlineLvl .ValAttr =int64 (lvl );};

// SetStartIndent controls the start indentation.
func (_cbcg ParagraphProperties )SetStartIndent (m _bg .Distance ){if _cbcg ._efff .Ind ==nil {_cbcg ._efff .Ind =_dc .NewCT_Ind ();};if m ==_bg .Zero {_cbcg ._efff .Ind .StartAttr =nil ;}else {_cbcg ._efff .Ind .StartAttr =&_dc .ST_SignedTwipsMeasure {};_cbcg ._efff .Ind .StartAttr .Int64 =_cg .Int64 (int64 (m /_bg .Twips ));};};

// SetLeftIndent controls the left indent of the paragraph.
func (_bdgad ParagraphStyleProperties )SetLeftIndent (m _bg .Distance ){if _bdgad ._acgef .Ind ==nil {_bdgad ._acgef .Ind =_dc .NewCT_Ind ();};if m ==_bg .Zero {_bdgad ._acgef .Ind .LeftAttr =nil ;}else {_bdgad ._acgef .Ind .LeftAttr =&_dc .ST_SignedTwipsMeasure {};_bdgad ._acgef .Ind .LeftAttr .Int64 =_cg .Int64 (int64 (m /_bg .Twips ));};};

// X returns the inner wrapped XML type.
func (_cgbg TableProperties )X ()*_dc .CT_TblPr {return _cgbg ._eacagd };

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_aebe RunProperties )SetFontFamily (family string ){if _aebe ._becce .RFonts ==nil {_aebe ._becce .RFonts =_dc .NewCT_Fonts ();};_aebe ._becce .RFonts .AsciiAttr =_cg .String (family );_aebe ._becce .RFonts .HAnsiAttr =_cg .String (family );_aebe ._becce .RFonts .EastAsiaAttr =_cg .String (family );};

// SetBold sets the run to bold.
func (_cbbaf RunProperties )SetBold (b bool ){if !b {_cbbaf ._becce .B =nil ;_cbbaf ._becce .BCs =nil ;}else {_cbbaf ._becce .B =_dc .NewCT_OnOff ();_cbbaf ._becce .BCs =_dc .NewCT_OnOff ();};};

// SetCellSpacing sets the cell spacing within a table.
func (_ccdb TableProperties )SetCellSpacing (m _bg .Distance ){_ccdb ._eacagd .TblCellSpacing =_dc .NewCT_TblWidth ();_ccdb ._eacagd .TblCellSpacing .TypeAttr =_dc .ST_TblWidthDxa ;_ccdb ._eacagd .TblCellSpacing .WAttr =&_dc .ST_MeasurementOrPercent {};_ccdb ._eacagd .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_ccdb ._eacagd .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (m /_bg .Dxa ));};

// AddTable adds a table to the table cell.
func (_efc Cell )AddTable ()Table {_fc :=_dc .NewEG_BlockLevelElts ();_efc ._gaag .EG_BlockLevelElts =append (_efc ._gaag .EG_BlockLevelElts ,_fc );_bgc :=_dc .NewEG_ContentBlockContent ();_fc .EG_ContentBlockContent =append (_fc .EG_ContentBlockContent ,_bgc );_gf :=_dc .NewCT_Tbl ();_bgc .Tbl =append (_bgc .Tbl ,_gf );return Table {_efc ._fde ,_gf };};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_gacg Paragraph )Style ()string {if _gacg ._feea .PPr !=nil &&_gacg ._feea .PPr .PStyle !=nil {return _gacg ._feea .PPr .PStyle .ValAttr ;};return "";};

// SetColor sets the text color.
func (_ebfab RunProperties )SetColor (c _aa .Color ){_ebfab ._becce .Color =_dc .NewCT_Color ();_ebfab ._becce .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_deac *Document )MailMerge (mergeContent map[string ]string ){_dfdee :=_deac .mergeFields ();_cgaa :=map[Paragraph ][]Run {};for _ ,_gcgd :=range _dfdee {_cedg ,_adae :=mergeContent [_gcgd ._aggb ];if _adae {if _gcgd ._dcde {_cedg =_fd .ToUpper (_cedg );}else if _gcgd ._fbdc {_cedg =_fd .ToLower (_cedg );}else if _gcgd ._dgac {_cedg =_fd .Title (_cedg );}else if _gcgd ._cag {_gbgef :=_cc .Buffer {};for _adba ,_eaf :=range _cedg {if _adba ==0{_gbgef .WriteRune (_a .ToUpper (_eaf ));}else {_gbgef .WriteRune (_eaf );};};_cedg =_gbgef .String ();};if _cedg !=""&&_gcgd ._bdabc !=""{_cedg =_gcgd ._bdabc +_cedg ;};if _cedg !=""&&_gcgd ._deda !=""{_cedg =_cedg +_gcgd ._deda ;};};if _gcgd ._cbag {if len (_gcgd ._fecc .FldSimple )==1&&len (_gcgd ._fecc .FldSimple [0].EG_PContent )==1&&len (_gcgd ._fecc .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_agag :=&_dc .EG_ContentRunContent {};_agag .R =_gcgd ._fecc .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_gcgd ._fecc .FldSimple =nil ;_dbfc :=Run {_deac ,_agag .R };_dbfc .ClearContent ();_dbfc .AddText (_cedg );_gcgd ._fecc .EG_ContentRunContent =append (_gcgd ._fecc .EG_ContentRunContent ,_agag );};}else {_beccc :=_gcgd ._cefa .Runs ();for _fgab :=_gcgd ._gedca ;_fgab <=_gcgd ._deab ;_fgab ++{if _fgab ==_gcgd ._geab +1{_beccc [_fgab ].ClearContent ();_beccc [_fgab ].AddText (_cedg );}else {_cgaa [_gcgd ._cefa ]=append (_cgaa [_gcgd ._cefa ],_beccc [_fgab ]);};};};};for _dgec ,_gaagb :=range _cgaa {for _ ,_aacb :=range _gaagb {_dgec .RemoveRun (_aacb );};};_deac .Settings .RemoveMailMerge ();};

// SetToolTip sets the tooltip text for a hyperlink.
func (_cfcd HyperLink )SetToolTip (text string ){if text ==""{_cfcd ._bgfg .TooltipAttr =nil ;}else {_cfcd ._bgfg .TooltipAttr =_cg .String (text );};};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_becc ,_caf :=Open (filename );if _caf !=nil {return nil ,_caf ;};_becc ._ace .Body =_dc .NewCT_Body ();return _becc ,nil ;};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_da AnchoredDrawing )SetYOffset (y _bg .Distance ){_da ._cfc .PositionV .Choice =&_dc .WdCT_PosVChoice {};_da ._cfc .PositionV .Choice .PosOffset =_cg .Int32 (int32 (y /_bg .EMU ));};

// VerticalAlign returns the value of paragraph vertical align.
func (_ccac ParagraphProperties )VerticalAlignment ()_be .ST_VerticalAlignRun {if _ffag :=_ccac ._efff .RPr .VertAlign ;_ffag !=nil {return _ffag .ValAttr ;};return 0;};

// SetRowBandSize sets the number of Rows in the row band
func (_fafcf TableStyleProperties )SetRowBandSize (rows int64 ){_fafcf ._abce .TblStyleRowBandSize =_dc .NewCT_DecimalNumber ();_fafcf ._abce .TblStyleRowBandSize .ValAttr =rows ;};

// SizeValue returns the value of run font size in points.
func (_cdcg RunProperties )SizeValue ()float64 {if _gebfg :=_cdcg ._becce .Sz ;_gebfg !=nil {_egbbc :=_gebfg .ValAttr ;if _egbbc .ST_UnsignedDecimalNumber !=nil {return float64 (*_egbbc .ST_UnsignedDecimalNumber )/2;};};return 0.0;};func (_caec Paragraph )addEndFldChar ()*_dc .CT_FldChar {_cgdd :=_caec .addFldChar ();_cgdd .FldCharTypeAttr =_dc .ST_FldCharTypeEnd ;return _cgdd ;};func _bcca (_eedd *_dc .CT_OnOff )OnOffValue {if _eedd ==nil {return OnOffValueUnset ;};if _eedd .ValAttr !=nil &&_eedd .ValAttr .Bool !=nil &&*_eedd .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// SetStrikeThrough sets the run to strike-through.
func (_ccge RunProperties )SetStrikeThrough (b bool ){if !b {_ccge ._becce .Strike =nil ;}else {_ccge ._becce .Strike =_dc .NewCT_OnOff ();};};

// Text returns the underlying tet in the run.
func (_fffd Run )Text ()string {if len (_fffd ._ggab .EG_RunInnerContent )==0{return "";};_dfgdb :=_cc .Buffer {};for _ ,_cgaac :=range _fffd ._ggab .EG_RunInnerContent {if _cgaac .T !=nil {_dfgdb .WriteString (_cgaac .T .Content );};if _cgaac .Tab !=nil {_dfgdb .WriteByte ('\t');};};return _dfgdb .String ();};

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_cfa AnchoredDrawing )SetTextWrapSquare (t _dc .WdST_WrapText ){_cfa ._cfc .Choice =&_dc .WdEG_WrapTypeChoice {};_cfa ._cfc .Choice .WrapSquare =_dc .NewWdCT_WrapSquare ();_cfa ._cfc .Choice .WrapSquare .WrapTextAttr =t ;};

// RightToLeft returns true if paragraph text goes from right to left.
func (_bdec ParagraphProperties )RightToLeft ()bool {return _dedc (_bdec ._efff .RPr .Rtl )};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_feac ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_feac ._acgef .KeepLines =nil ;}else {_feac ._acgef .KeepLines =_dc .NewCT_OnOff ();};};

// Outline returns true if run outline is on.
func (_ebaag RunProperties )Outline ()bool {return _dedc (_ebaag ._becce .Outline )};

// SetValue sets the width value.
func (_dcabd TableWidth )SetValue (m _bg .Distance ){_dcabd ._cffaa .WAttr =&_dc .ST_MeasurementOrPercent {};_dcabd ._cffaa .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_dcabd ._cffaa .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (m /_bg .Twips ));_dcabd ._cffaa .TypeAttr =_dc .ST_TblWidthDxa ;};

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_edbf HyperLink )SetTargetBookmark (bm Bookmark ){_edbf ._bgfg .AnchorAttr =_cg .String (bm .Name ());_edbf ._bgfg .IdAttr =nil ;};

// Strike returns true if paragraph is striked.
func (_bfcb ParagraphProperties )Strike ()bool {return _dedc (_bfcb ._efff .RPr .Strike )};

// SetName marks sets a name attribute for a FormField.
func (_bbaf FormField )SetName (name string ){_edgad :=_dc .NewCT_FFName ();_edgad .ValAttr =&name ;_bbaf ._cede .Name =[]*_dc .CT_FFName {_edgad };};

// Borders allows controlling individual cell borders.
func (_ede CellProperties )Borders ()CellBorders {if _ede ._cea .TcBorders ==nil {_ede ._cea .TcBorders =_dc .NewCT_TcBorders ();};return CellBorders {_ede ._cea .TcBorders };};

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_gdcg ParagraphProperties )SetSpacing (before ,after _bg .Distance ){if _gdcg ._efff .Spacing ==nil {_gdcg ._efff .Spacing =_dc .NewCT_Spacing ();};_gdcg ._efff .Spacing .BeforeAttr =&_be .ST_TwipsMeasure {};_gdcg ._efff .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (before /_bg .Twips ));_gdcg ._efff .Spacing .AfterAttr =&_be .ST_TwipsMeasure {};_gdcg ._efff .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (after /_bg .Twips ));};

// X returns the inner wrapped XML type.
func (_bdda Numbering )X ()*_dc .Numbering {return _bdda ._cfbb };

// Font returns the name of run font family.
func (_dgfd RunProperties )Font ()string {if _fcdbf :=_dgfd ._becce .RFonts ;_fcdbf !=nil {if _fcdbf .AsciiAttr !=nil {return *_fcdbf .AsciiAttr ;}else if _fcdbf .HAnsiAttr !=nil {return *_fcdbf .HAnsiAttr ;}else if _fcdbf .CsAttr !=nil {return *_fcdbf .CsAttr ;};};return "";};

// Underline returns the type of run underline.
func (_cgfg RunProperties )Underline ()_dc .ST_Underline {if _dace :=_cgfg ._becce .U ;_dace !=nil {return _dace .ValAttr ;};return 0;};func (_eeed Styles )initializeStyleDefaults (){_gecfb :=_eeed .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_dc .ST_StyleTypeParagraph ,true );_gecfb .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_gecfb .SetPrimaryStyle (true );_cfab :=_eeed .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_dc .ST_StyleTypeCharacter ,true );_cfab .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");_cfab .SetUISortOrder (1);_cfab .SetSemiHidden (true );_cfab .SetUnhideWhenUsed (true );_abcc :=_eeed .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_dc .ST_StyleTypeCharacter ,false );_abcc .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");_abcc .SetBasedOn (_cfab .StyleID ());_abcc .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_abcc .SetUISortOrder (10);_abcc .RunProperties ().Fonts ().SetASCIITheme (_dc .ST_ThemeMajorAscii );_abcc .RunProperties ().Fonts ().SetEastAsiaTheme (_dc .ST_ThemeMajorEastAsia );_abcc .RunProperties ().Fonts ().SetHANSITheme (_dc .ST_ThemeMajorHAnsi );_abcc .RunProperties ().Fonts ().SetCSTheme (_dc .ST_ThemeMajorBidi );_abcc .RunProperties ().SetSize (28*_bg .Point );_abcc .RunProperties ().SetKerning (14*_bg .Point );_abcc .RunProperties ().SetCharacterSpacing (-10*_bg .Twips );_cefag :=_eeed .AddStyle ("\u0054\u0069\u0074l\u0065",_dc .ST_StyleTypeParagraph ,false );_cefag .SetName ("\u0054\u0069\u0074l\u0065");_cefag .SetBasedOn (_gecfb .StyleID ());_cefag .SetNextStyle (_gecfb .StyleID ());_cefag .SetLinkedStyle (_abcc .StyleID ());_cefag .SetUISortOrder (10);_cefag .SetPrimaryStyle (true );_cefag .ParagraphProperties ().SetContextualSpacing (true );_cefag .RunProperties ().Fonts ().SetASCIITheme (_dc .ST_ThemeMajorAscii );_cefag .RunProperties ().Fonts ().SetEastAsiaTheme (_dc .ST_ThemeMajorEastAsia );_cefag .RunProperties ().Fonts ().SetHANSITheme (_dc .ST_ThemeMajorHAnsi );_cefag .RunProperties ().Fonts ().SetCSTheme (_dc .ST_ThemeMajorBidi );_cefag .RunProperties ().SetSize (28*_bg .Point );_cefag .RunProperties ().SetKerning (14*_bg .Point );_cefag .RunProperties ().SetCharacterSpacing (-10*_bg .Twips );_acab :=_eeed .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_dc .ST_StyleTypeTable ,false );_acab .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_acab .SetUISortOrder (99);_acab .SetSemiHidden (true );_acab .SetUnhideWhenUsed (true );_acab .X ().TblPr =_dc .NewCT_TblPrBase ();_bfef :=NewTableWidth ();_acab .X ().TblPr .TblInd =_bfef .X ();_bfef .SetValue (0*_bg .Dxa );_acab .X ().TblPr .TblCellMar =_dc .NewCT_TblCellMar ();_bfef =NewTableWidth ();_acab .X ().TblPr .TblCellMar .Top =_bfef .X ();_bfef .SetValue (0*_bg .Dxa );_bfef =NewTableWidth ();_acab .X ().TblPr .TblCellMar .Bottom =_bfef .X ();_bfef .SetValue (0*_bg .Dxa );_bfef =NewTableWidth ();_acab .X ().TblPr .TblCellMar .Left =_bfef .X ();_bfef .SetValue (108*_bg .Dxa );_bfef =NewTableWidth ();_acab .X ().TblPr .TblCellMar .Right =_bfef .X ();_bfef .SetValue (108*_bg .Dxa );_dcac :=_eeed .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_dc .ST_StyleTypeNumbering ,false );_dcac .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");_dcac .SetUISortOrder (1);_dcac .SetSemiHidden (true );_dcac .SetUnhideWhenUsed (true );_gfadd :=[]_bg .Distance {16,13,12,11,11,11,11,11,11};_ddff :=[]_bg .Distance {240,40,40,40,40,40,40,40,40};for _eacag :=0;_eacag < 9;_eacag ++{_egbag :=_b .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_eacag +1);_bcebd :=_eeed .AddStyle (_egbag +"\u0043\u0068\u0061\u0072",_dc .ST_StyleTypeCharacter ,false );_bcebd .SetName (_b .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_eacag +1));_bcebd .SetBasedOn (_cfab .StyleID ());_bcebd .SetLinkedStyle (_egbag );_bcebd .SetUISortOrder (9+_eacag );_bcebd .RunProperties ().SetSize (_gfadd [_eacag ]*_bg .Point );_dgbe :=_eeed .AddStyle (_egbag ,_dc .ST_StyleTypeParagraph ,false );_dgbe .SetName (_b .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_eacag +1));_dgbe .SetNextStyle (_gecfb .StyleID ());_dgbe .SetLinkedStyle (_dgbe .StyleID ());_dgbe .SetUISortOrder (9+_eacag );_dgbe .SetPrimaryStyle (true );_dgbe .ParagraphProperties ().SetKeepNext (true );_dgbe .ParagraphProperties ().SetSpacing (_ddff [_eacag ]*_bg .Twips ,0);_dgbe .ParagraphProperties ().SetOutlineLevel (_eacag );_dgbe .RunProperties ().SetSize (_gfadd [_eacag ]*_bg .Point );};};

// X returns the inner wrapped XML type.
func (_aefb TableConditionalFormatting )X ()*_dc .CT_TblStylePr {return _aefb ._gcacc };

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_agaa *Document )Close ()error {if _agaa .TmpPath !=""{return _cb .RemoveAll (_agaa .TmpPath );};return nil ;};

// MergeFields returns the list of all mail merge fields found in the document.
func (_gbgeb Document )MergeFields ()[]string {_ggdda :=map[string ]struct{}{};for _ ,_ffcd :=range _gbgeb .mergeFields (){_ggdda [_ffcd ._aggb ]=struct{}{};};_ceab :=[]string {};for _dbacg :=range _ggdda {_ceab =append (_ceab ,_dbacg );};return _ceab ;};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_cfbd InlineDrawing )GetImage ()(_bd .ImageRef ,bool ){_gabdd :=_cfbd ._effc .Graphic .GraphicData .Any ;if len (_gabdd )> 0{_adfa ,_gffb :=_gabdd [0].(*_ba .Pic );if _gffb {if _adfa .BlipFill !=nil &&_adfa .BlipFill .Blip !=nil &&_adfa .BlipFill .Blip .EmbedAttr !=nil {return _cfbd ._deed .GetImageByRelID (*_adfa .BlipFill .Blip .EmbedAttr );};};};return _bd .ImageRef {},false ;};

// Row is a row within a table within a document.
type Row struct{_ecaf *Document ;_efbb *_dc .CT_Row ;};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_affa Paragraph )AddHyperLink ()HyperLink {_eccga :=_dc .NewEG_PContent ();_affa ._feea .EG_PContent =append (_affa ._feea .EG_PContent ,_eccga );_eccga .Hyperlink =_dc .NewCT_Hyperlink ();return HyperLink {_affa ._bfdb ,_eccga .Hyperlink };};

// Text returns text from the document as one string separated with line breaks.
func (_afbfb *DocText )Text ()string {_afad :=_cc .NewBuffer ([]byte {});for _ ,_fagf :=range _afbfb .Items {if _fagf .Text !=""{_afad .WriteString (_fagf .Text );_afad .WriteString ("\u000a");};};return _afad .String ();};

// Clear clears the styes.
func (_cccae Styles )Clear (){_cccae ._cbfe .DocDefaults =nil ;_cccae ._cbfe .LatentStyles =nil ;_cccae ._cbfe .Style =nil ;};

// X returns the inner wrapped XML type.
func (_gfe Fonts )X ()*_dc .CT_Fonts {return _gfe ._dccb };

// X returns the inner wrapped XML type.
func (_cdf Color )X ()*_dc .CT_Color {return _cdf ._eca };func _bdbf (_baa *_dc .CT_Tbl ,_defg ,_egagb map[int64 ]int64 ){for _ ,_fead :=range _baa .EG_ContentRowContent {for _ ,_fddge :=range _fead .Tr {for _ ,_daf :=range _fddge .EG_ContentCellContent {for _ ,_bbad :=range _daf .Tc {for _ ,_faef :=range _bbad .EG_BlockLevelElts {for _ ,_gcdc :=range _faef .EG_ContentBlockContent {for _ ,_deeg :=range _gcdc .P {_badb (_deeg ,_defg ,_egagb );};for _ ,_cebe :=range _gcdc .Tbl {_bdbf (_cebe ,_defg ,_egagb );};};};};};};};};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_adeg *Document )Footnote (id int64 )Footnote {for _ ,_cdg :=range _adeg .Footnotes (){if _cdg .id ()==id {return _cdg ;};};return Footnote {};};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_ee Bookmark )SetName (name string ){_ee ._dcd .NameAttr =name };

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_ded Document )SetConformance (conformanceAttr _be .ST_ConformanceClass ){_ded ._ace .ConformanceAttr =conformanceAttr ;};

// RemoveParagraph removes a paragraph from a document.
func (_fbff *Document )RemoveParagraph (p Paragraph ){if _fbff ._ace .Body ==nil {return ;};for _ ,_eba :=range _fbff ._ace .Body .EG_BlockLevelElts {for _ ,_bdga :=range _eba .EG_ContentBlockContent {for _dfg ,_ada :=range _bdga .P {if _ada ==p ._feea {copy (_bdga .P [_dfg :],_bdga .P [_dfg +1:]);_bdga .P =_bdga .P [0:len (_bdga .P )-1];return ;};};if _bdga .Sdt !=nil &&_bdga .Sdt .SdtContent !=nil &&_bdga .Sdt .SdtContent .P !=nil {for _gcag ,_fed :=range _bdga .Sdt .SdtContent .P {if _fed ==p ._feea {copy (_bdga .P [_gcag :],_bdga .P [_gcag +1:]);_bdga .P =_bdga .P [0:len (_bdga .P )-1];return ;};};};};};for _ ,_agf :=range _fbff .Tables (){for _ ,_aaf :=range _agf .Rows (){for _ ,_fdg :=range _aaf .Cells (){for _ ,_ecc :=range _fdg ._gaag .EG_BlockLevelElts {for _ ,_feaa :=range _ecc .EG_ContentBlockContent {for _cfbg ,_ffa :=range _feaa .P {if _ffa ==p ._feea {copy (_feaa .P [_cfbg :],_feaa .P [_cfbg +1:]);_feaa .P =_feaa .P [0:len (_feaa .P )-1];return ;};};};};};};};for _ ,_effa :=range _fbff .Headers (){_effa .RemoveParagraph (p );};for _ ,_bdba :=range _fbff .Footers (){_bdba .RemoveParagraph (p );};};

// SetAllCaps sets the run to all caps.
func (_fdfb RunProperties )SetAllCaps (b bool ){if !b {_fdfb ._becce .Caps =nil ;}else {_fdfb ._becce .Caps =_dc .NewCT_OnOff ();};};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_fddcfb TableStyleProperties )SetTableIndent (ind _bg .Distance ){_fddcfb ._abce .TblInd =_dc .NewCT_TblWidth ();_fddcfb ._abce .TblInd .TypeAttr =_dc .ST_TblWidthDxa ;_fddcfb ._abce .TblInd .WAttr =&_dc .ST_MeasurementOrPercent {};_fddcfb ._abce .TblInd .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_fddcfb ._abce .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (ind /_bg .Dxa ));};

// X returns the inner wrapped XML type.
func (_gdgc Styles )X ()*_dc .Styles {return _gdgc ._cbfe };

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_edd Document )AddHyperlink (url string )_bd .Hyperlink {return _edd ._afde .AddHyperlink (url )};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_dc .CT_Tbl ;Row *_dc .CT_Row ;Cell *_dc .CT_Tc ;RowIndex int ;ColIndex int ;};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_cadc RunProperties )CharacterSpacingMeasure ()string {if _fbef :=_cadc ._becce .Spacing ;_fbef !=nil {_fdagd :=_fbef .ValAttr ;if _fdagd .ST_UniversalMeasure !=nil {return *_fdagd .ST_UniversalMeasure ;};};return "";};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_dc .NewStyles ()}};

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_fbcb *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_abf :=range _fbcb ._afde .X ().Relationship {if _abf .IdAttr ==idAttr {return _abf .TargetAttr ;};};return "";};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_cecg *_dc .CT_TblLook };

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_bdab *Document )AddImage (i _bd .Image )(_bd .ImageRef ,error ){_ege :=_bd .MakeImageRef (i ,&_bdab .DocBase ,_bdab ._afde );if i .Data ==nil &&i .Path ==""{return _ege ,_d .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _ege ,_d .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _ege ,_d .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_dacd :=_cb .Add (i .Path );if _dacd !=nil {return _ege ,_dacd ;};};_bdab .Images =append (_bdab .Images ,_ege );_gbaf :=_b .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_bdab .Images ),i .Format );_ggd :=_bdab ._afde .AddRelationship (_gbaf ,_cg .ImageType );_bdab .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_bdab .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bdab .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bdab .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_bdab .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );_ege .SetRelID (_ggd .X ().IdAttr );_ege .SetTarget (_gbaf );return _ege ,nil ;};

// SetKerning sets the run's font kerning.
func (_ffea RunProperties )SetKerning (size _bg .Distance ){_ffea ._becce .Kern =_dc .NewCT_HpsMeasure ();_ffea ._becce .Kern .ValAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (size /_bg .HalfPoint ));};

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_dgfc ParagraphProperties )SetHangingIndent (m _bg .Distance ){if _dgfc ._efff .Ind ==nil {_dgfc ._efff .Ind =_dc .NewCT_Ind ();};if m ==_bg .Zero {_dgfc ._efff .Ind .HangingAttr =nil ;}else {_dgfc ._efff .Ind .HangingAttr =&_be .ST_TwipsMeasure {};_dgfc ._efff .Ind .HangingAttr .ST_UnsignedDecimalNumber =_cg .Uint64 (uint64 (m /_bg .Twips ));};};

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_egdf *_dc .CT_TblBorders };

// Bold returns true if paragraph font is bold.
func (_febd ParagraphProperties )Bold ()bool {_fgabcb :=_febd ._efff .RPr ;return _dedc (_fgabcb .B )||_dedc (_fgabcb .BCs );};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_eaca *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_facb :=[]StructuredDocumentTag {};for _ ,_edfe :=range _eaca ._ace .Body .EG_BlockLevelElts {for _ ,_aag :=range _edfe .EG_ContentBlockContent {if _aag .Sdt !=nil {_facb =append (_facb ,StructuredDocumentTag {_eaca ,_aag .Sdt });};};};return _facb ;};

// SetHeader sets a section header.
func (_agde Section )SetHeader (h Header ,t _dc .ST_HdrFtr ){_ffcgc :=_dc .NewEG_HdrFtrReferences ();_agde ._fcbff .EG_HdrFtrReferences =append (_agde ._fcbff .EG_HdrFtrReferences ,_ffcgc );_ffcgc .HeaderReference =_dc .NewCT_HdrFtrRef ();_ffcgc .HeaderReference .TypeAttr =t ;_bcee :=_agde ._bcaa ._afde .FindRIDForN (h .Index (),_cg .HeaderType );if _bcee ==""{_f .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");};_ffcgc .HeaderReference .IdAttr =_bcee ;};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_feb Paragraph )SetLineSpacing (d _bg .Distance ,rule _dc .ST_LineSpacingRule ){_feb .ensurePPr ();if _feb ._feea .PPr .Spacing ==nil {_feb ._feea .PPr .Spacing =_dc .NewCT_Spacing ();};_fbdfd :=_feb ._feea .PPr .Spacing ;if rule ==_dc .ST_LineSpacingRuleUnset {_fbdfd .LineRuleAttr =_dc .ST_LineSpacingRuleUnset ;_fbdfd .LineAttr =nil ;}else {_fbdfd .LineRuleAttr =rule ;_fbdfd .LineAttr =&_dc .ST_SignedTwipsMeasure {};_fbdfd .LineAttr .Int64 =_cg .Int64 (int64 (d /_bg .Twips ));};};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_dfbb TableProperties )TableLook ()TableLook {if _dfbb ._eacagd .TblLook ==nil {_dfbb ._eacagd .TblLook =_dc .NewCT_TblLook ();};return TableLook {_dfbb ._eacagd .TblLook };};

// X returns the inner wrapped XML type.
func (_decg Header )X ()*_dc .Hdr {return _decg ._ecac };

// CellMargins are the margins for an individual cell.
type CellMargins struct{_acg *_dc .CT_TcMar };

// SetTarget sets the URL target of the hyperlink.
func (_gcf HyperLink )SetTarget (url string ){_ddec :=_gcf ._aeee .AddHyperlink (url );_gcf ._bgfg .IdAttr =_cg .String (_bd .Relationship (_ddec ).ID ());_gcf ._bgfg .AnchorAttr =nil ;};

// ExtractText returns text from the document as a DocText object.
func (_bgbb *Document )ExtractText ()*DocText {_fbdg :=[]TextItem {};for _ ,_bga :=range _bgbb ._ace .Body .EG_BlockLevelElts {_fbdg =append (_fbdg ,_gcad (_bga .EG_ContentBlockContent ,nil )...);};return &DocText {Items :_fbdg };};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_ceagg ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_ceagg ._efff .KeepLines =nil ;}else {_ceagg ._efff .KeepLines =_dc .NewCT_OnOff ();};};

// Section is the beginning of a new section.
type Section struct{_bcaa *Document ;_fcbff *_dc .CT_SectPr ;};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_dgg Run )IsFootnote ()(bool ,int64 ){if _dgg ._ggab .EG_RunInnerContent !=nil {if _dgg ._ggab .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_dgg ._ggab .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;};

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
func (_ageag Paragraph )RemoveFootnote (id int64 ){_feed :=_ageag ._bfdb ._aae ;var _abac int ;for _cfdb ,_ebff :=range _feed .CT_Footnotes .Footnote {if _ebff .IdAttr ==id {_abac =_cfdb ;};};_abac =0;_feed .CT_Footnotes .Footnote [_abac ]=nil ;_feed .CT_Footnotes .Footnote [_abac ]=_feed .CT_Footnotes .Footnote [len (_feed .CT_Footnotes .Footnote )-1];_feed .CT_Footnotes .Footnote =_feed .CT_Footnotes .Footnote [:len (_feed .CT_Footnotes .Footnote )-1];var _cge Run ;for _ ,_cagc :=range _ageag .Runs (){if _dfaf ,_gabg :=_cagc .IsFootnote ();_dfaf {if _gabg ==id {_cge =_cagc ;};};};_ageag .RemoveRun (_cge );};func (_ebacb Paragraph )addStartBookmark (_edegc int64 ,_bdaff string )*_dc .CT_Bookmark {_bgda :=_dc .NewEG_PContent ();_ebacb ._feea .EG_PContent =append (_ebacb ._feea .EG_PContent ,_bgda );_gbeb :=_dc .NewEG_ContentRunContent ();_dcdeb :=_dc .NewEG_RunLevelElts ();_bgge :=_dc .NewEG_RangeMarkupElements ();_ecfg :=_dc .NewCT_Bookmark ();_ecfg .NameAttr =_bdaff ;_ecfg .IdAttr =_edegc ;_bgge .BookmarkStart =_ecfg ;_bgda .EG_ContentRunContent =append (_bgda .EG_ContentRunContent ,_gbeb );_gbeb .EG_RunLevelElts =append (_gbeb .EG_RunLevelElts ,_dcdeb );_dcdeb .EG_RangeMarkupElements =append (_dcdeb .EG_RangeMarkupElements ,_bgge );return _ecfg ;};func _cbc (_adf *_dc .CT_P ,_gdadb *_dc .CT_Hyperlink ,_cdc *TableInfo ,_gfcf *DrawingInfo ,_dbbg []*_dc .EG_PContent )[]TextItem {if len (_dbbg )==0{return []TextItem {TextItem {Text :"",DrawingInfo :_gfcf ,Paragraph :_adf ,Hyperlink :_gdadb ,Run :nil ,TableInfo :_cdc }};};_bfad :=[]TextItem {};for _ ,_bagfc :=range _dbbg {for _ ,_bff :=range _bagfc .FldSimple {if _bff !=nil {_bfad =append (_bfad ,_cbc (_adf ,_gdadb ,_cdc ,_gfcf ,_bff .EG_PContent )...);};};if _cfda :=_bagfc .Hyperlink ;_cfda !=nil {_bfad =append (_bfad ,_fgega (_adf ,_cfda ,_cdc ,_gfcf ,_cfda .EG_ContentRunContent )...);};_bfad =append (_bfad ,_fgega (_adf ,nil ,_cdc ,_gfcf ,_bagfc .EG_ContentRunContent )...);};return _bfad ;};

// X returns the inner wrapped XML type.
func (_bagbg TableWidth )X ()*_dc .CT_TblWidth {return _bagbg ._cffaa };

// SetHighlight highlights text in a specified color.
func (_edea RunProperties )SetHighlight (c _dc .ST_HighlightColor ){_edea ._becce .Highlight =_dc .NewCT_Highlight ();_edea ._becce .Highlight .ValAttr =c ;};

// SetStart sets the cell start margin
func (_efcd CellMargins )SetStart (d _bg .Distance ){_efcd ._acg .Start =_dc .NewCT_TblWidth ();_ccg (_efcd ._acg .Start ,d );};

// X returns the inner wrapped XML type.
func (_feg CellProperties )X ()*_dc .CT_TcPr {return _feg ._cea };

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_fdbe ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_fdbe ._efff .PageBreakBefore =nil ;}else {_fdbe ._efff .PageBreakBefore =_dc .NewCT_OnOff ();};};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_ebbd FormField )SetValue (v string ){if _ebbd ._cede .DdList !=nil {for _aaea ,_aaca :=range _ebbd .PossibleValues (){if _aaca ==v {_ebbd ._cede .DdList .Result =_dc .NewCT_DecimalNumber ();_ebbd ._cede .DdList .Result .ValAttr =int64 (_aaea );break ;};};}else if _ebbd ._cede .TextInput !=nil {_ebbd ._dgad .T =_dc .NewCT_Text ();_ebbd ._dgad .T .Content =v ;};};

// Paragraphs returns the paragraphs defined in a header.
func (_aefcf Header )Paragraphs ()[]Paragraph {_fabbd :=[]Paragraph {};for _ ,_agbc :=range _aefcf ._ecac .EG_ContentBlockContent {for _ ,_bfbaa :=range _agbc .P {_fabbd =append (_fabbd ,Paragraph {_aefcf ._ecbe ,_bfbaa });};};for _ ,_affcc :=range _aefcf .Tables (){for _ ,_ddgd :=range _affcc .Rows (){for _ ,_bccc :=range _ddgd .Cells (){_fabbd =append (_fabbd ,_bccc .Paragraphs ()...);};};};return _fabbd ;};func _afcga (_dfdf *_dc .EG_ContentBlockContent )[]Bookmark {_dgf :=[]Bookmark {};for _ ,_ddae :=range _dfdf .P {for _ ,_agge :=range _ddae .EG_PContent {for _ ,_befg :=range _agge .EG_ContentRunContent {for _ ,_bdccf :=range _befg .EG_RunLevelElts {for _ ,_gad :=range _bdccf .EG_RangeMarkupElements {if _gad .BookmarkStart !=nil {_dgf =append (_dgf ,Bookmark {_gad .BookmarkStart });};};};};};};for _ ,_ggba :=range _dfdf .EG_RunLevelElts {for _ ,_cdde :=range _ggba .EG_RangeMarkupElements {if _cdde .BookmarkStart !=nil {_dgf =append (_dgf ,Bookmark {_cdde .BookmarkStart });};};};for _ ,_cae :=range _dfdf .Tbl {for _ ,_deef :=range _cae .EG_ContentRowContent {for _ ,_bfg :=range _deef .Tr {for _ ,_agea :=range _bfg .EG_ContentCellContent {for _ ,_dbf :=range _agea .Tc {for _ ,_caef :=range _dbf .EG_BlockLevelElts {for _ ,_eeb :=range _caef .EG_ContentBlockContent {for _ ,_gdbd :=range _afcga (_eeb ){_dgf =append (_dgf ,_gdbd );};};};};};};};};return _dgf ;};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_cffa *Document ;_gedde *_dc .CT_SdtBlock ;};

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_dead TableLook )SetFirstRow (on bool ){if !on {_dead ._cecg .FirstRowAttr =&_be .ST_OnOff {};_dead ._cecg .FirstRowAttr .ST_OnOff1 =_be .ST_OnOff1Off ;}else {_dead ._cecg .FirstRowAttr =&_be .ST_OnOff {};_dead ._cecg .FirstRowAttr .ST_OnOff1 =_be .ST_OnOff1On ;};};func _eacaa (_gdaec *_dc .CT_Border ,_cbg _dc .ST_Border ,_faeb _aa .Color ,_bcea _bg .Distance ){_gdaec .ValAttr =_cbg ;_gdaec .ColorAttr =&_dc .ST_HexColor {};if _faeb .IsAuto (){_gdaec .ColorAttr .ST_HexColorAuto =_dc .ST_HexColorAutoAuto ;}else {_gdaec .ColorAttr .ST_HexColorRGB =_faeb .AsRGBString ();};if _bcea !=_bg .Zero {_gdaec .SzAttr =_cg .Uint64 (uint64 (_bcea /_bg .Point *8));};};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_dcd *_dc .CT_Bookmark };

// SetSemiHidden controls if the style is hidden in the UI.
func (_faeg Style )SetSemiHidden (b bool ){if b {_faeg ._afaf .SemiHidden =_dc .NewCT_OnOff ();}else {_faeg ._afaf .SemiHidden =nil ;};};func _dedc (_efef *_dc .CT_OnOff )bool {return _efef !=nil };

// Rows returns the rows defined in the table.
func (_gccee Table )Rows ()[]Row {_efdc :=[]Row {};for _ ,_ebca :=range _gccee ._eaeb .EG_ContentRowContent {for _ ,_deca :=range _ebca .Tr {_efdc =append (_efdc ,Row {_gccee ._aaae ,_deca });};if _ebca .Sdt !=nil &&_ebca .Sdt .SdtContent !=nil {for _ ,_cffga :=range _ebca .Sdt .SdtContent .Tr {_efdc =append (_efdc ,Row {_gccee ._aaae ,_cffga });};};};return _efdc ;};

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_gefgd FormField )SetDefaultValue (v string ){if _gefgd ._cede .DdList !=nil {for _aade ,_dgff :=range _gefgd .PossibleValues (){if _dgff ==v {_gefgd ._cede .DdList .Default =_dc .NewCT_DecimalNumber ();_gefgd ._cede .DdList .Default .ValAttr =int64 (_aade );break ;};};};};func _fgega (_dbg *_dc .CT_P ,_cgab *_dc .CT_Hyperlink ,_aaaf *TableInfo ,_aeea *DrawingInfo ,_faa []*_dc .EG_ContentRunContent )[]TextItem {_ccaef :=[]TextItem {};for _ ,_dbacbb :=range _faa {if _eaec :=_dbacbb .R ;_eaec !=nil {_bdcd :=_cc .NewBuffer ([]byte {});for _ ,_dgeb :=range _eaec .EG_RunInnerContent {if _dgeb .T !=nil &&_dgeb .T .Content !=""{_bdcd .WriteString (_dgeb .T .Content );};};_ccaef =append (_ccaef ,TextItem {Text :_bdcd .String (),DrawingInfo :_aeea ,Paragraph :_dbg ,Hyperlink :_cgab ,Run :_eaec ,TableInfo :_aaaf });for _ ,_gebfd :=range _eaec .Extra {if _ebba ,_beca :=_gebfd .(*_dc .AlternateContentRun );_beca {_cega :=&DrawingInfo {Drawing :_ebba .Choice .Drawing };for _ ,_ggeg :=range _cega .Drawing .Anchor {for _ ,_caca :=range _ggeg .Graphic .GraphicData .Any {if _dbcf ,_bafe :=_caca .(*_dc .WdWsp );_bafe {if _dbcf .WChoice !=nil {if _edfeg :=_dbcf .SpPr ;_edfeg !=nil {if _gffdc :=_edfeg .Xfrm ;_gffdc !=nil {if _bfbe :=_gffdc .Ext ;_bfbe !=nil {_cega .Width =_bfbe .CxAttr ;_cega .Height =_bfbe .CyAttr ;};};};for _ ,_fgag :=range _dbcf .WChoice .Txbx .TxbxContent .EG_ContentBlockContent {_ccaef =append (_ccaef ,_abgb (_fgag .P ,_aaaf ,_cega )...);};};};};};};};};};return _ccaef ;};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_bd .DocBase ;_ace *_dc .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_fbb []*_dc .Hdr ;_fae []_bd .Relationships ;_ddg []*_dc .Ftr ;_bf []_bd .Relationships ;_afde _bd .Relationships ;_ega []*_dg .Theme ;_fegd *_dc .WebSettings ;_ff *_dc .Fonts ;_gcd *_dc .Endnotes ;_aae *_dc .Footnotes ;_dad []*_df .Ocx ;_fbe string ;};

// DoubleStrike returns true if run is double striked.
func (_aaada RunProperties )DoubleStrike ()bool {return _dedc (_aaada ._becce .Dstrike )};

// Clear removes all of the content from within a run.
func (_dgce Run )Clear (){_dgce ._ggab .EG_RunInnerContent =nil };

// Settings controls the document settings.
type Settings struct{_dcgc *_dc .Settings };

// IsItalic returns true if the run has been set to italics.
func (_facd RunProperties )IsItalic ()bool {return _facd .ItalicValue ()==OnOffValueOn };

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_cfbb *_dc .Numbering };

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_aadag ParagraphProperties )AddSection (t _dc .ST_SectionMark )Section {_aadag ._efff .SectPr =_dc .NewCT_SectPr ();if t !=_dc .ST_SectionMarkUnset {_aadag ._efff .SectPr .Type =_dc .NewCT_SectType ();_aadag ._efff .SectPr .Type .ValAttr =t ;};return Section {_aadag ._effbe ,_aadag ._efff .SectPr };};

// Borders allows manipulation of the table borders.
func (_eaddc TableProperties )Borders ()TableBorders {if _eaddc ._eacagd .TblBorders ==nil {_eaddc ._eacagd .TblBorders =_dc .NewCT_TblBorders ();};return TableBorders {_eaddc ._eacagd .TblBorders };};

// X returns the inner wrapped XML type.
func (_faf *Document )X ()*_dc .Document {return _faf ._ace };

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to dispay on a separate page.
func (_ffeg ParagraphProperties )SetWindowControl (b bool ){if !b {_ffeg ._efff .WidowControl =nil ;}else {_ffeg ._efff .WidowControl =_dc .NewCT_OnOff ();};};

// SetSize sets the size of the displayed image on the page.
func (_bafd InlineDrawing )SetSize (w ,h _bg .Distance ){_bafd ._effc .Extent .CxAttr =int64 (float64 (w *_bg .Pixel72 )/_bg .EMU );_bafd ._effc .Extent .CyAttr =int64 (float64 (h *_bg .Pixel72 )/_bg .EMU );};func (_bcbd Footnote )id ()int64 {return _bcbd ._afba .IdAttr };

// Underline returns the type of paragraph underline.
func (_bcae ParagraphProperties )Underline ()_dc .ST_Underline {if _eeeg :=_bcae ._efff .RPr .U ;_eeeg !=nil {return _eeeg .ValAttr ;};return 0;};

// Properties returns the numbering level paragraph properties.
func (_cbbaa NumberingLevel )Properties ()ParagraphStyleProperties {if _cbbaa ._dbab .PPr ==nil {_cbbaa ._dbab .PPr =_dc .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_cbbaa ._dbab .PPr };};

// Bold returns true if run font is bold.
func (_bgecg RunProperties )Bold ()bool {_bgdb :=_bgecg ._becce ;return _dedc (_bgdb .B )||_dedc (_bgdb .BCs );};

// Spacing returns the paragraph spacing settings.
func (_gafa ParagraphProperties )Spacing ()ParagraphSpacing {if _gafa ._efff .Spacing ==nil {_gafa ._efff .Spacing =_dc .NewCT_Spacing ();};return ParagraphSpacing {_gafa ._efff .Spacing };};

// UnderlineColor returns the hex color value of run underline.
func (_dffaf RunProperties )UnderlineColor ()string {if _baaa :=_dffaf ._becce .U ;_baaa !=nil {_adbef :=_baaa .ColorAttr ;if _adbef !=nil &&_adbef .ST_HexColorRGB !=nil {return *_adbef .ST_HexColorRGB ;};};return "";};

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_acgef *_dc .CT_PPrGeneral };

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_cffec TableLook )SetLastColumn (on bool ){if !on {_cffec ._cecg .LastColumnAttr =&_be .ST_OnOff {};_cffec ._cecg .LastColumnAttr .ST_OnOff1 =_be .ST_OnOff1Off ;}else {_cffec ._cecg .LastColumnAttr =&_be .ST_OnOff {};_cffec ._cecg .LastColumnAttr .ST_OnOff1 =_be .ST_OnOff1On ;};};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_adeb Header )Index ()int {for _dcdge ,_cafe :=range _adeb ._ecbe ._fbb {if _cafe ==_adeb ._ecac {return _dcdge ;};};return -1;};

// SetMultiLevelType sets the multilevel type.
func (_abbd NumberingDefinition )SetMultiLevelType (t _dc .ST_MultiLevelType ){if t ==_dc .ST_MultiLevelTypeUnset {_abbd ._ffee .MultiLevelType =nil ;}else {_abbd ._ffee .MultiLevelType =_dc .NewCT_MultiLevelType ();_abbd ._ffee .MultiLevelType .ValAttr =t ;};};

// SetWidthPercent sets the table to a width percentage.
func (_abeed TableProperties )SetWidthPercent (pct float64 ){_abeed ._eacagd .TblW =_dc .NewCT_TblWidth ();_abeed ._eacagd .TblW .TypeAttr =_dc .ST_TblWidthPct ;_abeed ._eacagd .TblW .WAttr =&_dc .ST_MeasurementOrPercent {};_abeed ._eacagd .TblW .WAttr .ST_DecimalNumberOrPercent =&_dc .ST_DecimalNumberOrPercent {};_abeed ._eacagd .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_cg .Int64 (int64 (pct *50));};

// GetTargetByRelId returns a target path with the associated relation ID in the
// document.
func (_cefga *Document )GetTargetByRelId (idAttr string )string {return _cefga ._afde .GetTargetByRelId (idAttr );};

// SetAlignment sets the alignment of a table within the page.
func (_gagg TableProperties )SetAlignment (align _dc .ST_JcTable ){if align ==_dc .ST_JcTableUnset {_gagg ._eacagd .Jc =nil ;}else {_gagg ._eacagd .Jc =_dc .NewCT_JcTable ();_gagg ._eacagd .Jc .ValAttr =align ;};};

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_cede *_dc .CT_FFData ;_dgad *_dc .EG_RunInnerContent ;};

// Paragraphs returns the paragraphs defined in a footnote.
func (_cgde Footnote )Paragraphs ()[]Paragraph {_bfbf :=[]Paragraph {};for _ ,_dfgad :=range _cgde .content (){for _ ,_fafc :=range _dfgad .P {_bfbf =append (_bfbf ,Paragraph {_cgde ._accc ,_fafc });};};return _bfbf ;};func _addb (_bagf *_dc .CT_Tbl ,_aada map[string ]string ){for _ ,_fcb :=range _bagf .EG_ContentRowContent {for _ ,_ebgc :=range _fcb .Tr {for _ ,_fbd :=range _ebgc .EG_ContentCellContent {for _ ,_fbfa :=range _fbd .Tc {for _ ,_egdgd :=range _fbfa .EG_BlockLevelElts {for _ ,_cedb :=range _egdgd .EG_ContentBlockContent {for _ ,_gdee :=range _cedb .P {_dadcf (_gdee ,_aada );};for _ ,_afbg :=range _cedb .Tbl {_addb (_afbg ,_aada );};};};};};};};};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_cea *_dc .CT_TcPr };

// Clear clears all content within a header
func (_cbeg Header )Clear (){_cbeg ._ecac .EG_ContentBlockContent =nil };func _dffd (_aceg string )mergeFieldInfo {_aadaa :=[]string {};_bgagg :=_cc .Buffer {};_ffbc :=-1;for _caeg ,_fgdfa :=range _aceg {switch _fgdfa {case ' ':if _bgagg .Len ()!=0{_aadaa =append (_aadaa ,_bgagg .String ());};_bgagg .Reset ();case '"':if _ffbc !=-1{_aadaa =append (_aadaa ,_aceg [_ffbc +1:_caeg ]);_ffbc =-1;}else {_ffbc =_caeg ;};default:_bgagg .WriteRune (_fgdfa );};};if _bgagg .Len ()!=0{_aadaa =append (_aadaa ,_bgagg .String ());};_cgdf :=mergeFieldInfo {};for _gcde :=0;_gcde < len (_aadaa )-1;_gcde ++{_aba :=_aadaa [_gcde ];switch _aba {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_cgdf ._aggb =_aadaa [_gcde +1];_gcde ++;case "\u005c\u0066":_cgdf ._deda =_aadaa [_gcde +1];_gcde ++;case "\u005c\u0062":_cgdf ._bdabc =_aadaa [_gcde +1];_gcde ++;case "\u005c\u002a":switch _aadaa [_gcde +1]{case "\u0055\u0070\u0070e\u0072":_cgdf ._dcde =true ;case "\u004c\u006f\u0077e\u0072":_cgdf ._fbdc =true ;case "\u0043\u0061\u0070\u0073":_cgdf ._dgac =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_cgdf ._cag =true ;};_gcde ++;};};return _cgdf ;};

// Cells returns the cells defined in the table.
func (_bggc Row )Cells ()[]Cell {_cfgf :=[]Cell {};for _ ,_effff :=range _bggc ._efbb .EG_ContentCellContent {for _ ,_acgfe :=range _effff .Tc {_cfgf =append (_cfgf ,Cell {_bggc ._ecaf ,_acgfe });};if _effff .Sdt !=nil &&_effff .Sdt .SdtContent !=nil {for _ ,_agfe :=range _effff .Sdt .SdtContent .Tc {_cfgf =append (_cfgf ,Cell {_bggc ._ecaf ,_agfe });};};};return _cfgf ;};

// CellBorders are the borders for an individual
type CellBorders struct{_gfa *_dc .CT_TcBorders };

// Paragraphs returns the paragraphs defined in an endnote.
func (_abec Endnote )Paragraphs ()[]Paragraph {_cde :=[]Paragraph {};for _ ,_facgf :=range _abec .content (){for _ ,_ggad :=range _facgf .P {_cde =append (_cde ,Paragraph {_abec ._eaab ,_ggad });};};return _cde ;};

// SetWidthAuto sets the the cell width to automatic.
func (_gbb CellProperties )SetWidthAuto (){_gbb ._cea .TcW =_dc .NewCT_TblWidth ();_gbb ._cea .TcW .TypeAttr =_dc .ST_TblWidthAuto ;};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_cdgd FormField )Value ()string {if _cdgd ._cede .TextInput !=nil &&_cdgd ._dgad .T !=nil {return _cdgd ._dgad .T .Content ;}else if _cdgd ._cede .DdList !=nil &&_cdgd ._cede .DdList .Result !=nil {_gcbb :=_cdgd .PossibleValues ();_dcdb :=int (_cdgd ._cede .DdList .Result .ValAttr );if _dcdb < len (_gcbb ){return _gcbb [_dcdb ];};}else if _cdgd ._cede .CheckBox !=nil {if _cdgd .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_afge RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_afge ._becce .Dstrike =nil ;}else {_afge ._becce .Dstrike =_dc .NewCT_OnOff ();};};

// SetAll sets all of the borders to a given value.
func (_bdad TableBorders )SetAll (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_bdad .SetBottom (t ,c ,thickness );_bdad .SetLeft (t ,c ,thickness );_bdad .SetRight (t ,c ,thickness );_bdad .SetTop (t ,c ,thickness );_bdad .SetInsideHorizontal (t ,c ,thickness );_bdad .SetInsideVertical (t ,c ,thickness );};

// Properties returns the row properties.
func (_fegga Row )Properties ()RowProperties {if _fegga ._efbb .TrPr ==nil {_fegga ._efbb .TrPr =_dc .NewCT_TrPr ();};return RowProperties {_fegga ._efbb .TrPr };};

// SetVAlignment sets the vertical alignment for an anchored image.
func (_cgc AnchoredDrawing )SetVAlignment (v _dc .WdST_AlignV ){_cgc ._cfc .PositionV .Choice =&_dc .WdCT_PosVChoice {};_cgc ._cfc .PositionV .Choice .Align =v ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_dgaga TableBorders )SetRight (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_dgaga ._egdf .Right =_dc .NewCT_Border ();_eacaa (_dgaga ._egdf .Right ,t ,c ,thickness );};

// SetStyle sets the table style name.
func (_ddgf TableProperties )SetStyle (name string ){if name ==""{_ddgf ._eacagd .TblStyle =nil ;}else {_ddgf ._eacagd .TblStyle =_dc .NewCT_String ();_ddgf ._eacagd .TblStyle .ValAttr =name ;};};

// X returns the inner wrapped XML type.
func (_fbga Settings )X ()*_dc .Settings {return _fbga ._dcgc };

// Headers returns the headers defined in the document.
func (_cec *Document )Headers ()[]Header {_ddf :=[]Header {};for _ ,_aaed :=range _cec ._fbb {_ddf =append (_ddf ,Header {_cec ,_aaed });};return _ddf ;};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_ebce ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_ebce ._acgef .KeepNext =nil ;}else {_ebce ._acgef .KeepNext =_dc .NewCT_OnOff ();};};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_cafb :=_dc .NewNumbering ();return Numbering {_cafb }};

// SetRightPct sets the cell right margin
func (_fcc CellMargins )SetRightPct (pct float64 ){_fcc ._acg .Right =_dc .NewCT_TblWidth ();_afb (_fcc ._acg .Right ,pct );};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_ed AnchoredDrawing )SetOrigin (h _dc .WdST_RelFromH ,v _dc .WdST_RelFromV ){_ed ._cfc .PositionH .RelativeFromAttr =h ;_ed ._cfc .PositionV .RelativeFromAttr =v ;};

// ExtractFromFooter returns text from the document footer as an array of TextItems.
func ExtractFromFooter (footer *_dc .Ftr )[]TextItem {return _gcad (footer .EG_ContentBlockContent ,nil )};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_cefb FormField )SetChecked (b bool ){if _cefb ._cede .CheckBox ==nil {return ;};if !b {_cefb ._cede .CheckBox .Checked =nil ;}else {_cefb ._cede .CheckBox .Checked =_dc .NewCT_OnOff ();};};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_deed *Document ;_effc *_dc .WdInline ;};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_bcdb ParagraphProperties )CharacterSpacingValue ()int64 {if _gaafa :=_bcdb ._efff .RPr .Spacing ;_gaafa !=nil {_aadc :=_gaafa .ValAttr ;if _aadc .Int64 !=nil {return *_aadc .Int64 ;};};return int64 (0);};type mergeFieldInfo struct{_aggb string ;_deda string ;_bdabc string ;_dcde bool ;_fbdc bool ;_cag bool ;_dgac bool ;_cefa Paragraph ;_gedca ,_geab ,_deab int ;_fecc *_dc .EG_PContent ;_cbag bool ;};

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_fde *Document ;_gaag *_dc .CT_Tc ;};

// Emboss returns true if paragraph emboss is on.
func (_ebaeb ParagraphProperties )Emboss ()bool {return _dedc (_ebaeb ._efff .RPr .Emboss )};

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_fee *Document )AddFooter ()Footer {_bab :=_dc .NewFtr ();_fee ._ddg =append (_fee ._ddg ,_bab );_dbd :=_b .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_fee ._ddg ));_fee ._afde .AddRelationship (_dbd ,_cg .FooterType );_fee .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_dbd ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");_fee ._bf =append (_fee ._bf ,_bd .NewRelationships ());return Footer {_fee ,_bab };};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_adfag TableLook )SetLastRow (on bool ){if !on {_adfag ._cecg .LastRowAttr =&_be .ST_OnOff {};_adfag ._cecg .LastRowAttr .ST_OnOff1 =_be .ST_OnOff1Off ;}else {_adfag ._cecg .LastRowAttr =&_be .ST_OnOff {};_adfag ._cecg .LastRowAttr .ST_OnOff1 =_be .ST_OnOff1On ;};};const _afcb ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";

// Paragraphs returns the paragraphs defined in the cell.
func (_de Cell )Paragraphs ()[]Paragraph {_dcdf :=[]Paragraph {};for _ ,_dac :=range _de ._gaag .EG_BlockLevelElts {for _ ,_fb :=range _dac .EG_ContentBlockContent {for _ ,_ge :=range _fb .P {_dcdf =append (_dcdf ,Paragraph {_de ._fde ,_ge });};};};return _dcdf ;};

// X returns the inner wrapped XML type.
func (_gcg AnchoredDrawing )X ()*_dc .WdAnchor {return _gcg ._cfc };

// X returns the inner wrapped type
func (_bee CellBorders )X ()*_dc .CT_TcBorders {return _bee ._gfa };

// X returns the inner wrapped XML type.
func (_deabd TableLook )X ()*_dc .CT_TblLook {return _deabd ._cecg };

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_gebga Run )AddDrawingInline (img _bd .ImageRef )(InlineDrawing ,error ){_bacc :=_gebga .newIC ();_bacc .Drawing =_dc .NewCT_Drawing ();_ecfbf :=_dc .NewWdInline ();_fgfd :=InlineDrawing {_gebga ._gbbb ,_ecfbf };_ecfbf .CNvGraphicFramePr =_dg .NewCT_NonVisualGraphicFrameProperties ();_bacc .Drawing .Inline =append (_bacc .Drawing .Inline ,_ecfbf );_ecfbf .Graphic =_dg .NewGraphic ();_ecfbf .Graphic .GraphicData =_dg .NewCT_GraphicalObjectData ();_ecfbf .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_ecfbf .DistTAttr =_cg .Uint32 (0);_ecfbf .DistLAttr =_cg .Uint32 (0);_ecfbf .DistBAttr =_cg .Uint32 (0);_ecfbf .DistRAttr =_cg .Uint32 (0);_ecfbf .Extent .CxAttr =int64 (float64 (img .Size ().X *_bg .Pixel72 )/_bg .EMU );_ecfbf .Extent .CyAttr =int64 (float64 (img .Size ().Y *_bg .Pixel72 )/_bg .EMU );_bgfa :=0x7FFFFFFF&_g .Uint32 ();_ecfbf .DocPr .IdAttr =_bgfa ;_bdac :=_ba .NewPic ();_bdac .NvPicPr .CNvPr .IdAttr =_bgfa ;_ebbbc :=img .RelID ();if _ebbbc ==""{return _fgfd ,_d .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_ecfbf .Graphic .GraphicData .Any =append (_ecfbf .Graphic .GraphicData .Any ,_bdac );_bdac .BlipFill =_dg .NewCT_BlipFillProperties ();_bdac .BlipFill .Blip =_dg .NewCT_Blip ();_bdac .BlipFill .Blip .EmbedAttr =&_ebbbc ;_bdac .BlipFill .Stretch =_dg .NewCT_StretchInfoProperties ();_bdac .BlipFill .Stretch .FillRect =_dg .NewCT_RelativeRect ();_bdac .SpPr =_dg .NewCT_ShapeProperties ();_bdac .SpPr .Xfrm =_dg .NewCT_Transform2D ();_bdac .SpPr .Xfrm .Off =_dg .NewCT_Point2D ();_bdac .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_cg .Int64 (0);_bdac .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_cg .Int64 (0);_bdac .SpPr .Xfrm .Ext =_dg .NewCT_PositiveSize2D ();_bdac .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_bg .Point );_bdac .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_bg .Point );_bdac .SpPr .PrstGeom =_dg .NewCT_PresetGeometry2D ();_bdac .SpPr .PrstGeom .PrstAttr =_dg .ST_ShapeTypeRect ;return _fgfd ,nil ;};

// RightToLeft returns true if run text goes from right to left.
func (_addbc RunProperties )RightToLeft ()bool {return _dedc (_addbc ._becce .Rtl )};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_abdc TableLook )SetVerticalBanding (on bool ){if !on {_abdc ._cecg .NoVBandAttr =&_be .ST_OnOff {};_abdc ._cecg .NoVBandAttr .ST_OnOff1 =_be .ST_OnOff1On ;}else {_abdc ._cecg .NoVBandAttr =&_be .ST_OnOff {};_abdc ._cecg .NoVBandAttr .ST_OnOff1 =_be .ST_OnOff1Off ;};};

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_eaecf TableProperties )SetLayout (l _dc .ST_TblLayoutType ){if l ==_dc .ST_TblLayoutTypeUnset ||l ==_dc .ST_TblLayoutTypeAutofit {_eaecf ._eacagd .TblLayout =nil ;}else {_eaecf ._eacagd .TblLayout =_dc .NewCT_TblLayoutType ();_eaecf ._eacagd .TblLayout .TypeAttr =l ;};};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_dc .NewCT_TblWidth ()}};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_bggb Footer )Index ()int {for _bbga ,_ggc :=range _bggb ._ffgf ._ddg {if _ggc ==_bggb ._bgga {return _bbga ;};};return -1;};

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_gcfc NumberingDefinition )AddLevel ()NumberingLevel {_gdgf :=_dc .NewCT_Lvl ();_gdgf .Start =&_dc .CT_DecimalNumber {ValAttr :1};_gdgf .IlvlAttr =int64 (len (_gcfc ._ffee .Lvl ));_gcfc ._ffee .Lvl =append (_gcfc ._ffee .Lvl ,_gdgf );return NumberingLevel {_gdgf };};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_acgg *Document )BodySection ()Section {if _acgg ._ace .Body .SectPr ==nil {_acgg ._ace .Body .SectPr =_dc .NewCT_SectPr ();};return Section {_acgg ,_acgg ._ace .Body .SectPr };};

// Footer is a footer for a document section.
type Footer struct{_ffgf *Document ;_bgga *_dc .Ftr ;};func _dadcf (_afbe *_dc .CT_P ,_ccfd map[string ]string ){for _ ,_bfddb :=range _afbe .EG_PContent {for _ ,_acc :=range _bfddb .EG_ContentRunContent {if _acc .R !=nil {for _ ,_adee :=range _acc .R .EG_RunInnerContent {_cdb :=_adee .Drawing ;if _cdb !=nil {for _ ,_afgf :=range _cdb .Anchor {for _ ,_bfde :=range _afgf .Graphic .GraphicData .Any {switch _bded :=_bfde .(type ){case *_ba .Pic :if _bded .BlipFill !=nil &&_bded .BlipFill .Blip !=nil {_cbba (_bded .BlipFill .Blip ,_ccfd );};default:};};};for _ ,_gdabf :=range _cdb .Inline {for _ ,_ebg :=range _gdabf .Graphic .GraphicData .Any {switch _gegec :=_ebg .(type ){case *_ba .Pic :if _gegec .BlipFill !=nil &&_gegec .BlipFill .Blip !=nil {_cbba (_gegec .BlipFill .Blip ,_ccfd );};default:};};};};};};};};};func (_gaee FormFieldType )String ()string {if _gaee >=FormFieldType (len (_ggdd )-1){return _b .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gaee );};return _afcb [_ggdd [_gaee ]:_ggdd [_gaee +1]];};

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_eagf FormField )IsChecked ()bool {if _eagf ._cede .CheckBox ==nil {return false ;};if _eagf ._cede .CheckBox .Checked !=nil {return true ;};return false ;};

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_dc .CT_Drawing ;Width int64 ;Height int64 ;};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_ggg RunProperties )CharacterSpacingValue ()int64 {if _dgddf :=_ggg ._becce .Spacing ;_dgddf !=nil {_fdbf :=_dgddf .ValAttr ;if _fdbf .Int64 !=nil {return *_fdbf .Int64 ;};};return int64 (0);};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_fe AnchoredDrawing )SetName (name string ){_fe ._cfc .DocPr .NameAttr =name ;for _ ,_e :=range _fe ._cfc .Graphic .GraphicData .Any {if _bbe ,_fdd :=_e .(*_ba .Pic );_fdd {_bbe .NvPicPr .CNvPr .DescrAttr =_cg .String (name );};};};

// New constructs an empty document that content can be added to.
func New ()*Document {_aaa :=&Document {_ace :_dc .NewDocument ()};_aaa .ContentTypes =_bd .NewContentTypes ();_aaa ._ace .Body =_dc .NewCT_Body ();_aaa ._ace .ConformanceAttr =_be .ST_ConformanceClassTransitional ;_aaa ._afde =_bd .NewRelationships ();_aaa .AppProperties =_bd .NewAppProperties ();_aaa .CoreProperties =_bd .NewCoreProperties ();_aaa .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");_aaa .Settings =NewSettings ();_aaa ._afde .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_cg .SettingsType );_aaa .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");_aaa .Rels =_bd .NewRelationships ();_aaa .Rels .AddRelationship (_cg .RelativeFilename (_cg .DocTypeDocument ,"",_cg .CorePropertiesType ,0),_cg .CorePropertiesType );_aaa .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_cg .ExtendedPropertiesType );_aaa .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_cg .OfficeDocumentType );_aaa .Numbering =NewNumbering ();_aaa .Numbering .InitializeDefault ();_aaa .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");_aaa ._afde .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_cg .NumberingType );_aaa .Styles =NewStyles ();_aaa .Styles .InitializeDefault ();_aaa .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");_aaa ._afde .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_cg .StylesType );_aaa ._ace .Body =_dc .NewCT_Body ();return _aaa ;};func (_fgefc Paragraph )addEndBookmark (_gfbg int64 )*_dc .CT_MarkupRange {_aecb :=_dc .NewEG_PContent ();_fgefc ._feea .EG_PContent =append (_fgefc ._feea .EG_PContent ,_aecb );_aabeg :=_dc .NewEG_ContentRunContent ();_gacb :=_dc .NewEG_RunLevelElts ();_gcfg :=_dc .NewEG_RangeMarkupElements ();_gcgde :=_dc .NewCT_MarkupRange ();_gcgde .IdAttr =_gfbg ;_gcfg .BookmarkEnd =_gcgde ;_aecb .EG_ContentRunContent =append (_aecb .EG_ContentRunContent ,_aabeg );_aabeg .EG_RunLevelElts =append (_aabeg .EG_RunLevelElts ,_gacb );_gacb .EG_RangeMarkupElements =append (_gacb .EG_RangeMarkupElements ,_gcfg );return _gcgde ;};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// Italic returns true if run font is italic.
func (_cbee RunProperties )Italic ()bool {_agff :=_cbee ._becce ;return _dedc (_agff .I )||_dedc (_agff .ICs );};

// SetCSTheme sets the font complex script theme.
func (_bdgdd Fonts )SetCSTheme (t _dc .ST_Theme ){_bdgdd ._dccb .CsthemeAttr =t };func (_cfe Paragraph )ensurePPr (){if _cfe ._feea .PPr ==nil {_cfe ._feea .PPr =_dc .NewCT_PPr ();};};

// AddParagraph adds a paragraph to the table cell.
func (_af Cell )AddParagraph ()Paragraph {_ceeg :=_dc .NewEG_BlockLevelElts ();_af ._gaag .EG_BlockLevelElts =append (_af ._gaag .EG_BlockLevelElts ,_ceeg );_dd :=_dc .NewEG_ContentBlockContent ();_ceeg .EG_ContentBlockContent =append (_ceeg .EG_ContentBlockContent ,_dd );_ea :=_dc .NewCT_P ();_dd .P =append (_dd .P ,_ea );return Paragraph {_af ._fde ,_ea };};

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_eagff RunProperties )ComplexSizeValue ()float64 {if _gbgb :=_eagff ._becce .SzCs ;_gbgb !=nil {_ddceb :=_gbgb .ValAttr ;if _ddceb .ST_UnsignedDecimalNumber !=nil {return float64 (*_ddceb .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// RemoveMailMerge removes any mail merge settings
func (_ffde Settings )RemoveMailMerge (){_ffde ._dcgc .MailMerge =nil };

// SetStyle sets the font size.
func (_gffa RunProperties )SetStyle (style string ){if style ==""{_gffa ._becce .RStyle =nil ;}else {_gffa ._becce .RStyle =_dc .NewCT_String ();_gffa ._becce .RStyle .ValAttr =style ;};};func (_gfff *Document )onNewRelationship (_cad *_cf .DecodeMap ,_ddce ,_ffdg string ,_bbecf []*_ag .File ,_adcd *_gc .Relationship ,_cbb _cf .Target )error {_bce :=_cg .DocTypeDocument ;switch _ffdg {case _cg .OfficeDocumentType ,_cg .OfficeDocumentTypeStrict :_gfff ._ace =_dc .NewDocument ();_cad .AddTarget (_ddce ,_gfff ._ace ,_ffdg ,0);_cad .AddTarget (_cf .RelationsPathFor (_ddce ),_gfff ._afde .X (),_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .CorePropertiesType :_cad .AddTarget (_ddce ,_gfff .CoreProperties .X (),_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .CustomPropertiesType :_cad .AddTarget (_ddce ,_gfff .CustomProperties .X (),_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .ExtendedPropertiesType ,_cg .ExtendedPropertiesTypeStrict :_cad .AddTarget (_ddce ,_gfff .AppProperties .X (),_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .ThumbnailType ,_cg .ThumbnailTypeStrict :for _dde ,_eadb :=range _bbecf {if _eadb ==nil {continue ;};if _eadb .Name ==_ddce {_dca ,_bggf :=_eadb .Open ();if _bggf !=nil {return _b .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_bggf );};_gfff .Thumbnail ,_ ,_bggf =_ab .Decode (_dca );_dca .Close ();if _bggf !=nil {return _b .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_bggf );};_bbecf [_dde ]=nil ;};};case _cg .SettingsType ,_cg .SettingsTypeStrict :_cad .AddTarget (_ddce ,_gfff .Settings .X (),_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .NumberingType ,_cg .NumberingTypeStrict :_gfff .Numbering =NewNumbering ();_cad .AddTarget (_ddce ,_gfff .Numbering .X (),_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .StylesType ,_cg .StylesTypeStrict :_gfff .Styles .Clear ();_cad .AddTarget (_ddce ,_gfff .Styles .X (),_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .HeaderType ,_cg .HeaderTypeStrict :_edgb :=_dc .NewHdr ();_cad .AddTarget (_ddce ,_edgb ,_ffdg ,uint32 (len (_gfff ._fbb )));_gfff ._fbb =append (_gfff ._fbb ,_edgb );_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,len (_gfff ._fbb ));_ddbe :=_bd .NewRelationships ();_cad .AddTarget (_cf .RelationsPathFor (_ddce ),_ddbe .X (),_ffdg ,0);_gfff ._fae =append (_gfff ._fae ,_ddbe );case _cg .FooterType ,_cg .FooterTypeStrict :_aab :=_dc .NewFtr ();_cad .AddTarget (_ddce ,_aab ,_ffdg ,uint32 (len (_gfff ._ddg )));_gfff ._ddg =append (_gfff ._ddg ,_aab );_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,len (_gfff ._ddg ));_gdb :=_bd .NewRelationships ();_cad .AddTarget (_cf .RelationsPathFor (_ddce ),_gdb .X (),_ffdg ,0);_gfff ._bf =append (_gfff ._bf ,_gdb );case _cg .ThemeType ,_cg .ThemeTypeStrict :_bggd :=_dg .NewTheme ();_cad .AddTarget (_ddce ,_bggd ,_ffdg ,uint32 (len (_gfff ._ega )));_gfff ._ega =append (_gfff ._ega ,_bggd );_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,len (_gfff ._ega ));case _cg .WebSettingsType ,_cg .WebSettingsTypeStrict :_gfff ._fegd =_dc .NewWebSettings ();_cad .AddTarget (_ddce ,_gfff ._fegd ,_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .FontTableType ,_cg .FontTableTypeStrict :_gfff ._ff =_dc .NewFonts ();_cad .AddTarget (_ddce ,_gfff ._ff ,_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .EndNotesType ,_cg .EndNotesTypeStrict :_gfff ._gcd =_dc .NewEndnotes ();_cad .AddTarget (_ddce ,_gfff ._gcd ,_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .FootNotesType ,_cg .FootNotesTypeStrict :_gfff ._aae =_dc .NewFootnotes ();_cad .AddTarget (_ddce ,_gfff ._aae ,_ffdg ,0);_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,0);case _cg .ImageType ,_cg .ImageTypeStrict :var _age _bd .ImageRef ;for _eda ,_ddaa :=range _bbecf {if _ddaa ==nil {continue ;};if _ddaa .Name ==_ddce {_fcf ,_cafd :=_cf .ExtractToDiskTmp (_ddaa ,_gfff .TmpPath );if _cafd !=nil {return _cafd ;};_dgdg ,_cafd :=_bd .ImageFromStorage (_fcf );if _cafd !=nil {return _cafd ;};_age =_bd .MakeImageRef (_dgdg ,&_gfff .DocBase ,_gfff ._afde );_bbecf [_eda ]=nil ;};};_ccae :="\u002e"+_fd .ToLower (_age .Format ());_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,len (_gfff .Images )+1);if _gdfc :=_gd .Ext (_adcd .TargetAttr );_gdfc !=_ccae {_adcd .TargetAttr =_adcd .TargetAttr [0:len (_adcd .TargetAttr )-len (_gdfc )]+_ccae ;};_age .SetTarget ("\u0077\u006f\u0072d\u002f"+_adcd .TargetAttr );_gfff .Images =append (_gfff .Images ,_age );case _cg .ControlType ,_cg .ControlTypeStrict :_fag :=_df .NewOcx ();_cad .AddTarget (_ddce ,_fag ,_ffdg ,uint32 (len (_gfff ._dad )));_gfff ._dad =append (_gfff ._dad ,_fag );_adcd .TargetAttr =_cg .RelativeFilename (_bce ,_cbb .Typ ,_ffdg ,len (_gfff ._dad ));default:_cg .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_ffdg ,_ddce );};return nil ;};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_beacf TableBorders )SetInsideVertical (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_beacf ._egdf .InsideV =_dc .NewCT_Border ();_eacaa (_beacf ._egdf .InsideV ,t ,c ,thickness );};

// GetColor returns the color.Color object representing the run color.
func (_dgag ParagraphProperties )GetColor ()_aa .Color {if _gfad :=_dgag ._efff .RPr .Color ;_gfad !=nil {_daeb :=_gfad .ValAttr ;if _daeb .ST_HexColorRGB !=nil {return _aa .FromHex (*_daeb .ST_HexColorRGB );};};return _aa .Color {};};

// Properties returns the cell properties.
func (_ec Cell )Properties ()CellProperties {if _ec ._gaag .TcPr ==nil {_ec ._gaag .TcPr =_dc .NewCT_TcPr ();};return CellProperties {_ec ._gaag .TcPr };};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_eg CellBorders )SetInsideVertical (t _dc .ST_Border ,c _aa .Color ,thickness _bg .Distance ){_eg ._gfa .InsideV =_dc .NewCT_Border ();_eacaa (_eg ._gfa .InsideV ,t ,c ,thickness );};

// SizeValue returns the value of paragraph font size in points.
func (_dfcd ParagraphProperties )SizeValue ()float64 {if _cceca :=_dfcd ._efff .RPr .Sz ;_cceca !=nil {_abdf :=_cceca .ValAttr ;if _abdf .ST_UnsignedDecimalNumber !=nil {return float64 (*_abdf .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetName sets the name of the style.
func (_gdadf Style )SetName (name string ){_gdadf ._afaf .Name =_dc .NewCT_String ();_gdadf ._afaf .Name .ValAttr =name ;};