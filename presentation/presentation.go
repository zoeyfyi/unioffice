//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_fa "archive/zip";_b "bytes";_de "encoding/xml";_bbb "errors";_a "fmt";_cg "github.com/unidoc/unioffice";_dd "github.com/unidoc/unioffice/common";_ad "github.com/unidoc/unioffice/common/tempstorage";_cc "github.com/unidoc/unioffice/drawing";_bgg "github.com/unidoc/unioffice/internal/license";_ef "github.com/unidoc/unioffice/measurement";_c "github.com/unidoc/unioffice/schema/soo/dml";_fe "github.com/unidoc/unioffice/schema/soo/dml/chart";_ff "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_gc "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_eac "github.com/unidoc/unioffice/schema/soo/pml";_gb "github.com/unidoc/unioffice/zippkg";_fb "image";_f "image/jpeg";_ea "io";_d "log";_fg "os";_bb "path";_ee "sort";_g "strconv";_bg "strings";);

// Name returns the name of the slide layout.
func (_eaf SlideLayout )Name ()string {if _eaf ._fcag .CSld !=nil &&_eaf ._fcag .CSld .NameAttr !=nil {return *_eaf ._fcag .CSld .NameAttr ;};return "";};

// RemoveSlide removes a slide from a presentation.
func (_cfg *Presentation )RemoveSlide (s Slide )error {_adg :=false ;_agdf :=0;for _fca ,_ddg :=range _cfg ._eeda {if _ddg ==s ._gag {if _cfg ._ade .SldIdLst .SldId [_fca ]!=s ._ffgg {return _bbb .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_cfg ._eeda [_fca :],_cfg ._eeda [_fca +1:]);_cfg ._eeda =_cfg ._eeda [0:len (_cfg ._eeda )-1];copy (_cfg ._gafc [_fca :],_cfg ._gafc [_fca +1:]);_cfg ._gafc =_cfg ._gafc [0:len (_cfg ._gafc )-1];copy (_cfg ._ade .SldIdLst .SldId [_fca :],_cfg ._ade .SldIdLst .SldId [_fca +1:]);_cfg ._ade .SldIdLst .SldId =_cfg ._ade .SldIdLst .SldId [0:len (_cfg ._ade .SldIdLst .SldId )-1];_adg =true ;_agdf =_fca ;};};if !_adg {return _bbb .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_fcc :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .SlideType ,0);return _cfg .ContentTypes .RemoveOverrideByIndex (_fcc ,_agdf );};

// HtmlPubPr returns the HtmlPubPr property.
func (_eca PresentationProperties )HtmlPubPr ()*_eac .CT_HtmlPublishProperties {return _eca ._bbc .HtmlPubPr ;};

// X returns the inner wrapped XML type.
func (_eabb PlaceHolder )X ()*_eac .CT_Shape {return _eabb ._ece };

// GetTextBoxes returns a list of all text boxes from a slide.
func (_dgag Slide )GetTextBoxes ()[]*TextBox {_abdf :=[]*TextBox {};_gddc :=_dgag ._gag .CSld .SpTree .Choice ;for _ ,_egfc :=range _gddc {for _ ,_dad :=range _egfc .Sp {if _dad .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_dad .NvSpPr .CNvSpPr .TxBoxAttr {_abdf =append (_abdf ,&TextBox {_dad });};};};return _abdf ;};

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_facd *Presentation )GetColorBySchemeColor (schClr _c .ST_SchemeColorVal )*_c .CT_Color {if len (_facd ._fdg )==0||len (_facd ._gg )==0{return nil ;};var _efaf _c .ST_ColorSchemeIndex ;_cede :=_facd ._fdg [0];_bgf :=_cede .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_efaf =_bgf .Bg1Attr ;case "\u0062\u0067\u0032":_efaf =_bgf .Bg2Attr ;case "\u0074\u0078\u0031":_efaf =_bgf .Tx1Attr ;case "\u0074\u0078\u0032":_efaf =_bgf .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_efaf =_bgf .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_efaf =_bgf .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_efaf =_bgf .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_efaf =_bgf .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_efaf =_bgf .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_efaf =_bgf .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_efaf =_bgf .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_efaf =_bgf .FolHlinkAttr ;case "\u0064\u006b\u0031":_efaf =_c .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_efaf =_c .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_efaf =_c .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_efaf =_c .ST_ColorSchemeIndexLt2 ;default:_efaf =_c .ST_ColorSchemeIndexUnset ;};_aae :=_facd ._gg [0];_cbgd :=_aae .ThemeElements ;if _cbgd ==nil {return nil ;};var _bfdd *_c .CT_Color ;_ffee :=_cbgd .ClrScheme ;switch _efaf .String (){case "\u0064\u006b\u0031":_bfdd =_ffee .Dk1 ;case "\u0064\u006b\u0032":_bfdd =_ffee .Dk2 ;case "\u006c\u0074\u0031":_bfdd =_ffee .Lt1 ;case "\u006c\u0074\u0032":_bfdd =_ffee .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_bfdd =_ffee .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_bfdd =_ffee .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_bfdd =_ffee .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_bfdd =_ffee .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_bfdd =_ffee .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_bfdd =_ffee .Accent6 ;case "\u0068\u006c\u0069n\u006b":_bfdd =_ffee .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_bfdd =_ffee .FolHlink ;default:return nil ;};return _bfdd ;};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_fcag *_eac .SldLayout };

// Image is an image within a slide.
type Image struct{_eed *_eac .CT_Picture };

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_bbc *_eac .PresentationPr };

// Save writes the presentation out to a writer in the Zip package format
func (_gfe *Presentation )Save (w _ea .Writer )error {return _gfe .save (w ,false )};

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_dfgd *_eac .ViewPr };

// AddImage adds an image textbox to a slide.
func (_efbb Slide )AddImage (img _dd .ImageRef )Image {_bgeb :=_eac .NewCT_GroupShapeChoice ();_efbb ._gag .CSld .SpTree .Choice =append (_efbb ._gag .CSld .SpTree .Choice ,_bgeb );_fdc :=_eac .NewCT_Picture ();_bgeb .Pic =append (_bgeb .Pic ,_fdc );_fdc .NvPicPr .CNvPicPr =_c .NewCT_NonVisualPictureProperties ();_fdc .NvPicPr .CNvPicPr .PicLocks =_c .NewCT_PictureLocking ();_fdc .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_cg .Bool (true );_fdc .BlipFill =_c .NewCT_BlipFillProperties ();_fdc .BlipFill .Blip =_c .NewCT_Blip ();_gcg :=_efbb .AddImageToRels (img );_fdc .BlipFill .Blip .EmbedAttr =_cg .String (_gcg );_fdc .BlipFill .Stretch =_c .NewCT_StretchInfoProperties ();_fdc .BlipFill .Stretch .FillRect =_c .NewCT_RelativeRect ();_fdc .SpPr =_c .NewCT_ShapeProperties ();_fdc .SpPr .PrstGeom =_c .NewCT_PresetGeometry2D ();_fdc .SpPr .PrstGeom .PrstAttr =_c .ST_ShapeTypeRect ;_cdda :=Image {_fdc };_efee :=img .Size ();_cdda .Properties ().SetWidth (_ef .Distance (_efee .X )*_ef .Pixel72 );_cdda .Properties ().SetHeight (_ef .Distance (_efee .Y )*_ef .Pixel72 );_cdda .Properties ().SetPosition (0,0);return _cdda ;};

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};

// Read reads a document from an io.Reader.
func Read (r _ea .ReaderAt ,size int64 )(*Presentation ,error ){const _cdg ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_bgg .GetLicenseKey ().IsLicensed ()&&!_dbd {_a .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_a .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_bbb .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_ebdf :=_gdb ();_fgc ,_fabb :=_bgg .GenRefId ("\u0070\u0072");if _fabb !=nil {_cg .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_fabb );return nil ,_fabb ;};_ebdf ._fbb =_fgc ;if _aga :=_bgg .Track (_ebdf ._fbb ,_cdg );_aga !=nil {_a .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_aga );return nil ,_aga ;};_fcfc ,_fabb :=_ad .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _fabb !=nil {return nil ,_fabb ;};_ebdf .TmpPath =_fcfc ;_edf ,_fabb :=_fa .NewReader (r ,size );if _fabb !=nil {return nil ,_a .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_fabb );};_dgdac :=[]*_fa .File {};_dgdac =append (_dgdac ,_edf .File ...);_fecaa :=false ;for _ ,_bcf :=range _dgdac {if _bcf .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_fecaa =true ;break ;};};if _fecaa {_ebdf .CreateCustomProperties ();};_eada :=_gb .DecodeMap {};_eada .SetOnNewRelationshipFunc (_ebdf .onNewRelationship );_eada .AddTarget (_cg .ContentTypesFilename ,_ebdf .ContentTypes .X (),"",0);_eada .AddTarget (_cg .BaseRelsFilename ,_ebdf .Rels .X (),"",0);if _eag :=_eada .Decode (_dgdac );_eag !=nil {return nil ,_eag ;};for _ ,_cddf :=range _dgdac {if _cddf ==nil {continue ;};if _cfbf :=_ebdf .AddExtraFileFromZip (_cddf );_cfbf !=nil {return nil ,_cfbf ;};};if _fecaa {_aaea :=false ;for _ ,_bgc :=range _ebdf .Rels .X ().Relationship {if _bgc .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_aaea =true ;break ;};};if !_aaea {_ebdf .AddCustomRelationships ();};};return _ebdf ,nil ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_cfc *Presentation )GetImageByRelID (relID string )(_dd .ImageRef ,bool ){for _ ,_dff :=range _cfc .Images {if _dff .RelID ()==relID {return _dff ,true ;};};return _dd .ImageRef {},false ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_ccf *Presentation )AddImage (i _dd .Image )(_dd .ImageRef ,error ){_bbbd :=_dd .MakeImageRef (i ,&_ccf .DocBase ,_ccf ._ace );if i .Data ==nil &&i .Path ==""{return _bbbd ,_bbb .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _bbbd ,_bbb .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _bbbd ,_bbb .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_abddf :=_ad .Add (i .Path );if _abddf !=nil {return _bbbd ,_abddf ;};};_ccf .Images =append (_ccf .Images ,_bbbd );_ccf .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_ccf .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ccf .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ccf .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_ccf .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _bbbd ,nil ;};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_eaa *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_cae :=_eac .NewCT_SlideIdListEntry ();_cae .IdAttr =256;for _ ,_cdd :=range _eaa ._ade .SldIdLst .SldId {if _cdd .IdAttr >=_cae .IdAttr {_cae .IdAttr =_cdd .IdAttr +1;};};_eaa ._ade .SldIdLst .SldId =append (_eaa ._ade .SldIdLst .SldId ,_cae );_ebc :=_eac .NewSld ();_ffg :=_b .Buffer {};_aeg :=_de .NewEncoder (&_ffg );_dfb :=_de .StartElement {Name :_de .Name {Local :"\u0073\u006c\u0069d\u0065"}};_dfb .Attr =append (_dfb .Attr ,_de .Attr {Name :_de .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_dfb .Attr =append (_dfb .Attr ,_de .Attr {Name :_de .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_dfb .Attr =append (_dfb .Attr ,_de .Attr {Name :_de .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_dfb .Attr =append (_dfb .Attr ,_de .Attr {Name :_de .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_dfb .Attr =append (_dfb .Attr ,_de .Attr {Name :_de .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_dfb .Attr =append (_dfb .Attr ,_de .Attr {Name :_de .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _ffe :=l ._fcag .CSld .MarshalXML (_aeg ,_dfb );_ffe !=nil {return Slide {},_ffe ;};_aeg .Flush ();_bfaf :=_de .NewDecoder (&_ffg );_ebc .CSld =_eac .NewCT_CommonSlideData ();if _dab :=_bfaf .Decode (_ebc .CSld );_dab !=nil {return Slide {},_dab ;};_ebc .CSld .NameAttr =nil ;_ebc .CSld .SpTree .Choice =_fdfd (_ebc .CSld .SpTree .Choice );_eaa ._eeda =append (_eaa ._eeda ,_ebc );_gdc :=_eaa ._ace .AddAutoRelationship (_cg .DocTypePresentation ,_cg .OfficeDocumentType ,len (_eaa ._eeda ),_cg .SlideType );_cae .RIdAttr =_gdc .ID ();_aaa :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .SlideType ,len (_eaa ._eeda ));_eaa .ContentTypes .AddOverride (_aaa ,_cg .SlideContentType );_bfgd :=_dd .NewRelationships ();_eaa ._gafc =append (_eaa ._gafc ,_bfgd );_fdfb :=len (_eaa ._gafc )-1;for _bfda ,_gbead :=range _eaa ._abdd {if _gbead ==l .X (){_ced :=_eaa ._fcg [_bfda ];for _ ,_aege :=range _ced .X ().Relationship {if _aege .TypeAttr !=_cg .SlideMasterType {_eaa ._gafc [_fdfb ].X ().Relationship =append (_eaa ._gafc [_fdfb ].X ().Relationship ,_aege );};};_bfgd .AddAutoRelationship (_cg .DocTypePresentation ,_cg .SlideType ,_bfda +1,_cg .SlideLayoutType );};};_acf :=Slide {_cae ,_ebc ,_eaa };return _acf ,nil ;};

// SetTextAnchor controls the text anchoring
func (_gfda TextBox )SetTextAnchor (a _c .ST_TextAnchoringType ){_gfda ._fffb .TxBody .BodyPr =_c .NewCT_TextBodyProperties ();_gfda ._fffb .TxBody .BodyPr .AnchorAttr =a ;};func _gf (_egd *Presentation ,_ca *_eac .CT_Shape ,_dbf *_eac .CT_GraphicalObjectFrame ,_bgef *TableInfo ,_fgb *_c .CT_Transform2D ,_cff int ,_bcb []*_c .CT_TextParagraph )[]*TextItem {_dg :=[]*TextItem {};var _fc ,_dbfg int64 ;_fea :=_fgb ==nil ;_ba :=0;for _ ,_gbe :=range _bcb {for _ ,_dfc :=range _gbe .EG_TextRun {if _bfg :=_dfc .R ;_bfg !=nil {if !_fea {if _fgb .Off !=nil {if _gd :=_fgb .Off .XAttr .ST_CoordinateUnqualified ;_gd !=nil {_fc =*_gd ;_fea =true ;};if _cfd :=_fgb .Off .YAttr .ST_CoordinateUnqualified ;_cfd !=nil {_dbfg =*_cfd ;_fea =true ;};};};_dg =append (_dg ,&TextItem {Presentation :_egd ,Shape :_ca ,GraphicFrame :_dbf ,TableInfo :_bgef ,Paragraph :_gbe ,Run :_bfg ,Text :_bfg .T ,_db :_fc ,_eg :_dbfg ,_ec :_cff ,_dde :_ba });_ba ++;};};};return _dg ;};

// X returns the inner wrapped XML type.
func (_cdgb SlideMaster )X ()*_eac .SldMaster {return _cdgb ._adgf };

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_gbb ,_dc :=Open (fn );if _dc !=nil {return nil ,_dc ;};return _gbb ,nil ;};func _fdfd (_edg []*_eac .CT_GroupShapeChoice )[]*_eac .CT_GroupShapeChoice {var _feb []*_eac .CT_GroupShapeChoice ;for _ ,_ebg :=range _edg {if len (_ebg .Pic )==0{_feb =append (_feb ,_ebg );};};return _feb ;};

// AddParagraph adds a new paragraph to a placeholder.
func (_eea PlaceHolder )AddParagraph ()_cc .Paragraph {_fec :=_cc .MakeParagraph (_c .NewCT_TextParagraph ());_eea ._ece .TxBody .P =append (_eea ._ece .TxBody .P ,_fec .X ());return _fec ;};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_gff Slide )GetPlaceholder (t _eac .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_gea :=range _gff ._gag .CSld .SpTree .Choice {for _ ,_cafd :=range _gea .Sp {if _cafd .NvSpPr !=nil &&_cafd .NvSpPr .NvPr !=nil &&_cafd .NvSpPr .NvPr .Ph !=nil {if _cafd .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_cafd ,_gff ._gag },nil ;};};};};return PlaceHolder {},_bbb .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};func (_eacd sort2d )Len ()int {return len (_eacd )};

// X returns TextBox's underlying *pml.CT_Shape.
func (_agdb TextBox )X ()*_eac .CT_Shape {return _agdb ._fffb };

// SorterViewPr returns the SorterViewPr property.
func (_cca ViewProperties )SorterViewPr ()*_eac .CT_SlideSorterViewProperties {return _cca ._dfgd .SorterViewPr ;};

// Presentation is the a presentation base document.
type Presentation struct{_dd .DocBase ;_ade *_eac .Presentation ;_ace _dd .Relationships ;_eeda []*_eac .Sld ;_gafc []_dd .Relationships ;_fdg []*_eac .SldMaster ;_agd []_dd .Relationships ;_abdd []*_eac .SldLayout ;_fcg []_dd .Relationships ;_gg []*_c .Theme ;_dac []_dd .Relationships ;_ebf _dd .TableStyles ;_bcd PresentationProperties ;_bd ViewProperties ;_fgg []*_c .CT_Hyperlink ;_bae []*_fe .ChartSpace ;_cfb []*_eac .HandoutMaster ;_acg []*_eac .NotesMaster ;_cega []*_cg .XSDAny ;_dbe map[string ]string ;_fbb string ;};

// SlideViewPr returns the SlideViewPr property.
func (_cedg ViewProperties )SlideViewPr ()*_eac .CT_SlideViewProperties {return _cedg ._dfgd .SlideViewPr ;};func (_fgbe *Presentation )nextSlideID ()uint32 {_cgc :=uint32 (256);for _ ,_dba :=range _fgbe ._ade .SldIdLst .SldId {if _dba .IdAttr >=_cgc {_cgc =_dba .IdAttr +1;};};return _cgc ;};

// X returns the inner wrapped XML type.
func (_faaf Slide )X ()*_eac .Sld {return _faaf ._gag };func (_gbee TextBox )getOff ()*_c .CT_Point2D {if _gbee ._fffb .SpPr ==nil {_gbee ._fffb .SpPr =_c .NewCT_ShapeProperties ();};if _gbee ._fffb .SpPr .Xfrm ==nil {_gbee ._fffb .SpPr .Xfrm =_c .NewCT_Transform2D ();};if _gbee ._fffb .SpPr .Xfrm .Off ==nil {_gbee ._fffb .SpPr .Xfrm .Off =_c .NewCT_Point2D ();};return _gbee ._fffb .SpPr .Xfrm .Off ;};

// SlideLayouts returns the slide layouts defined in the presentation.
func (_gbbf *Presentation )SlideLayouts ()[]SlideLayout {_aff :=[]SlideLayout {};for _ ,_aab :=range _gbbf ._abdd {_aff =append (_aff ,SlideLayout {_aab });};return _aff ;};

// X returns the inner wrapped XML type.
func (_ecee *Presentation )X ()*_eac .Presentation {return _ecee ._ade };

// OutlineViewPr returns the OutlineViewPr property.
func (_fgcc ViewProperties )OutlineViewPr ()*_eac .CT_OutlineViewProperties {return _fgcc ._dfgd .OutlineViewPr ;};

// ClrMru returns the ClrMru property.
func (_ead PresentationProperties )ClrMru ()*_c .CT_ColorMRU {return _ead ._bbc .ClrMru };

// ExtLst returns the ExtLst property.
func (_caea ViewProperties )ExtLst ()*_eac .CT_ExtensionList {return _caea ._dfgd .ExtLst };

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_ffb TextBox )SetOffsetY (offY float64 ){_acdg :=_ffb .getOff ();_ccdeb :=_ef .ToEMU (offY );_acdg .YAttr =_c .ST_Coordinate {ST_CoordinateUnqualified :&_ccdeb };};

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_cddg SlideMaster )SlideLayouts ()[]SlideLayout {_acef :=map[string ]int {};_gfd :=[]SlideLayout {};for _ ,_bded :=range _cddg ._geeg .Relationships (){_fbff :=_bg .Replace (_bded .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_fbff =_bg .Replace (_fbff ,"\u002e\u0078\u006d\u006c","",-1);if _ddde ,_gge :=_g .ParseInt (_fbff ,10,32);_gge ==nil {_acef [_bded .ID ()]=int (_ddde );};};for _ ,_dacgg :=range _cddg ._adgf .SldLayoutIdLst .SldLayoutId {if _acbe ,_efdf :=_acef [_dacgg .RIdAttr ];_efdf {_gfdd :=_cddg ._dada ._abdd [_acbe -1];_gfd =append (_gfd ,SlideLayout {_gfdd });};};return _gfd ;};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_efd *Presentation )SaveToFileAsTemplate (path string )error {return _efd .saveToFile (path ,true )};

// Index returns the placeholder index
func (_cggb PlaceHolder )Index ()uint32 {if _cggb ._ece .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_cggb ._ece .NvSpPr .NvPr .Ph .IdxAttr ;};

// Type returns the type of the slide layout.
func (_cgcf SlideLayout )Type ()_eac .ST_SlideLayoutType {return _cgcf ._fcag .TypeAttr };

// Remove removes a placeholder from a presentation.
func (_bef PlaceHolder )Remove ()error {for _gfc ,_cfe :=range _bef ._ge .CSld .SpTree .Choice {for _ ,_gdde :=range _cfe .Sp {if _gdde ==_bef ._ece {copy (_bef ._ge .CSld .SpTree .Choice [_gfc :],_bef ._ge .CSld .SpTree .Choice [_gfc +1:]);_bef ._ge .CSld .SpTree .Choice =_bef ._ge .CSld .SpTree .Choice [0:len (_bef ._ge .CSld .SpTree .Choice )-1];return nil ;};};};return _bbb .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};

// AddParagraph adds a paragraph to the text box
func (_bga TextBox )AddParagraph ()_cc .Paragraph {_dbebc :=_c .NewCT_TextParagraph ();_bga ._fffb .TxBody .P =append (_bga ._fffb .TxBody .P ,_dbebc );return _cc .MakeParagraph (_dbebc );};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_eac .CT_Shape ;GraphicFrame *_eac .CT_GraphicalObjectFrame ;Paragraph *_c .CT_TextParagraph ;Run *_c .CT_RegularTextRun ;TableInfo *TableInfo ;_db int64 ;_eg int64 ;_ec int ;_dde int ;};

// PlaceHolders returns all of the content place holders within a given slide.
func (_eaaa Slide )PlaceHolders ()[]PlaceHolder {_aegc :=[]PlaceHolder {};for _ ,_fcga :=range _eaaa ._gag .CSld .SpTree .Choice {for _ ,_cfgb :=range _fcga .Sp {if _cfgb .NvSpPr !=nil &&_cfgb .NvSpPr .NvPr !=nil &&_cfgb .NvSpPr .NvPr .Ph !=nil {_aegc =append (_aegc ,PlaceHolder {_cfgb ,_eaaa ._gag });};};};return _aegc ;};

// Text returns text from a slide as one string separated with line breaks.
func (_fbg *SlideText )Text ()string {_gdd :=_b .NewBuffer ([]byte {});for _ ,_cea :=range _fbg .Items {if _cea .Text !=""{_gdd .WriteString (_cea .Text );_gdd .WriteString ("\u000a");};};return _gdd .String ();};

// X returns the inner wrapped XML type.
func (_cgeac SlideLayout )X ()*_eac .SldLayout {return _cgeac ._fcag };func (_aag *Presentation )saveToFile (_adba string ,_fbe bool )error {_fcgf ,_adee :=_fg .Create (_adba );if _adee !=nil {return _adee ;};defer _fcgf .Close ();return _aag .save (_fcgf ,_fbe );};

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_bec *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_ggc ,_efc :=_bec .AddSlideWithLayout (l );for _ ,_gef :=range _ggc .PlaceHolders (){_gef .Clear ();switch _gef .Type (){case _eac .ST_PlaceholderTypeFtr ,_eac .ST_PlaceholderTypeDt ,_eac .ST_PlaceholderTypeSldNum :_gef .Remove ();};};return _ggc ,_efc ;};

// TextBox is a text box within a slide.
type TextBox struct{_fffb *_eac .CT_Shape };

// NotesTextViewPr returns the NotesTextViewPr property.
func (_egea ViewProperties )NotesTextViewPr ()*_eac .CT_NotesTextViewProperties {return _egea ._dfgd .NotesTextViewPr ;};

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_edb PlaceHolder )Clear (){_edb .ClearAll ();_eba :=_c .NewCT_TextParagraph ();_edb ._ece .TxBody .P =[]*_c .CT_TextParagraph {_eba };_eba .EndParaRPr =_c .NewCT_TextCharacterProperties ();_eba .EndParaRPr .LangAttr =_cg .String ("\u0065\u006e\u002dU\u0053");};

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_dada *Presentation ;_geeg _dd .Relationships ;_adgf *_eac .SldMaster ;};

// New initializes and reurns a new presentation
func New ()*Presentation {_eec :=_gdb ();_eec .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_eec .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_eec .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_eec .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_eec .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_eec .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_eec .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_eec ._ade .SldMasterIdLst =_eac .NewCT_SlideMasterIdList ();_deb :=_eac .NewSldMaster ();_deb .ClrMap .Bg1Attr =_c .ST_ColorSchemeIndexLt1 ;_deb .ClrMap .Bg2Attr =_c .ST_ColorSchemeIndexLt2 ;_deb .ClrMap .Tx1Attr =_c .ST_ColorSchemeIndexDk1 ;_deb .ClrMap .Tx2Attr =_c .ST_ColorSchemeIndexDk2 ;_deb .ClrMap .Accent1Attr =_c .ST_ColorSchemeIndexAccent1 ;_deb .ClrMap .Accent2Attr =_c .ST_ColorSchemeIndexAccent2 ;_deb .ClrMap .Accent3Attr =_c .ST_ColorSchemeIndexAccent3 ;_deb .ClrMap .Accent4Attr =_c .ST_ColorSchemeIndexAccent4 ;_deb .ClrMap .Accent5Attr =_c .ST_ColorSchemeIndexAccent5 ;_deb .ClrMap .Accent6Attr =_c .ST_ColorSchemeIndexAccent6 ;_deb .ClrMap .HlinkAttr =_c .ST_ColorSchemeIndexHlink ;_deb .ClrMap .FolHlinkAttr =_c .ST_ColorSchemeIndexFolHlink ;_eec ._fdg =append (_eec ._fdg ,_deb );_ccg :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .SlideMasterType ,1);_eec .ContentTypes .AddOverride (_ccg ,_cg .SlideMasterContentType );_fbf :=_eec ._ace .AddAutoRelationship (_cg .DocTypePresentation ,_cg .OfficeDocumentType ,1,_cg .SlideMasterType );_beg :=_eac .NewCT_SlideMasterIdListEntry ();_beg .IdAttr =_cg .Uint32 (2147483648);_beg .RIdAttr =_fbf .ID ();_eec ._ade .SldMasterIdLst .SldMasterId =append (_eec ._ade .SldMasterIdLst .SldMasterId ,_beg );_bea :=_dd .NewRelationships ();_eec ._agd =append (_eec ._agd ,_bea );_cbed :=_eac .NewSldLayout ();_acd :=_bea .AddAutoRelationship (_cg .DocTypePresentation ,_cg .SlideMasterType ,1,_cg .SlideLayoutType );_ebdc :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .SlideLayoutType ,1);_eec .ContentTypes .AddOverride (_ebdc ,_cg .SlideLayoutContentType );_bea .AddAutoRelationship (_cg .DocTypePresentation ,_cg .SlideMasterType ,1,_cg .ThemeType );_eec ._abdd =append (_eec ._abdd ,_cbed );_deb .SldLayoutIdLst =_eac .NewCT_SlideLayoutIdList ();_gfb :=_eac .NewCT_SlideLayoutIdListEntry ();_gfb .IdAttr =_cg .Uint32 (2147483649);_gfb .RIdAttr =_acd .ID ();_deb .SldLayoutIdLst .SldLayoutId =append (_deb .SldLayoutIdLst .SldLayoutId ,_gfb );_eeb :=_dd .NewRelationships ();_eec ._fcg =append (_eec ._fcg ,_eeb );_eeb .AddAutoRelationship (_cg .DocTypePresentation ,_cg .SlideType ,1,_cg .SlideMasterType );_eec ._ade .NotesSz .CxAttr =6858000;_eec ._ade .NotesSz .CyAttr =9144000;_egda :=_c .NewTheme ();_egda .NameAttr =_cg .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_egda .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_egda .ThemeElements .ClrScheme .Dk1 .SysClr =_c .NewCT_SystemColor ();_egda .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_cg .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_egda .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_c .ST_SystemColorValWindowText ;_egda .ThemeElements .ClrScheme .Lt1 .SysClr =_c .NewCT_SystemColor ();_egda .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_cg .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_egda .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_c .ST_SystemColorValWindow ;_egda .ThemeElements .ClrScheme .Dk2 .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_egda .ThemeElements .ClrScheme .Lt2 .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_egda .ThemeElements .ClrScheme .Accent1 .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_egda .ThemeElements .ClrScheme .Accent2 .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_egda .ThemeElements .ClrScheme .Accent3 .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_egda .ThemeElements .ClrScheme .Accent4 .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_egda .ThemeElements .ClrScheme .Accent5 .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_egda .ThemeElements .ClrScheme .Accent6 .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_egda .ThemeElements .ClrScheme .Hlink .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_egda .ThemeElements .ClrScheme .FolHlink .SrgbClr =_c .NewCT_SRgbColor ();_egda .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_egda .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_egda .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_egda .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_egda .ThemeElements .FmtScheme .NameAttr =_cg .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_ggd :=_c .NewEG_FillProperties ();_egda .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_egda .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ggd );_ggd .SolidFill =&_c .CT_SolidColorFillProperties {SchemeClr :&_c .CT_SchemeColor {ValAttr :_c .ST_SchemeColorValPhClr }};_ggd =_c .NewEG_FillProperties ();_egda .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_egda .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ggd );_egda .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_egda .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ggd );_ggd .GradFill =&_c .CT_GradientFillProperties {RotWithShapeAttr :_cg .Bool (true ),GsLst :&_c .CT_GradientStopList {},Lin :&_c .CT_LinearShadeProperties {}};_ggd .GradFill .Lin .AngAttr =_cg .Int32 (5400000);_ggd .GradFill .Lin .ScaledAttr =_cg .Bool (false );_efb :=_c .NewCT_GradientStop ();_efb .PosAttr .ST_PositiveFixedPercentageDecimal =_cg .Int32 (0);_efb .SchemeClr =&_c .CT_SchemeColor {ValAttr :_c .ST_SchemeColorValPhClr };_ggd .GradFill .GsLst .Gs =append (_ggd .GradFill .GsLst .Gs ,_efb );_efb =_c .NewCT_GradientStop ();_efb .PosAttr .ST_PositiveFixedPercentageDecimal =_cg .Int32 (50000);_efb .SchemeClr =&_c .CT_SchemeColor {ValAttr :_c .ST_SchemeColorValPhClr };_ggd .GradFill .GsLst .Gs =append (_ggd .GradFill .GsLst .Gs ,_efb );_egda .ThemeElements .FmtScheme .LnStyleLst =_c .NewCT_LineStyleList ();for _cbg :=0;_cbg < 3;_cbg ++{_edc :=_c .NewCT_LineProperties ();_edc .WAttr =_cg .Int32 (int32 (6350*(_cbg +1)));_edc .CapAttr =_c .ST_LineCapFlat ;_edc .CmpdAttr =_c .ST_CompoundLineSng ;_edc .AlgnAttr =_c .ST_PenAlignmentCtr ;_egda .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_egda .ThemeElements .FmtScheme .LnStyleLst .Ln ,_edc );};_egda .ThemeElements .FmtScheme .EffectStyleLst =_c .NewCT_EffectStyleList ();for _bcdd :=0;_bcdd < 3;_bcdd ++{_fde :=_c .NewCT_EffectStyleItem ();_fde .EffectLst =_c .NewCT_EffectList ();_egda .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_egda .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_fde );};_bfa :=_c .NewEG_FillProperties ();_bfa .SolidFill =&_c .CT_SolidColorFillProperties {SchemeClr :&_c .CT_SchemeColor {ValAttr :_c .ST_SchemeColorValPhClr }};_egda .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_egda .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_bfa );_egda .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_egda .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_bfa );_egda .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_egda .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ggd );_eec ._gg =append (_eec ._gg ,_egda );_daf :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .ThemeType ,1);_eec .ContentTypes .AddOverride (_daf ,_cg .ThemeContentType );_eec ._ace .AddAutoRelationship (_cg .DocTypePresentation ,_cg .OfficeDocumentType ,1,_cg .ThemeType );_dge :=_dd .NewRelationships ();_eec ._dac =append (_eec ._dac ,_dge );return _eec ;};

// NormalViewPr returns the NormalViewPr property.
func (_bffd ViewProperties )NormalViewPr ()*_eac .CT_NormalViewProperties {return _bffd ._dfgd .NormalViewPr ;};

// AddTextBox adds an empty textbox to a slide.
func (_bbe Slide )AddTextBox ()TextBox {_aec :=_eac .NewCT_GroupShapeChoice ();_bbe ._gag .CSld .SpTree .Choice =append (_bbe ._gag .CSld .SpTree .Choice ,_aec );_eede :=_eac .NewCT_Shape ();_aec .Sp =append (_aec .Sp ,_eede );_eede .SpPr =_c .NewCT_ShapeProperties ();_eede .SpPr .Xfrm =_c .NewCT_Transform2D ();_eede .SpPr .PrstGeom =_c .NewCT_PresetGeometry2D ();_eede .SpPr .PrstGeom .PrstAttr =_c .ST_ShapeTypeRect ;_eede .NvSpPr =_eac .NewCT_ShapeNonVisual ();_eede .NvSpPr .CNvSpPr =_c .NewCT_NonVisualDrawingShapeProps ();_egb :=true ;_eede .NvSpPr .CNvSpPr .TxBoxAttr =&_egb ;_eede .TxBody =_c .NewCT_TextBody ();_eede .TxBody .BodyPr =_c .NewCT_TextBodyProperties ();_eede .TxBody .BodyPr .WrapAttr =_c .ST_TextWrappingTypeSquare ;_eede .TxBody .BodyPr .SpAutoFit =_c .NewCT_TextShapeAutofit ();_fcaa :=TextBox {_eede };_fcaa .Properties ().SetWidth (3*_ef .Inch );_fcaa .Properties ().SetHeight (1*_ef .Inch );_fcaa .Properties ().SetPosition (0,0);return _fcaa ;};

// ExtractText returns text from a presentation as a PresentationText object.
func (_gca *Presentation )ExtractText ()*PresentationText {_ga :=[]*SlideText {};for _ ,_eab :=range _gca .Slides (){_bc :=_eab .ExtractText ();if _bc !=nil {_ga =append (_ga ,_bc );};};return &PresentationText {Slides :_ga };};

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_cgab Slide )AddImageToRels (img _dd .ImageRef )string {_bca :=0;for _fafd ,_eecc :=range _cgab ._cbea .Images {if _eecc ==img {_bca =_fafd +1;break ;};};var _bbee string ;for _bfc ,_eff :=range _cgab ._cbea .Slides (){if _eff ._gag ==_cgab ._gag {_bgd :=_a .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_bca ,img .Format ());_faff :=_cgab ._cbea ._gafc [_bfc ].AddRelationship (_bgd ,_cg .ImageType );_bbee =_faff .ID ();};};return _bbee ;};

// Paragraphs returns the paragraphs defined in the placeholder.
func (_da PlaceHolder )Paragraphs ()[]_cc .Paragraph {_dae :=[]_cc .Paragraph {};for _ ,_gda :=range _da ._ece .TxBody .P {_dae =append (_dae ,_cc .MakeParagraph (_gda ));};return _dae ;};

// Properties returns the properties of the TextBox.
func (_dfd TextBox )Properties ()_cc .ShapeProperties {if _dfd ._fffb .SpPr ==nil {_dfd ._fffb .SpPr =_c .NewCT_ShapeProperties ();};return _cc .MakeShapeProperties (_dfd ._fffb .SpPr );};

// Type returns the placeholder type
func (_baa PlaceHolder )Type ()_eac .ST_PlaceholderType {return _baa ._ece .NvSpPr .NvPr .Ph .TypeAttr };func (_cbgg *Presentation )Validate ()error {if _ecbf :=_cbgg ._ade .Validate ();_ecbf !=nil {return _ecbf ;};for _bgea ,_efdb :=range _cbgg .Slides (){if _gab :=_efdb .ValidateWithPath (_a .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_bgea ));_gab !=nil {return _gab ;};};for _bbbe ,_fcf :=range _cbgg ._fdg {if _gcab :=_fcf .ValidateWithPath (_a .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_bbbe ));_gcab !=nil {return _gcab ;};};for _gbaa ,_acgd :=range _cbgg ._abdd {if _bbcb :=_acgd .ValidateWithPath (_a .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_gbaa ));_bbcb !=nil {return _bbcb ;};};return nil ;};

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_dbea Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_dafge :=range _dbea ._gag .CSld .SpTree .Choice {for _ ,_cdgg :=range _dafge .Sp {if _cdgg .NvSpPr !=nil &&_cdgg .NvSpPr .NvPr !=nil &&_cdgg .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_cdgg .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_cdgg .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_cdgg .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_cdgg ,_dbea ._gag },nil ;};};};};return PlaceHolder {},_bbb .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// LastViewAttr returns the LastViewAttr property.
func (_dddb ViewProperties )LastViewAttr ()_eac .ST_ViewType {return _dddb ._dfgd .LastViewAttr };

// WebPr returns the WebPr property.
func (_gddef PresentationProperties )WebPr ()*_eac .CT_WebProperties {return _gddef ._bbc .WebPr };var _dbd =false ;

// Slides returns the slides in the presentation.
func (_ccde *Presentation )Slides ()[]Slide {_bfgde :=[]Slide {};for _fabf ,_adeb :=range _ccde ._eeda {_bfgde =append (_bfgde ,Slide {_ccde ._ade .SldIdLst .SldId [_fabf ],_adeb ,_ccde });};return _bfgde ;};

// ShowCommentsAttr returns the WebPr property.
func (_ddae ViewProperties )ShowCommentsAttr ()*bool {return _ddae ._dfgd .ShowCommentsAttr };

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_c .CT_Table ;Row *_c .CT_TableRow ;Cell *_c .CT_TableCell ;RowIndex int ;ColIndex int ;};

// SaveToFile writes the Presentation out to a file.
func (_cbee *Presentation )SaveToFile (path string )error {return _cbee .saveToFile (path ,false )};

// GetLayoutByName retrieves a slide layout given a layout name.
func (_ada *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_cdaff :=range _ada ._abdd {if _cdaff .CSld .NameAttr !=nil &&name ==*_cdaff .CSld .NameAttr {return SlideLayout {_cdaff },nil ;};};return SlideLayout {},_bbb .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_bcbf Slide )ValidateWithPath (path string )error {if _dfg :=_bcbf ._gag .ValidateWithPath (path );_dfg !=nil {return _dfg ;};for _ ,_gadb :=range _bcbf ._gag .CSld .SpTree .Choice {for _ ,_gcabd :=range _gadb .Sp {if _gcabd .TxBody !=nil {if len (_gcabd .TxBody .P )==0{return _bbb .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};type sort2d []*TextItem ;

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_bfdg TextBox )SetOffsetX (offX float64 ){_dfga :=_bfdg .getOff ();_eafg :=_ef .ToEMU (offX );_dfga .XAttr =_c .ST_Coordinate {ST_CoordinateUnqualified :&_eafg };};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_dacg *Presentation )SaveAsTemplate (w _ea .Writer )error {return _dacg .save (w ,true )};

// Slide represents a slide of a presentation.
type Slide struct{_ffgg *_eac .CT_SlideIdListEntry ;_gag *_eac .Sld ;_cbea *Presentation ;};

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_ece *_eac .CT_Shape ;_ge *_eac .Sld ;};

// GridSpacing returns the GridSpacing property.
func (_efde ViewProperties )GridSpacing ()*_c .CT_PositiveSize2D {return _efde ._dfgd .GridSpacing };

// ExtLst returns the ExtLst property.
func (_fba PresentationProperties )ExtLst ()*_eac .CT_ExtensionList {return _fba ._bbc .ExtLst };

// X returns the inner wrapped XML type.
func (_bfcb ViewProperties )X ()*_eac .ViewPr {return _bfcb ._dfgd };func (_fdf sort2d )Swap (i ,j int ){_fdf [i ],_fdf [j ]=_fdf [j ],_fdf [i ]};

// AddTable adds an empty table to a slide.
func (_gcfd Slide )AddTable ()*_dd .Table {_aaba :=_eac .NewCT_GroupShapeChoice ();_gcfd ._gag .CSld .SpTree .Choice =append (_gcfd ._gag .CSld .SpTree .Choice ,_aaba );_dfcb :=_eac .NewCT_GraphicalObjectFrame ();_aaba .GraphicFrame =append (_aaba .GraphicFrame ,_dfcb );_dfcb .Xfrm .Off =_c .NewCT_Point2D ();_gdca :=int64 (1);_dfcb .Xfrm .Off .XAttr =_c .ST_Coordinate {ST_CoordinateUnqualified :&_gdca };_dfcb .Xfrm .Off .YAttr =_c .ST_Coordinate {ST_CoordinateUnqualified :&_gdca };_afc :=_dfcb .Graphic .CT_GraphicalObject .GraphicData ;_afc .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_daaa :=_dd .NewTableWithXfrm (_dfcb .Xfrm );_afc .Any =append (_afc .Any ,_daaa .X ());return _daaa ;};

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_cead *Presentation )Close ()error {if _cead .TmpPath !=""{return _ad .RemoveAll (_cead .TmpPath );};return nil ;};

// AddSlide adds a new slide to the presentation.
func (_ggg *Presentation )AddSlide ()Slide {_fee :=_eac .NewCT_SlideIdListEntry ();_fee .IdAttr =_ggg .nextSlideID ();_ggg ._ade .SldIdLst .SldId =append (_ggg ._ade .SldIdLst .SldId ,_fee );_ccdd :=_eac .NewSld ();_ccdd .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_ccdd .CSld .SpTree .GrpSpPr .Xfrm =_c .NewCT_GroupTransform2D ();_ccdd .CSld .SpTree .GrpSpPr .Xfrm .Off =_c .NewCT_Point2D ();_ccdd .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_cg .Int64 (0);_ccdd .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_cg .Int64 (0);_ccdd .CSld .SpTree .GrpSpPr .Xfrm .Ext =_c .NewCT_PositiveSize2D ();_ccdd .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_ef .Point );_ccdd .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_ef .Point );_ccdd .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_ccdd .CSld .SpTree .GrpSpPr .Xfrm .Off ;_ccdd .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_ccdd .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_ggg ._eeda =append (_ggg ._eeda ,_ccdd );_fef :=_ggg ._ace .AddAutoRelationship (_cg .DocTypePresentation ,_cg .OfficeDocumentType ,len (_ggg ._eeda ),_cg .SlideType );_fee .RIdAttr =_fef .ID ();_fda :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .SlideType ,len (_ggg ._eeda ));_ggg .ContentTypes .AddOverride (_fda ,_cg .SlideContentType );_bgb :=_dd .NewRelationships ();_ggg ._gafc =append (_ggg ._gafc ,_bgb );_bgb .AddAutoRelationship (_cg .DocTypePresentation ,_cg .SlideType ,len (_ggg ._abdd ),_cg .SlideLayoutType );return Slide {_fee ,_ccdd ,_ggg };};

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_cga PlaceHolder )ClearAll (){_cga ._ece .SpPr =_c .NewCT_ShapeProperties ();_cga ._ece .TxBody =_c .NewCT_TextBody ();_cga ._ece .TxBody .LstStyle =_c .NewCT_TextListStyle ();};func (_gcbef *Presentation )onNewRelationship (_adf *_gb .DecodeMap ,_gbg ,_bfbf string ,_beb []*_fa .File ,_cdaf *_gc .Relationship ,_edgc _gb .Target )error {_baae :=_cg .DocTypePresentation ;switch _bfbf {case _cg .OfficeDocumentType :_gcbef ._ade =_eac .NewPresentation ();_adf .AddTarget (_gbg ,_gcbef ._ade ,_bfbf ,0);_adf .AddTarget (_gb .RelationsPathFor (_gbg ),_gcbef ._ace .X (),_bfbf ,0);_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,0);case _cg .CorePropertiesType :_adf .AddTarget (_gbg ,_gcbef .CoreProperties .X (),_bfbf ,0);_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,0);case _cg .CustomPropertiesType :_adf .AddTarget (_gbg ,_gcbef .CustomProperties .X (),_bfbf ,0);_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,0);case _cg .PresentationPropertiesType :_adf .AddTarget (_gbg ,_gcbef ._bcd .X (),_bfbf ,0);_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,0);case _cg .ViewPropertiesType :_adf .AddTarget (_gbg ,_gcbef ._bd .X (),_bfbf ,0);_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,0);case _cg .TableStylesType :_adf .AddTarget (_gbg ,_gcbef ._ebf .X (),_bfbf ,0);_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,0);case _cg .HyperLinkType :_cef :=_c .NewCT_Hyperlink ();_caf :=uint32 (len (_gcbef ._fgg ));_adf .AddTarget (_gbg ,_cef ,_bfbf ,_caf );_gcbef ._fgg =append (_gcbef ._fgg ,_cef );case _cg .CustomXMLType :_ffcg :=&_cg .XSDAny {};_ddef :=uint32 (len (_gcbef ._cega ));_adf .AddTarget (_gbg ,_ffcg ,_bfbf ,_ddef );_gcbef ._cega =append (_gcbef ._cega ,_ffcg );_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,len (_gcbef ._cega ));case _cg .ChartType :_afea :=_fe .NewChartSpace ();_dbb :=uint32 (len (_gcbef ._bae ));_adf .AddTarget (_gbg ,_afea ,_bfbf ,_dbb );_gcbef ._bae =append (_gcbef ._bae ,_afea );_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,len (_gcbef ._bae ));case _cg .HandoutMasterType :_cbf :=_eac .NewHandoutMaster ();_gggg :=uint32 (len (_gcbef ._cfb ));_adf .AddTarget (_gbg ,_cbf ,_bfbf ,_gggg );_gcbef ._cfb =append (_gcbef ._cfb ,_cbf );_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,len (_gcbef ._cfb ));case _cg .NotesMasterType :_efa :=_eac .NewNotesMaster ();_ffeg :=uint32 (len (_gcbef ._acg ));_adf .AddTarget (_gbg ,_efa ,_bfbf ,_ffeg );_gcbef ._acg =append (_gcbef ._acg ,_efa );_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,len (_gcbef ._acg ));case _cg .ExtendedPropertiesType :_adf .AddTarget (_gbg ,_gcbef .AppProperties .X (),_bfbf ,0);_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,0);case _cg .SlideType :_acc :=_eac .NewSld ();_gcbef ._eeda =append (_gcbef ._eeda ,_acc );_adf .AddTarget (_gbg ,_acc ,_bfbf ,uint32 (len (_gcbef ._eeda )));_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,len (_gcbef ._eeda ));_gddefd :=_dd .NewRelationships ();_adf .AddTarget (_gb .RelationsPathFor (_gbg ),_gddefd .X (),_bfbf ,0);_gcbef ._gafc =append (_gcbef ._gafc ,_gddefd );case _cg .SlideMasterType :_affd :=_eac .NewSldMaster ();if !_adf .AddTarget (_gbg ,_affd ,_bfbf ,uint32 (len (_gcbef ._fdg )+1)){return nil ;};_gcbef ._fdg =append (_gcbef ._fdg ,_affd );_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,len (_gcbef ._fdg ));_ebac :=_dd .NewRelationships ();_adf .AddTarget (_gb .RelationsPathFor (_gbg ),_ebac .X (),_bfbf ,0);_gcbef ._agd =append (_gcbef ._agd ,_ebac );case _cg .SlideLayoutType :_ffgfd :=_eac .NewSldLayout ();if !_adf .AddTarget (_gbg ,_ffgfd ,_bfbf ,uint32 (len (_gcbef ._abdd )+1)){return nil ;};_gcbef ._abdd =append (_gcbef ._abdd ,_ffgfd );_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,len (_gcbef ._abdd ));_efcb :=_dd .NewRelationships ();_adf .AddTarget (_gb .RelationsPathFor (_gbg ),_efcb .X (),_bfbf ,0);_gcbef ._fcg =append (_gcbef ._fcg ,_efcb );case _cg .ThumbnailType :for _ddd ,_eaae :=range _beb {if _eaae ==nil {continue ;};if _eaae .Name ==_gbg {_dcc ,_agf :=_eaae .Open ();if _agf !=nil {return _a .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_agf );};_gcbef .Thumbnail ,_ ,_agf =_fb .Decode (_dcc );_dcc .Close ();if _agf !=nil {return _a .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_agf );};_beb [_ddd ]=nil ;};};case _cg .ThemeType :_bcc :=_c .NewTheme ();if !_adf .AddTarget (_gbg ,_bcc ,_bfbf ,uint32 (len (_gcbef ._gg )+1)){return nil ;};_gcbef ._gg =append (_gcbef ._gg ,_bcc );_cdaf .TargetAttr =_cg .RelativeFilename (_baae ,_edgc .Typ ,_bfbf ,len (_gcbef ._gg ));_dafg :=_dd .NewRelationships ();_adf .AddTarget (_gb .RelationsPathFor (_gbg ),_dafg .X (),_bfbf ,0);_gcbef ._dac =append (_gcbef ._dac ,_dafg );case _cg .ImageType :_gbg =_bb .Clean (_gbg );if _ega ,_gcf :=_gcbef ._dbe [_gbg ];_gcf {_cdaf .TargetAttr =_ega ;return nil ;};_ccda :="";for _abb ,_fff :=range _beb {if _fff ==nil {continue ;};if _fff .Name ==_gbg {_afbb ,_adfb :=_gb .ExtractToDiskTmp (_fff ,_gcbef .TmpPath );if _adfb !=nil {return _adfb ;};_acgb ,_adfb :=_dd .ImageFromStorage (_afbb );if _adfb !=nil {return _adfb ;};_ccda =_acgb .Format ;_bggac :=_dd .MakeImageRef (_acgb ,&_gcbef .DocBase ,_gcbef ._ace );_gcbef .Images =append (_gcbef .Images ,_bggac );_beb [_abb ]=nil ;_adf .RecordIndex (_gbg ,len (_gcbef .Images ));break ;};};_cfa :=_adf .IndexFor (_gbg );_cdaf .TargetAttr =_cg .RelativeImageFilename (_baae ,_edgc .Typ ,_bfbf ,_cfa ,_ccda );_gcbef ._dbe [_gbg ]=_cdaf .TargetAttr ;default:_cg .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_bfbf ,_gbg );};return nil ;};

// SlideMasters returns the slide masters defined in the presentation.
func (_dece *Presentation )SlideMasters ()[]SlideMaster {_aac :=[]SlideMaster {};for _gadf ,_dee :=range _dece ._fdg {_aac =append (_aac ,SlideMaster {_dece ,_dece ._agd [_gadf ],_dee });};return _aac ;};

// Text returns text from a presentation as one string separated with line breaks.
func (_feg *PresentationText )Text ()string {_bab :=_b .NewBuffer ([]byte {});for _ ,_ccd :=range _feg .Slides {_bab .WriteString (_ccd .Text ());};return _bab .String ();};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_dfa ,_cb :=_fg .Open (filename );if _cb !=nil {return nil ,_a .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_cb );};defer _dfa .Close ();_dec ,_cb :=_fg .Stat (filename );if _cb !=nil {return nil ,_a .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_cb );};_ =_dec ;return Read (_dfa ,_dec .Size ());};

// Properties returns the properties of the TextBox.
func (_gbea Image )Properties ()_cc .ShapeProperties {if _gbea ._eed .SpPr ==nil {_gbea ._eed .SpPr =_c .NewCT_ShapeProperties ();};return _cc .MakeShapeProperties (_gbea ._eed .SpPr );};

// ShowPr returns the ShowPr property.
func (_dgd PresentationProperties )ShowPr ()*_eac .CT_ShowProperties {return _dgd ._bbc .ShowPr };

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_bbc :_eac .NewPresentationPr ()};};

// NotesViewPr returns the NotesViewPr property.
func (_fcda ViewProperties )NotesViewPr ()*_eac .CT_NotesViewProperties {return _fcda ._dfgd .NotesViewPr ;};func _gdb ()*Presentation {_cfdg :=&Presentation {_ade :_eac .NewPresentation ()};_cfdg ._ade .SldIdLst =_eac .NewCT_SlideIdList ();_cfdg ._ade .ConformanceAttr =_ff .ST_ConformanceClassTransitional ;_cfdg .AppProperties =_dd .NewAppProperties ();_cfdg .CoreProperties =_dd .NewCoreProperties ();_cfdg ._ebf =_dd .NewTableStyles ();_cfdg .ContentTypes =_dd .NewContentTypes ();_cfdg .Rels =_dd .NewRelationships ();_cfdg ._ace =_dd .NewRelationships ();_cfdg ._bcd =NewPresentationProperties ();_cfdg ._bd =NewViewProperties ();_cfdg ._dbe =map[string ]string {};return _cfdg ;};func (_be sort2d )Less (i ,j int )bool {_bge ,_efe :=_be [i ],_be [j ];_fac ,_fbd ,_cf ,_cgg ,_bfd ,_cda ,_gbd ,_ecb :=_bge ._db ,_efe ._db ,_bge ._eg ,_efe ._eg ,_bge ._ec ,_efe ._ec ,_bge ._dde ,_efe ._dde ;if _cf ==_cgg {if _fac ==_fbd {if _bfd ==_cda {return _gbd <=_ecb ;};return _bfd < _cda ;};return _fac < _fbd ;};return _cf < _cgg ;};

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_bbg *Presentation )GetTableStyleById (id string )*_c .CT_TableStyle {_cbb :=_bbg ._ebf .TblStyle ();for _ ,_faa :=range _cbb {if _faa .StyleIdAttr ==id {return _faa ;};};return nil ;};

// PrnPr returns the PrnPr property.
func (_fbdd PresentationProperties )PrnPr ()*_eac .CT_PrintProperties {return _fbdd ._bbc .PrnPr };

// ExtractText returns text from a slide as a SlideText object.
func (_af *Slide )ExtractText ()*SlideText {_gaf :=_af ._cbea ;_ab :=[]*TextItem {};for _ ,_ccb :=range _af ._gag .CSld .SpTree .Choice {for _ ,_eae :=range _ccb .Sp {_ab =append (_ab ,_gf (_gaf ,_eae ,nil ,nil ,_eae .SpPr .Xfrm ,0,_eae .TxBody .P )...);};for _ ,_ce :=range _ccb .GraphicFrame {if _ce !=nil &&_ce .Graphic !=nil &&_ce .Graphic .GraphicData !=nil {_eacg :=_ce .Xfrm ;for _ ,_eb :=range _ce .Graphic .GraphicData .Any {if _abd ,_ffc :=_eb .(*_c .Tbl );_ffc {_ceg :=&_abd .CT_Table ;_dda :=0;for _df ,_gaa :=range _abd .Tr {for _ac ,_cd :=range _gaa .Tc {_ded :=&TableInfo {Table :_ceg ,Row :_gaa ,Cell :_cd ,RowIndex :_df ,ColIndex :_ac };_ab =append (_ab ,_gf (_gaf ,nil ,_ce ,_ded ,_eacg ,_dda ,_cd .TxBody .P )...);_dda ++;};};};};};};};_ee .Sort (sort2d (_ab ));return &SlideText {Items :_ab };};

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_dfgd :_eac .NewViewPr ()}};

// X returns the inner wrapped XML type.
func (_cbe PresentationProperties )X ()*_eac .PresentationPr {return _cbe ._bbc };func (_bde *Presentation )save (_aeb _ea .Writer ,_dgda bool )error {const _dga ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _agda :=_bde ._ade .Validate ();_agda !=nil {_d .Printf ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_agda );};if !_bgg .GetLicenseKey ().IsLicensed ()&&!_dbd {_a .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_a .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _bbb .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_bde ._fbb )==0{_bgga ,_dbeb :=_bgg .GenRefId ("\u0070\u0077");if _dbeb !=nil {_cg .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_dbeb );return _dbeb ;};_bde ._fbb =_bgga ;};if _fab :=_bgg .Track (_bde ._fbb ,_dga );_fab !=nil {_a .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_fab );return _fab ;};if _dgda {_bde .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_bde .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_bde .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_bde .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_ecaf :=_cg .DocTypePresentation ;_agb :=_fa .NewWriter (_aeb );defer _agb .Close ();if _ggga :=_gb .MarshalXML (_agb ,_cg .BaseRelsFilename ,_bde .Rels .X ());_ggga !=nil {return _ggga ;};if _ffcb :=_gb .MarshalXMLByType (_agb ,_ecaf ,_cg .ExtendedPropertiesType ,_bde .AppProperties .X ());_ffcb !=nil {return _ffcb ;};if _fdd :=_gb .MarshalXMLByType (_agb ,_ecaf ,_cg .CorePropertiesType ,_bde .CoreProperties .X ());_fdd !=nil {return _fdd ;};if _ffa :=_gb .MarshalXMLByType (_agb ,_ecaf ,_cg .PresentationPropertiesType ,_bde ._bcd .X ());_ffa !=nil {return _ffa ;};if _fefg :=_gb .MarshalXMLByType (_agb ,_ecaf ,_cg .ViewPropertiesType ,_bde ._bd .X ());_fefg !=nil {return _fefg ;};if _bag :=_gb .MarshalXMLByType (_agb ,_ecaf ,_cg .TableStylesType ,_bde ._ebf .X ());_bag !=nil {return _bag ;};if _bde .CustomProperties .X ()!=nil {if _deg :=_gb .MarshalXMLByType (_agb ,_ecaf ,_cg .CustomPropertiesType ,_bde .CustomProperties .X ());_deg !=nil {return _deg ;};};if _bde .Thumbnail !=nil {_fbfg ,_efef :=_agb .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _efef !=nil {return _efef ;};if _bff :=_f .Encode (_fbfg ,_bde .Thumbnail ,nil );_bff !=nil {return _bff ;};};_acb :=_cg .AbsoluteFilename (_ecaf ,_cg .OfficeDocumentType ,0);if _edbf :=_gb .MarshalXML (_agb ,_acb ,_bde ._ade );_edbf !=nil {return _edbf ;};if _adb :=_gb .MarshalXML (_agb ,_gb .RelationsPathFor (_acb ),_bde ._ace .X ());_adb !=nil {return _adb ;};for _gbdg ,_eda :=range _bde ._eeda {_begf :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .SlideType ,_gbdg +1);_gb .MarshalXML (_agb ,_begf ,_eda );if !_bde ._gafc [_gbdg ].IsEmpty (){_gcbe :=_gb .RelationsPathFor (_begf );_gb .MarshalXML (_agb ,_gcbe ,_bde ._gafc [_gbdg ].X ());};};for _faf ,_ecg :=range _bde ._fdg {_ffd :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .SlideMasterType ,_faf +1);_gb .MarshalXML (_agb ,_ffd ,_ecg );if !_bde ._agd [_faf ].IsEmpty (){_eccc :=_gb .RelationsPathFor (_ffd );_gb .MarshalXML (_agb ,_eccc ,_bde ._agd [_faf ].X ());};};for _ege ,_ggb :=range _bde ._abdd {_ebe :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .SlideLayoutType ,_ege +1);_gb .MarshalXML (_agb ,_ebe ,_ggb );if !_bde ._fcg [_ege ].IsEmpty (){_cge :=_gb .RelationsPathFor (_ebe );_gb .MarshalXML (_agb ,_cge ,_bde ._fcg [_ege ].X ());};};for _fae ,_cgd :=range _bde ._gg {_afg :=_cg .AbsoluteFilename (_cg .DocTypePresentation ,_cg .ThemeType ,_fae +1);_gb .MarshalXML (_agb ,_afg ,_cgd );if !_bde ._dac [_fae ].IsEmpty (){_daa :=_gb .RelationsPathFor (_afg );_gb .MarshalXML (_agb ,_daa ,_bde ._dac [_fae ].X ());};};for _bdec ,_ffgf :=range _bde ._bae {_afd :=_cg .AbsoluteFilename (_ecaf ,_cg .ChartType ,_bdec +1);_gb .MarshalXML (_agb ,_afd ,_ffgf );};for _ffga ,_daed :=range _bde ._cfb {_eadb :=_cg .AbsoluteFilename (_ecaf ,_cg .HandoutMasterType ,_ffga +1);_gb .MarshalXML (_agb ,_eadb ,_daed );};for _gga ,_afe :=range _bde ._acg {_afb :=_cg .AbsoluteFilename (_ecaf ,_cg .NotesMasterType ,_gga +1);_gb .MarshalXML (_agb ,_afb ,_afe );};for _bfgf ,_feca :=range _bde ._cega {_befa :=_cg .AbsoluteFilename (_ecaf ,_cg .CustomXMLType ,_bfgf +1);_gb .MarshalXML (_agb ,_befa ,_feca );};for _gad ,_ebae :=range _bde .Images {if _bfb :=_dd .AddImageToZip (_agb ,_ebae ,_gad +1,_cg .DocTypePresentation );_bfb !=nil {return _bfb ;};};_bde .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_bde .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bde .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bde .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _aea :=_gb .MarshalXML (_agb ,_cg .ContentTypesFilename ,_bde .ContentTypes .X ());_aea !=nil {return _aea ;};if _aba :=_bde .WriteExtraFiles (_agb );_aba !=nil {return _aba ;};return nil ;};

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_ae PlaceHolder )SetText (text string ){_ae .Clear ();_gee :=_c .NewEG_TextRun ();_gee .R =_c .NewCT_RegularTextRun ();_gee .R .T =text ;if len (_ae ._ece .TxBody .P )==0{_ae ._ece .TxBody .P =append (_ae ._ece .TxBody .P ,_c .NewCT_TextParagraph ());};_ae ._ece .TxBody .P [0].EG_TextRun =nil ;_ae ._ece .TxBody .P [0].EG_TextRun =append (_ae ._ece .TxBody .P [0].EG_TextRun ,_gee );};