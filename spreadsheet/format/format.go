//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_ge "bytes";_bd "fmt";_ga "github.com/unidoc/unioffice";_ba "io";_ff "math";_f "strconv";_d "strings";_g "time";);const _eca int =34;

// AddToken adds a format token to the format.
func (_bc *Format )AddToken (t FmtType ,l []byte ){if _bc ._ed {_bc ._ed =false ;return ;};switch t {case FmtTypeDecimal :_bc ._fb =true ;case FmtTypeUnderscore :_bc ._ed =true ;case FmtTypeText :_bc .Whole =append (_bc .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_bc .Whole =append (_bc .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_bc ._be =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_cfa :=range l {if _bc .IsExponential {_bc .Exponent =append (_bc .Exponent ,Token {Type :t ,Literal :_cfa });}else if !_bc ._fb {_bc .Whole =append (_bc .Whole ,Token {Type :t ,Literal :_cfa });}else {_bc .Fractional =append (_bc .Fractional ,Token {Type :t ,Literal :_cfa });};};case FmtTypeDigitOptThousands :_bc ._gd =true ;case FmtTypeFraction :_gea :=_d .Split (string (l ),"\u002f");if len (_gea )==2{_bc ._a =true ;_bc ._ee ,_ =_f .ParseInt (_gea [1],10,64);for _ ,_gf :=range _gea [1]{if _gf =='?'||_gf =='0'{_bc ._gdf ++;};};};default:_ga .Log ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_a bool ;_be bool ;_ad bool ;_gd bool ;_ed bool ;_fb bool ;_ee int64 ;_gdf int ;};func _aac (_gcf int64 ,_fdb Format )[]byte {if !_fdb .IsExponential ||len (_fdb .Exponent )==0{return nil ;};_gdbf :=_f .AppendInt (nil ,_fcb (_gcf ),10);_dba :=make ([]byte ,0,len (_gdbf )+2);_dba =append (_dba ,'E');if _gcf >=0{_dba =append (_dba ,'+');}else {_dba =append (_dba ,'-');_gcf *=-1;};_fdc :=0;_afd :for _dg :=len (_fdb .Exponent )-1;_dg >=0;_dg --{_gfa :=len (_gdbf )-1-_fdc ;_cgf :=_fdb .Exponent [_dg ];switch _cgf .Type {case FmtTypeDigit :if _gfa >=0{_dba =append (_dba ,_gdbf [_gfa ]);_fdc ++;}else {_dba =append (_dba ,'0');};case FmtTypeDigitOpt :if _gfa >=0{_dba =append (_dba ,_gdbf [_gfa ]);_fdc ++;}else {for _ea :=_dg ;_ea >=0;_ea --{_ac :=_fdb .Exponent [_ea ];if _ac .Type ==FmtTypeLiteral {_dba =append (_dba ,_ac .Literal );};};break _afd ;};case FmtTypeLiteral :_dba =append (_dba ,_cgf .Literal );default:_ga .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_cgf );};};if _fdc < len (_gdbf ){_dba =append (_dba ,_gdbf [len (_gdbf )-_fdc -1:_fdc -1]...);};_gdd (_dba [2:]);return _dba ;};const _da =1e11;type Lexer struct{_cfce Format ;_eec []Format ;};func _ece (_ebc ,_gee float64 ,_ccg Format )[]byte {if len (_ccg .Fractional )==0{return nil ;};_eg :=_f .AppendFloat (nil ,_ebc ,'f',-1,64);if len (_eg )> 2{_eg =_eg [2:];}else {_eg =nil ;};_ddf :=make ([]byte ,0,len (_eg ));_ddf =append (_ddf ,'.');_gfbf :=0;_edb :for _cdb :=0;_cdb < len (_ccg .Fractional );_cdb ++{_geb :=_cdb ;_db :=_ccg .Fractional [_cdb ];switch _db .Type {case FmtTypeDigit :if _geb < len (_eg ){_ddf =append (_ddf ,_eg [_geb ]);_gfbf ++;}else {_ddf =append (_ddf ,'0');};case FmtTypeDigitOpt :if _geb >=0{_ddf =append (_ddf ,_eg [_geb ]);_gfbf ++;}else {break _edb ;};case FmtTypeLiteral :_ddf =append (_ddf ,_db .Literal );default:_ga .Log ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_db );};};return _ddf ;};var _c =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};const _gbg int =0;const _fdbb int =-1;

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_gdb ,_ :=_f .ParseFloat (v ,64);return Number (_gdb ,f );};return String (v ,f );};const _aff int =34;const _gggf int =34;func IsNumber (data string )(_ecf bool ){_gcgc ,_bcb ,_gcd :=0,0,len (data );_fffg :=len (data );_eaa ,_gcb ,_adg :=0,0,0;_ =_gcb ;_ =_adg ;_ =_eaa ;{_gcgc =_gbg ;_eaa =0;_gcb =0;_adg =0;};{if _bcb ==_gcd {goto _gaec ;};switch _gcgc {case 0:goto _cdce ;case 1:goto _fdg ;case 2:goto _cbc ;case 3:goto _ebce ;case 4:goto _cbe ;case 5:goto _agd ;case 6:goto _aee ;case 7:goto _fdba ;};goto _cefe ;_agbe :_gcb =_bcb ;_bcb --;{_ecf =false ;};goto _fbef ;_ffd :_gcb =_bcb ;_bcb --;{_ecf =_gcb ==len (data );};goto _fbef ;_dee :_gcb =_bcb ;_bcb --;{_ecf =_gcb ==len (data );};goto _fbef ;_dbf :switch _adg {case 2:{_bcb =(_gcb )-1;_ecf =_gcb ==len (data );};case 3:{_bcb =(_gcb )-1;_ecf =false ;};};goto _fbef ;_fbef :_eaa =0;if _bcb ++;_bcb ==_gcd {goto _aef ;};_cdce :_eaa =_bcb ;switch data [_bcb ]{case 43:goto _eac ;case 45:goto _eac ;};if 48<=data [_bcb ]&&data [_bcb ]<=57{goto _fcc ;};goto _gdc ;_gdc :if _bcb ++;_bcb ==_gcd {goto _ggg ;};_fdg :goto _gdc ;_eac :if _bcb ++;_bcb ==_gcd {goto _fcae ;};_cbc :if 48<=data [_bcb ]&&data [_bcb ]<=57{goto _fcc ;};goto _gdc ;_fcc :if _bcb ++;_bcb ==_gcd {goto _dfg ;};_ebce :if data [_bcb ]==46{goto _ebb ;};if 48<=data [_bcb ]&&data [_bcb ]<=57{goto _fcc ;};goto _gdc ;_ebb :if _bcb ++;_bcb ==_gcd {goto _dab ;};_cbe :if 48<=data [_bcb ]&&data [_bcb ]<=57{goto _ecc ;};goto _gdc ;_ecc :if _bcb ++;_bcb ==_gcd {goto _adad ;};_agd :if data [_bcb ]==69{goto _efc ;};if 48<=data [_bcb ]&&data [_bcb ]<=57{goto _ecc ;};goto _gdc ;_efc :if _bcb ++;_bcb ==_gcd {goto _fac ;};_aee :switch data [_bcb ]{case 43:goto _ecgg ;case 45:goto _ecgg ;};goto _gdc ;_ecgg :_gcb =_bcb +1;_adg =3;goto _gebe ;_cga :_gcb =_bcb +1;_adg =2;goto _gebe ;_gebe :if _bcb ++;_bcb ==_gcd {goto _agdd ;};_fdba :if 48<=data [_bcb ]&&data [_bcb ]<=57{goto _cga ;};goto _gdc ;_cefe :_aef :_gcgc =0;goto _gaec ;_ggg :_gcgc =1;goto _gaec ;_fcae :_gcgc =2;goto _gaec ;_dfg :_gcgc =3;goto _gaec ;_dab :_gcgc =4;goto _gaec ;_adad :_gcgc =5;goto _gaec ;_fac :_gcgc =6;goto _gaec ;_agdd :_gcgc =7;goto _gaec ;_gaec :{};if _bcb ==_fffg {switch _gcgc {case 1:goto _agbe ;case 2:goto _agbe ;case 3:goto _ffd ;case 4:goto _agbe ;case 5:goto _dee ;case 6:goto _agbe ;case 7:goto _dbf ;};};};if _gcgc ==_fdbb {return false ;};return ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_ab :=Parse (f );if len (_ab )==1{return _bb (v ,_ab [0],false );}else if len (_ab )> 1&&v < 0{return _bb (v ,_ab [1],true );}else if len (_ab )> 2&&v ==0{return _bb (v ,_ab [2],false );};return _bb (v ,_ab [0],false );};const _fa ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";func Parse (s string )[]Format {_cgaa :=Lexer {};_cgaa .Lex (_d .NewReader (s ));_cgaa ._eec =append (_cgaa ._eec ,_cgaa ._cfce );return _cgaa ._eec ;};func _fbd (_faa []byte )[]byte {_ebdg :=len (_faa );_ebg :=false ;_bg :=false ;for _bba :=len (_faa )-1;_bba >=0;_bba --{if _faa [_bba ]=='0'&&!_bg &&!_ebg {_ebdg =_bba ;}else if _faa [_bba ]=='.'{_ebg =true ;}else {_bg =true ;};};if _ebg &&_bg {if _faa [_ebdg -1]=='.'{_ebdg --;};return _faa [0:_ebdg ];};return _faa ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _ff .Abs (v )>=_da ||_ff .Abs (v )<=_cf &&v !=0{return _gde (v );};_dad :=make ([]byte ,0,15);_dad =_f .AppendFloat (_dad ,v ,'f',-1,64);if len (_dad )> 11{_aad :=_dad [11]-'0';if _aad >=5&&_aad <=9{_dad [10]++;_dad =_dad [0:11];_dad =_gffc (_dad );};_dad =_dad [0:11];}else if len (_dad )==11{if _dad [len (_dad )-1]=='9'{_dad [len (_dad )-1]++;_dad =_gffc (_dad );};};_dad =_fbd (_dad );return string (_dad );};func _fcb (_bac int64 )int64 {if _bac < 0{return -_bac ;};return _bac ;};func (_e FmtType )String ()string {if _e >=FmtType (len (_c )-1){return _bd .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_e );};return _fa [_c [_e ]:_c [_e +1]];};const _ecd int =-1;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);const _cf =1e-10;const _ecg int =0;func (_fcbd *Lexer )nextFmt (){_fcbd ._eec =append (_fcbd ._eec ,_fcbd ._cfce );_fcbd ._cfce =Format {}};func _gdd (_fba []byte )[]byte {for _ec :=0;_ec < len (_fba )/2;_ec ++{_gfb :=len (_fba )-1-_ec ;_fba [_ec ],_fba [_gfb ]=_fba [_gfb ],_fba [_ec ];};return _fba ;};func _bb (_ae float64 ,_geg Format ,_bdc bool )string {if _geg ._ad {return NumberGeneric (_ae );};_bda :=make ([]byte ,0,20);_bae :=_ff .Signbit (_ae );_aa :=_ff .Abs (_ae );_bce :=int64 (0);_ged :=int64 (0);if _geg .IsExponential {for _aa >=10{_ged ++;_aa /=10;};for _aa < 1{_ged --;_aa *=10;};}else if _geg ._be {_aa *=100;}else if _geg ._a {if _geg ._ee ==0{_ag :=_ff .Pow (10,float64 (_geg ._gdf ));_aec ,_gfe :=1.0,1.0;_ =_aec ;for _age :=1.0;_age < _ag ;_age ++{_ ,_ca :=_ff .Modf (_aa *float64 (_age ));if _ca < _gfe {_gfe =_ca ;_aec =_age ;if _ca ==0{break ;};};};_geg ._ee =int64 (_aec );};_bce =int64 (_aa *float64 (_geg ._ee )+0.5);if len (_geg .Whole )> 0&&_bce > _geg ._ee {_bce =int64 (_aa *float64 (_geg ._ee ))%_geg ._ee ;_aa -=float64 (_bce )/float64 (_geg ._ee );}else {_aa -=float64 (_bce )/float64 (_geg ._ee );if _ff .Abs (_aa )< 1{_gff :=true ;for _ ,_de :=range _geg .Whole {if _de .Type ==FmtTypeDigitOpt {continue ;};if _de .Type ==FmtTypeLiteral &&_de .Literal ==' '{continue ;};_gff =false ;};if _gff {_geg .Whole =nil ;};};};};_abe :=1;for _ ,_cac :=range _geg .Fractional {if _cac .Type ==FmtTypeDigit ||_cac .Type ==FmtTypeDigitOpt {_abe ++;};};_aa +=5*_ff .Pow10 (-_abe );_gg ,_fd :=_ff .Modf (_aa );_bda =append (_bda ,_gfeb (_gg ,_ae ,_geg )...);_bda =append (_bda ,_ece (_fd ,_ae ,_geg )...);_bda =append (_bda ,_aac (_ged ,_geg )...);if _geg ._a {_bda =_f .AppendInt (_bda ,_bce ,10);_bda =append (_bda ,'/');_bda =_f .AppendInt (_bda ,_geg ._ee ,10);};if !_bdc &&_bae {return "\u002d"+string (_bda );};return string (_bda );};func (_fg *Lexer )Lex (r _ba .Reader ){_fbg ,_gcfb ,_dbde :=0,0,0;_ebe :=-1;_afde ,_bge ,_fcbb :=0,0,0;_ =_bge ;_ =_fcbb ;_ddd :=1;_ =_ddd ;_bfg :=make ([]byte ,4096);_fce :=false ;for !_fce {_cgg :=0;if _afde > 0{_cgg =_gcfb -_afde ;};_gcfb =0;_cccb ,_bag :=r .Read (_bfg [_cgg :]);if _cccb ==0||_bag !=nil {_fce =true ;};_dbde =_cccb +_cgg ;if _dbde < len (_bfg ){_ebe =_dbde ;};{_fbg =_aff ;_afde =0;_bge =0;_fcbb =0;};{if _gcfb ==_dbde {goto _bagc ;};switch _fbg {case 34:goto _aga ;case 35:goto _cfgg ;case 0:goto _aecg ;case 36:goto _dddb ;case 37:goto _aeda ;case 1:goto _agbg ;case 2:goto _eaeb ;case 38:goto _gfbd ;case 3:goto _dda ;case 4:goto _egc ;case 39:goto _agba ;case 5:goto _gga ;case 6:goto _dgc ;case 7:goto _bcea ;case 8:goto _fcac ;case 40:goto _gbgd ;case 9:goto _agef ;case 41:goto _abaf ;case 10:goto _fec ;case 42:goto _eeg ;case 11:goto _dgg ;case 43:goto _cge ;case 44:goto _acg ;case 45:goto _aefgb ;case 12:goto _bef ;case 46:goto _bcf ;case 13:goto _efbe ;case 14:goto _efcb ;case 15:goto _gcc ;case 16:goto _facb ;case 47:goto _cfe ;case 17:goto _fdd ;case 48:goto _def ;case 18:goto _gcbf ;case 19:goto _baf ;case 20:goto _cda ;case 49:goto _fde ;case 50:goto _ebcd ;case 21:goto _afdg ;case 22:goto _ddb ;case 23:goto _dea ;case 24:goto _gaf ;case 25:goto _dacf ;case 51:goto _eddd ;case 26:goto _eda ;case 52:goto _dfgf ;case 53:goto _feae ;case 54:goto _afag ;case 55:goto _eea ;case 56:goto _bdf ;case 57:goto _eee ;case 27:goto _eegf ;case 28:goto _dggg ;case 29:goto _gfd ;case 30:goto _decg ;case 31:goto _fagb ;case 58:goto _egfa ;case 32:goto _gbgf ;case 59:goto _aag ;case 33:goto _gfdg ;case 60:goto _cce ;case 61:goto _gacd ;case 62:goto _dacc ;};goto _fge ;_efb :switch _fcbb {case 2:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypeDigit ,nil );};case 3:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_gcfb =(_bge )-1;};case 8:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypePercent ,nil );};case 13:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypeFraction ,_bfg [_afde :_bge ]);};case 14:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypeDate ,_bfg [_afde :_bge ]);};case 15:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypeTime ,_bfg [_afde :_bge ]);};case 16:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypeTime ,_bfg [_afde :_bge ]);};case 18:{_gcfb =(_bge )-1;};case 20:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypeLiteral ,_bfg [_afde :_bge ]);};case 21:{_gcfb =(_bge )-1;_fg ._cfce .AddToken (FmtTypeLiteral ,_bfg [_afde +1:_bge -1]);};};goto _ggd ;_fag :_gcfb =(_bge )-1;{_fg ._cfce .AddToken (FmtTypeFraction ,_bfg [_afde :_bge ]);};goto _ggd ;_fga :_gcfb =(_bge )-1;{_fg ._cfce .AddToken (FmtTypeDigitOpt ,nil );};goto _ggd ;_ddfd :_bge =_gcfb +1;{_fg ._cfce .AddToken (FmtTypeDigitOptThousands ,nil );};goto _ggd ;_aedb :_gcfb =(_bge )-1;{_fg ._cfce .AddToken (FmtTypePercent ,nil );};goto _ggd ;_afb :_gcfb =(_bge )-1;{_fg ._cfce .AddToken (FmtTypeDate ,_bfg [_afde :_bge ]);};goto _ggd ;_eba :_gcfb =(_bge )-1;{_fg ._cfce .AddToken (FmtTypeDigit ,nil );};goto _ggd ;_gac :_gcfb =(_bge )-1;{_fg ._cfce .AddToken (FmtTypeTime ,_bfg [_afde :_bge ]);};goto _ggd ;_ddc :_gcfb =(_bge )-1;{_fg ._cfce .AddToken (FmtTypeLiteral ,_bfg [_afde :_bge ]);};goto _ggd ;_bgd :_bge =_gcfb +1;{_fg ._cfce ._ad =true ;};goto _ggd ;_baga :_bge =_gcfb +1;{_fg ._cfce .AddToken (FmtTypeLiteral ,_bfg [_afde :_bge ]);};goto _ggd ;_dfe :_bge =_gcfb +1;{_fg ._cfce .AddToken (FmtTypeDollar ,nil );};goto _ggd ;_ebac :_bge =_gcfb +1;{_fg ._cfce .AddToken (FmtTypeComma ,nil );};goto _ggd ;_eag :_bge =_gcfb +1;{_fg ._cfce .AddToken (FmtTypeDecimal ,nil );};goto _ggd ;_aeca :_bge =_gcfb +1;{_fg .nextFmt ();};goto _ggd ;_caa :_bge =_gcfb +1;{_fg ._cfce .AddToken (FmtTypeText ,nil );};goto _ggd ;_aedf :_bge =_gcfb +1;{_fg ._cfce .AddToken (FmtTypeUnderscore ,nil );};goto _ggd ;_eae :_bge =_gcfb ;_gcfb --;{_fg ._cfce .AddToken (FmtTypeLiteral ,_bfg [_afde :_bge ]);};goto _ggd ;_gdef :_bge =_gcfb ;_gcfb --;{_fg ._cfce .AddToken (FmtTypeLiteral ,_bfg [_afde +1:_bge -1]);};goto _ggd ;_fea :_bge =_gcfb ;_gcfb --;{_fg ._cfce .AddToken (FmtTypeDigitOpt ,nil );};goto _ggd ;_daa :_bge =_gcfb ;_gcfb --;{_fg ._cfce .AddToken (FmtTypeFraction ,_bfg [_afde :_bge ]);};goto _ggd ;_geae :_bge =_gcfb ;_gcfb --;{_fg ._cfce .AddToken (FmtTypePercent ,nil );};goto _ggd ;_agbb :_bge =_gcfb ;_gcfb --;{_fg ._cfce .AddToken (FmtTypeDate ,_bfg [_afde :_bge ]);};goto _ggd ;_aea :_bge =_gcfb ;_gcfb --;{_fg ._cfce .AddToken (FmtTypeDigit ,nil );};goto _ggd ;_add :_bge =_gcfb ;_gcfb --;{_fg ._cfce .AddToken (FmtTypeTime ,_bfg [_afde :_bge ]);};goto _ggd ;_egd :_bge =_gcfb ;_gcfb --;{};goto _ggd ;_fdce :_bge =_gcfb +1;{_fg ._cfce .IsExponential =true ;};goto _ggd ;_ace :_bge =_gcfb +1;{_fg ._cfce .AddToken (FmtTypeLiteral ,_bfg [_afde +1:_bge ]);};goto _ggd ;_ggd :_afde =0;if _gcfb ++;_gcfb ==_dbde {goto _gfda ;};_aga :_afde =_gcfb ;switch _bfg [_gcfb ]{case 34:goto _dac ;case 35:goto _egda ;case 36:goto _dfe ;case 37:goto _aefa ;case 44:goto _ebac ;case 46:goto _eag ;case 47:goto _cgfg ;case 48:goto _ade ;case 58:goto _ded ;case 59:goto _aeca ;case 63:goto _ddbd ;case 64:goto _caa ;case 65:goto _aebb ;case 69:goto _gbf ;case 71:goto _gge ;case 91:goto _adc ;case 92:goto _gege ;case 95:goto _aedf ;case 100:goto _cgfg ;case 104:goto _ded ;case 109:goto _face ;case 115:goto _ebcg ;case 121:goto _gbfb ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _abc ;};goto _baga ;_dac :_bge =_gcfb +1;_fcbb =20;goto _ccb ;_ccb :if _gcfb ++;_gcfb ==_dbde {goto _dgbd ;};_cfgg :if _bfg [_gcfb ]==34{goto _egf ;};goto _febf ;_febf :if _gcfb ++;_gcfb ==_dbde {goto _bcfb ;};_aecg :if _bfg [_gcfb ]==34{goto _egf ;};goto _febf ;_egf :_bge =_gcfb +1;_fcbb =21;goto _aeb ;_aeb :if _gcfb ++;_gcfb ==_dbde {goto _fdge ;};_dddb :if _bfg [_gcfb ]==34{goto _febf ;};goto _gdef ;_egda :_bge =_gcfb +1;_fcbb =3;goto _ecgf ;_ecgf :if _gcfb ++;_gcfb ==_dbde {goto _bdcd ;};_aeda :switch _bfg [_gcfb ]{case 35:goto _fdfa ;case 37:goto _fdfa ;case 44:goto _dgb ;case 47:goto _cfb ;case 48:goto _fdfa ;case 63:goto _fdfa ;};goto _fea ;_fdfa :if _gcfb ++;_gcfb ==_dbde {goto _adcg ;};_agbg :switch _bfg [_gcfb ]{case 35:goto _fdfa ;case 37:goto _fdfa ;case 47:goto _cfb ;case 48:goto _fdfa ;case 63:goto _fdfa ;};goto _efb ;_cfb :if _gcfb ++;_gcfb ==_dbde {goto _gad ;};_eaeb :switch _bfg [_gcfb ]{case 35:goto _cgc ;case 37:goto _bed ;case 48:goto _gdea ;case 63:goto _cgc ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _cdbgd ;};goto _efb ;_cgc :_bge =_gcfb +1;goto _gedg ;_gedg :if _gcfb ++;_gcfb ==_dbde {goto _fcbba ;};_gfbd :switch _bfg [_gcfb ]{case 35:goto _cgc ;case 37:goto _cgc ;case 44:goto _cgc ;case 46:goto _cgc ;case 48:goto _cgc ;case 63:goto _cgc ;case 65:goto _ebdc ;};goto _daa ;_ebdc :if _gcfb ++;_gcfb ==_dbde {goto _dece ;};_dda :switch _bfg [_gcfb ]{case 47:goto _aeba ;case 77:goto _bdag ;};goto _fag ;_aeba :if _gcfb ++;_gcfb ==_dbde {goto _fggd ;};_egc :if _bfg [_gcfb ]==80{goto _eaf ;};goto _fag ;_eaf :_bge =_gcfb +1;goto _gda ;_gda :if _gcfb ++;_gcfb ==_dbde {goto _gcca ;};_agba :if _bfg [_gcfb ]==65{goto _ebdc ;};goto _daa ;_bdag :if _gcfb ++;_gcfb ==_dbde {goto _ebdcc ;};_gga :if _bfg [_gcfb ]==47{goto _afa ;};goto _fag ;_afa :if _gcfb ++;_gcfb ==_dbde {goto _ccf ;};_dgc :if _bfg [_gcfb ]==80{goto _aba ;};goto _fag ;_aba :if _gcfb ++;_gcfb ==_dbde {goto _ccdf ;};_bcea :if _bfg [_gcfb ]==77{goto _eaf ;};goto _fag ;_bed :if _gcfb ++;_gcfb ==_dbde {goto _acec ;};_fcac :switch _bfg [_gcfb ]{case 35:goto _affe ;case 37:goto _edg ;case 63:goto _affe ;};if 48<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _gbc ;};goto _efb ;_affe :_bge =_gcfb +1;goto _ffg ;_ffg :if _gcfb ++;_gcfb ==_dbde {goto _fgb ;};_gbgd :switch _bfg [_gcfb ]{case 35:goto _cgc ;case 37:goto _ddcc ;case 44:goto _cgc ;case 46:goto _cgc ;case 48:goto _cgc ;case 63:goto _cgc ;case 65:goto _ebdc ;};goto _daa ;_ddcc :if _gcfb ++;_gcfb ==_dbde {goto _fecb ;};_agef :switch _bfg [_gcfb ]{case 35:goto _fda ;case 44:goto _fda ;case 46:goto _fda ;case 48:goto _fda ;case 63:goto _fda ;};goto _fag ;_fda :_bge =_gcfb +1;goto _afdb ;_afdb :if _gcfb ++;_gcfb ==_dbde {goto _afaa ;};_abaf :switch _bfg [_gcfb ]{case 35:goto _fda ;case 44:goto _fda ;case 46:goto _fda ;case 48:goto _fda ;case 63:goto _fda ;case 65:goto _ebdc ;};goto _daa ;_edg :if _gcfb ++;_gcfb ==_dbde {goto _eaec ;};_fec :if _bfg [_gcfb ]==37{goto _edg ;};if 48<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _gbc ;};goto _efb ;_gbc :_bge =_gcfb +1;_fcbb =13;goto _aefg ;_aefg :if _gcfb ++;_gcfb ==_dbde {goto _eccb ;};_eeg :switch _bfg [_gcfb ]{case 35:goto _cgc ;case 37:goto _gddc ;case 44:goto _cgc ;case 46:goto _cgc ;case 48:goto _dbe ;case 63:goto _cgc ;case 65:goto _ebdc ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _gbc ;};goto _daa ;_gddc :if _gcfb ++;_gcfb ==_dbde {goto _eaca ;};_dgg :switch _bfg [_gcfb ]{case 35:goto _fda ;case 37:goto _edg ;case 44:goto _fda ;case 46:goto _fda ;case 63:goto _fda ;};if 48<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _gbc ;};goto _fag ;_dbe :_bge =_gcfb +1;goto _fgc ;_fgc :if _gcfb ++;_gcfb ==_dbde {goto _gcac ;};_cge :switch _bfg [_gcfb ]{case 35:goto _cgc ;case 37:goto _dbe ;case 44:goto _cgc ;case 46:goto _cgc ;case 48:goto _dbe ;case 63:goto _cgc ;case 65:goto _ebdc ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _gbc ;};goto _daa ;_gdea :_bge =_gcfb +1;goto _dec ;_dec :if _gcfb ++;_gcfb ==_dbde {goto _dcdg ;};_acg :switch _bfg [_gcfb ]{case 35:goto _cgc ;case 37:goto _dbe ;case 44:goto _cgc ;case 46:goto _cgc ;case 48:goto _gdea ;case 63:goto _cgc ;case 65:goto _ebdc ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _cdbgd ;};goto _daa ;_cdbgd :_bge =_gcfb +1;goto _efe ;_efe :if _gcfb ++;_gcfb ==_dbde {goto _ggf ;};_aefgb :switch _bfg [_gcfb ]{case 35:goto _cgc ;case 37:goto _gbc ;case 44:goto _cgc ;case 46:goto _cgc ;case 48:goto _gdea ;case 63:goto _cgc ;case 65:goto _ebdc ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _cdbgd ;};goto _daa ;_dgb :if _gcfb ++;_gcfb ==_dbde {goto _gfc ;};_bef :if _bfg [_gcfb ]==35{goto _ddfd ;};goto _fga ;_aefa :_bge =_gcfb +1;_fcbb =8;goto _dbaf ;_dbaf :if _gcfb ++;_gcfb ==_dbde {goto _bfe ;};_bcf :switch _bfg [_gcfb ]{case 35:goto _bdcc ;case 37:goto _fffd ;case 48:goto _bbce ;case 63:goto _bdcc ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _dfee ;};goto _geae ;_bdcc :if _gcfb ++;_gcfb ==_dbde {goto _agefg ;};_efbe :switch _bfg [_gcfb ]{case 35:goto _bdcc ;case 47:goto _cfb ;case 48:goto _bdcc ;case 63:goto _bdcc ;};goto _aedb ;_fffd :if _gcfb ++;_gcfb ==_dbde {goto _dgfc ;};_efcb :if _bfg [_gcfb ]==37{goto _fffd ;};if 48<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _dfee ;};goto _efb ;_dfee :if _gcfb ++;_gcfb ==_dbde {goto _faf ;};_gcc :switch _bfg [_gcfb ]{case 37:goto _fffd ;case 47:goto _cfb ;};if 48<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _dfee ;};goto _efb ;_bbce :if _gcfb ++;_gcfb ==_dbde {goto _eecd ;};_facb :switch _bfg [_gcfb ]{case 35:goto _bdcc ;case 37:goto _fffd ;case 47:goto _cfb ;case 48:goto _bbce ;case 63:goto _bdcc ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _dfee ;};goto _aedb ;_cgfg :_bge =_gcfb +1;goto _ebae ;_ebae :if _gcfb ++;_gcfb ==_dbde {goto _gfec ;};_cfe :switch _bfg [_gcfb ]{case 47:goto _cgfg ;case 100:goto _cgfg ;case 109:goto _cgfg ;case 121:goto _aeg ;};goto _agbb ;_aeg :if _gcfb ++;_gcfb ==_dbde {goto _fdbbe ;};_fdd :if _bfg [_gcfb ]==121{goto _cgfg ;};goto _afb ;_ade :_bge =_gcfb +1;_fcbb =2;goto _edd ;_edd :if _gcfb ++;_gcfb ==_dbde {goto _aeab ;};_def :switch _bfg [_gcfb ]{case 35:goto _fdfa ;case 37:goto _gab ;case 47:goto _cfb ;case 48:goto _dgf ;case 63:goto _fdfa ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _efeb ;};goto _aea ;_gab :if _gcfb ++;_gcfb ==_dbde {goto _gbfg ;};_gcbf :switch _bfg [_gcfb ]{case 35:goto _fdfa ;case 37:goto _gab ;case 47:goto _cfb ;case 48:goto _gab ;case 63:goto _fdfa ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _dfee ;};goto _eba ;_dgf :if _gcfb ++;_gcfb ==_dbde {goto _edbf ;};_baf :switch _bfg [_gcfb ]{case 35:goto _fdfa ;case 37:goto _gab ;case 47:goto _cfb ;case 48:goto _dgf ;case 63:goto _fdfa ;};if 49<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _efeb ;};goto _eba ;_efeb :if _gcfb ++;_gcfb ==_dbde {goto _bdg ;};_cda :switch _bfg [_gcfb ]{case 37:goto _dfee ;case 47:goto _cfb ;};if 48<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _efeb ;};goto _efb ;_abc :_bge =_gcfb +1;_fcbb =20;goto _cag ;_cag :if _gcfb ++;_gcfb ==_dbde {goto _daac ;};_fde :switch _bfg [_gcfb ]{case 37:goto _dfee ;case 47:goto _cfb ;};if 48<=_bfg [_gcfb ]&&_bfg [_gcfb ]<=57{goto _efeb ;};goto _eae ;_ded :_bge =_gcfb +1;_fcbb =15;goto _fdbc ;_fdbc :if _gcfb ++;_gcfb ==_dbde {goto _aegf ;};_ebcd :switch _bfg [_gcfb ]{case 58:goto _ded ;case 65:goto _gcfe ;case 104:goto _ded ;case 109:goto _ded ;case 115:goto _ebcg ;};goto _add ;_gcfe :if _gcfb ++;_gcfb ==_dbde {goto _ebf ;};_afdg :switch _bfg [_gcfb ]{case 47:goto _fgcf ;case 77:goto _cad ;};goto _efb ;_fgcf :if _gcfb ++;_gcfb ==_dbde {goto _bgda ;};_ddb :if _bfg [_gcfb ]==80{goto _ded ;};goto _efb ;_cad :if _gcfb ++;_gcfb ==_dbde {goto _cbeg ;};_dea :if _bfg [_gcfb ]==47{goto _ebaf ;};goto _efb ;_ebaf :if _gcfb ++;_gcfb ==_dbde {goto _ede ;};_gaf :if _bfg [_gcfb ]==80{goto _ecdb ;};goto _efb ;_ecdb :if _gcfb ++;_gcfb ==_dbde {goto _gbe ;};_dacf :if _bfg [_gcfb ]==77{goto _ded ;};goto _efb ;_ebcg :_bge =_gcfb +1;_fcbb =15;goto _bgg ;_bgg :if _gcfb ++;_gcfb ==_dbde {goto _dbcg ;};_eddd :switch _bfg [_gcfb ]{case 46:goto _bbe ;case 58:goto _ded ;case 65:goto _gcfe ;case 104:goto _ded ;case 109:goto _ded ;case 115:goto _ebcg ;};goto _add ;_bbe :if _gcfb ++;_gcfb ==_dbde {goto _fad ;};_eda :if _bfg [_gcfb ]==48{goto _gca ;};goto _gac ;_gca :_bge =_gcfb +1;_fcbb =15;goto _defc ;_defc :if _gcfb ++;_gcfb ==_dbde {goto _gebc ;};_dfgf :switch _bfg [_gcfb ]{case 48:goto _eff ;case 58:goto _ded ;case 65:goto _gcfe ;case 104:goto _ded ;case 109:goto _ded ;case 115:goto _ebcg ;};goto _add ;_eff :_bge =_gcfb +1;_fcbb =15;goto _agde ;_agde :if _gcfb ++;_gcfb ==_dbde {goto _bfc ;};_feae :switch _bfg [_gcfb ]{case 48:goto _ded ;case 58:goto _ded ;case 65:goto _gcfe ;case 104:goto _ded ;case 109:goto _ded ;case 115:goto _ebcg ;};goto _add ;_ddbd :_bge =_gcfb +1;_fcbb =5;goto _efcd ;_efcd :if _gcfb ++;_gcfb ==_dbde {goto _abaa ;};_afag :switch _bfg [_gcfb ]{case 35:goto _fdfa ;case 37:goto _fdfa ;case 47:goto _cfb ;case 48:goto _fdfa ;case 63:goto _fdfa ;};goto _egd ;_aebb :_bge =_gcfb +1;_fcbb =20;goto _dbg ;_dbg :if _gcfb ++;_gcfb ==_dbde {goto _dbff ;};_eea :switch _bfg [_gcfb ]{case 47:goto _fgcf ;case 77:goto _cad ;};goto _eae ;_gbf :if _gcfb ++;_gcfb ==_dbde {goto _dabc ;};_bdf :switch _bfg [_gcfb ]{case 43:goto _fdce ;case 45:goto _fdce ;};goto _eae ;_gge :_bge =_gcfb +1;goto _bdaa ;_bdaa :if _gcfb ++;_gcfb ==_dbde {goto _ggb ;};_eee :if _bfg [_gcfb ]==101{goto _eaad ;};goto _eae ;_eaad :if _gcfb ++;_gcfb ==_dbde {goto _gef ;};_eegf :if _bfg [_gcfb ]==110{goto _bcg ;};goto _ddc ;_bcg :if _gcfb ++;_gcfb ==_dbde {goto _beba ;};_dggg :if _bfg [_gcfb ]==101{goto _fgg ;};goto _ddc ;_fgg :if _gcfb ++;_gcfb ==_dbde {goto _bacb ;};_gfd :if _bfg [_gcfb ]==114{goto _fbgc ;};goto _ddc ;_fbgc :if _gcfb ++;_gcfb ==_dbde {goto _cagb ;};_decg :if _bfg [_gcfb ]==97{goto _gcfg ;};goto _ddc ;_gcfg :if _gcfb ++;_gcfb ==_dbde {goto _acd ;};_fagb :if _bfg [_gcfb ]==108{goto _bgd ;};goto _ddc ;_adc :_bge =_gcfb +1;_fcbb =20;goto _aegc ;_aegc :if _gcfb ++;_gcfb ==_dbde {goto _dgba ;};_egfa :switch _bfg [_gcfb ]{case 104:goto _caf ;case 109:goto _caf ;case 115:goto _caf ;};goto _ccd ;_ccd :if _gcfb ++;_gcfb ==_dbde {goto _cbfd ;};_gbgf :if _bfg [_gcfb ]==93{goto _ege ;};goto _ccd ;_ege :_bge =_gcfb +1;_fcbb =18;goto _aedbf ;_efec :_bge =_gcfb +1;_fcbb =16;goto _aedbf ;_aedbf :if _gcfb ++;_gcfb ==_dbde {goto _bcc ;};_aag :if _bfg [_gcfb ]==93{goto _ege ;};goto _ccd ;_caf :if _gcfb ++;_gcfb ==_dbde {goto _bee ;};_gfdg :if _bfg [_gcfb ]==93{goto _efec ;};goto _ccd ;_gege :if _gcfb ++;_gcfb ==_dbde {goto _eacc ;};_cce :goto _ace ;_face :_bge =_gcfb +1;_fcbb =14;goto _dbc ;_dbc :if _gcfb ++;_gcfb ==_dbde {goto _dcdc ;};_gacd :switch _bfg [_gcfb ]{case 47:goto _cgfg ;case 58:goto _ded ;case 65:goto _gcfe ;case 100:goto _cgfg ;case 104:goto _ded ;case 109:goto _face ;case 115:goto _ebcg ;case 121:goto _aeg ;};goto _agbb ;_gbfb :if _gcfb ++;_gcfb ==_dbde {goto _egdf ;};_dacc :if _bfg [_gcfb ]==121{goto _cgfg ;};goto _eae ;_fge :_gfda :_fbg =34;goto _bagc ;_dgbd :_fbg =35;goto _bagc ;_bcfb :_fbg =0;goto _bagc ;_fdge :_fbg =36;goto _bagc ;_bdcd :_fbg =37;goto _bagc ;_adcg :_fbg =1;goto _bagc ;_gad :_fbg =2;goto _bagc ;_fcbba :_fbg =38;goto _bagc ;_dece :_fbg =3;goto _bagc ;_fggd :_fbg =4;goto _bagc ;_gcca :_fbg =39;goto _bagc ;_ebdcc :_fbg =5;goto _bagc ;_ccf :_fbg =6;goto _bagc ;_ccdf :_fbg =7;goto _bagc ;_acec :_fbg =8;goto _bagc ;_fgb :_fbg =40;goto _bagc ;_fecb :_fbg =9;goto _bagc ;_afaa :_fbg =41;goto _bagc ;_eaec :_fbg =10;goto _bagc ;_eccb :_fbg =42;goto _bagc ;_eaca :_fbg =11;goto _bagc ;_gcac :_fbg =43;goto _bagc ;_dcdg :_fbg =44;goto _bagc ;_ggf :_fbg =45;goto _bagc ;_gfc :_fbg =12;goto _bagc ;_bfe :_fbg =46;goto _bagc ;_agefg :_fbg =13;goto _bagc ;_dgfc :_fbg =14;goto _bagc ;_faf :_fbg =15;goto _bagc ;_eecd :_fbg =16;goto _bagc ;_gfec :_fbg =47;goto _bagc ;_fdbbe :_fbg =17;goto _bagc ;_aeab :_fbg =48;goto _bagc ;_gbfg :_fbg =18;goto _bagc ;_edbf :_fbg =19;goto _bagc ;_bdg :_fbg =20;goto _bagc ;_daac :_fbg =49;goto _bagc ;_aegf :_fbg =50;goto _bagc ;_ebf :_fbg =21;goto _bagc ;_bgda :_fbg =22;goto _bagc ;_cbeg :_fbg =23;goto _bagc ;_ede :_fbg =24;goto _bagc ;_gbe :_fbg =25;goto _bagc ;_dbcg :_fbg =51;goto _bagc ;_fad :_fbg =26;goto _bagc ;_gebc :_fbg =52;goto _bagc ;_bfc :_fbg =53;goto _bagc ;_abaa :_fbg =54;goto _bagc ;_dbff :_fbg =55;goto _bagc ;_dabc :_fbg =56;goto _bagc ;_ggb :_fbg =57;goto _bagc ;_gef :_fbg =27;goto _bagc ;_beba :_fbg =28;goto _bagc ;_bacb :_fbg =29;goto _bagc ;_cagb :_fbg =30;goto _bagc ;_acd :_fbg =31;goto _bagc ;_dgba :_fbg =58;goto _bagc ;_cbfd :_fbg =32;goto _bagc ;_bcc :_fbg =59;goto _bagc ;_bee :_fbg =33;goto _bagc ;_eacc :_fbg =60;goto _bagc ;_dcdc :_fbg =61;goto _bagc ;_egdf :_fbg =62;goto _bagc ;_bagc :{};if _gcfb ==_ebe {switch _fbg {case 35:goto _eae ;case 0:goto _efb ;case 36:goto _gdef ;case 37:goto _fea ;case 1:goto _efb ;case 2:goto _efb ;case 38:goto _daa ;case 3:goto _fag ;case 4:goto _fag ;case 39:goto _daa ;case 5:goto _fag ;case 6:goto _fag ;case 7:goto _fag ;case 8:goto _efb ;case 40:goto _daa ;case 9:goto _fag ;case 41:goto _daa ;case 10:goto _efb ;case 42:goto _daa ;case 11:goto _fag ;case 43:goto _daa ;case 44:goto _daa ;case 45:goto _daa ;case 12:goto _fga ;case 46:goto _geae ;case 13:goto _aedb ;case 14:goto _efb ;case 15:goto _efb ;case 16:goto _aedb ;case 47:goto _agbb ;case 17:goto _afb ;case 48:goto _aea ;case 18:goto _eba ;case 19:goto _eba ;case 20:goto _efb ;case 49:goto _eae ;case 50:goto _add ;case 21:goto _efb ;case 22:goto _efb ;case 23:goto _efb ;case 24:goto _efb ;case 25:goto _efb ;case 51:goto _add ;case 26:goto _gac ;case 52:goto _add ;case 53:goto _add ;case 54:goto _egd ;case 55:goto _eae ;case 56:goto _eae ;case 57:goto _eae ;case 27:goto _ddc ;case 28:goto _ddc ;case 29:goto _ddc ;case 30:goto _ddc ;case 31:goto _ddc ;case 58:goto _eae ;case 32:goto _efb ;case 59:goto _efb ;case 33:goto _ddc ;case 60:goto _eae ;case 61:goto _agbb ;case 62:goto _eae ;};};};if _afde > 0{copy (_bfg [0:],_bfg [_afde :]);};};_ =_ebe ;if _fbg ==_fdbb {_ga .Log ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};func _gfeb (_gdff ,_aaa float64 ,_gec Format )[]byte {if len (_gec .Whole )==0{return nil ;};_cc :=_g .Date (1899,12,30,0,0,0,0,_g .UTC );_cg :=_cc .Add (_g .Duration (_aaa *float64 (24*_g .Hour )));_cg =_gffca (_cg );_agg :=_f .AppendFloat (nil ,_gdff ,'f',-1,64);_gcg :=make ([]byte ,0,len (_agg ));_beg :=0;_ce :=1;_eb :for _fca :=len (_gec .Whole )-1;_fca >=0;_fca --{_cae :=len (_agg )-1-_beg ;_cef :=_gec .Whole [_fca ];switch _cef .Type {case FmtTypeDigit :if _cae >=0{_gcg =append (_gcg ,_agg [_cae ]);_beg ++;_ce =_fca ;}else {_gcg =append (_gcg ,'0');};case FmtTypeDigitOpt :if _cae >=0{_gcg =append (_gcg ,_agg [_cae ]);_beg ++;_ce =_fca ;}else {for _ebd :=_fca ;_ebd >=0;_ebd --{_gb :=_gec .Whole [_ebd ];if _gb .Type ==FmtTypeLiteral {_gcg =append (_gcg ,_gb .Literal );};};break _eb ;};case FmtTypeDollar :for _dcd :=_beg ;_dcd < len (_agg );_dcd ++{_gcg =append (_gcg ,_agg [len (_agg )-1-_dcd ]);_beg ++;};_gcg =append (_gcg ,'$');case FmtTypeComma :if !_gec ._gd {_gcg =append (_gcg ,',');};case FmtTypeLiteral :_gcg =append (_gcg ,_cef .Literal );case FmtTypeDate :_gcg =append (_gcg ,_gdd (_ccc (_cg ,_cef .DateTime ))...);case FmtTypeTime :_gcg =append (_gcg ,_gdd (_fed (_cg ,_aaa ,_cef .DateTime ))...);default:_ga .Log ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_cef );};};_agb :=_gdd (_gcg );if _beg < len (_agg )&&(_beg !=0||_gec ._fb ){_fbe :=len (_agg )-_beg ;_ef :=make ([]byte ,len (_agb )+_fbe );copy (_ef ,_agb [0:_ce ]);copy (_ef [_ce :],_agg [0:]);copy (_ef [_ce +_fbe :],_agb [_ce :]);_agb =_ef ;};if _gec ._gd {_gfebe :=_ge .Buffer {};_fff :=0;for _bfb :=len (_agb )-1;_bfb >=0;_bfb --{if !(_agb [_bfb ]>='0'&&_agb [_bfb ]<='9'){_fff ++;}else {break ;};};for _ffb :=0;_ffb < len (_agb );_ffb ++{_fdf :=(len (_agb )-_ffb -_fff );if _fdf %3==0&&_fdf !=0&&_ffb !=0{_gfebe .WriteByte (',');};_gfebe .WriteByte (_agb [_ffb ]);};_agb =_gfebe .Bytes ();};return _agb ;};func _ccc (_gdg _g .Time ,_cdbg string )[]byte {_ecef :=[]byte {};_bgb :=0;for _cfae :=0;_cfae < len (_cdbg );_cfae ++{var _cb string ;if _cdbg [_cfae ]=='/'{_cb =string (_cdbg [_bgb :_cfae ]);_bgb =_cfae +1;}else if _cfae ==len (_cdbg )-1{_cb =string (_cdbg [_bgb :_cfae +1]);}else {continue ;};switch _cb {case "\u0079\u0079":_ecef =_gdg .AppendFormat (_ecef ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_ecef =_gdg .AppendFormat (_ecef ,"\u0032\u0030\u0030\u0036");case "\u006d":_ecef =_gdg .AppendFormat (_ecef ,"\u0031");case "\u006d\u006d":_ecef =_gdg .AppendFormat (_ecef ,"\u0030\u0031");case "\u006d\u006d\u006d":_ecef =_gdg .AppendFormat (_ecef ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_ecef =_gdg .AppendFormat (_ecef ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _gdg .Month (){case _g .January ,_g .July ,_g .June :_ecef =append (_ecef ,'J');case _g .February :_ecef =append (_ecef ,'M');case _g .March ,_g .May :_ecef =append (_ecef ,'M');case _g .April ,_g .August :_ecef =append (_ecef ,'A');case _g .September :_ecef =append (_ecef ,'S');case _g .October :_ecef =append (_ecef ,'O');case _g .November :_ecef =append (_ecef ,'N');case _g .December :_ecef =append (_ecef ,'D');};case "\u0064":_ecef =_gdg .AppendFormat (_ecef ,"\u0032");case "\u0064\u0064":_ecef =_gdg .AppendFormat (_ecef ,"\u0030\u0032");case "\u0064\u0064\u0064":_ecef =_gdg .AppendFormat (_ecef ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_ecef =_gdg .AppendFormat (_ecef ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_ga .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_cb );};if _cdbg [_cfae ]=='/'{_ecef =append (_ecef ,'/');};};return _ecef ;};func _fed (_cdc _g .Time ,_cba float64 ,_ffe string )[]byte {_gae :=[]byte {};_efd :=0;for _cbf :=0;_cbf < len (_ffe );_cbf ++{var _dbd string ;if _ffe [_cbf ]==':'{_dbd =string (_ffe [_efd :_cbf ]);_efd =_cbf +1;}else if _cbf ==len (_ffe )-1{_dbd =string (_ffe [_efd :_cbf +1]);}else {continue ;};switch _dbd {case "\u0064":_gae =_cdc .AppendFormat (_gae ,"\u0032");case "\u0068":_gae =_cdc .AppendFormat (_gae ,"\u0033");case "\u0068\u0068":_gae =_cdc .AppendFormat (_gae ,"\u0031\u0035");case "\u006d":_gae =_cdc .AppendFormat (_gae ,"\u0034");case "\u006d\u006d":_gae =_cdc .AppendFormat (_gae ,"\u0030\u0034");case "\u0073":_gae =_cdc .Round (_g .Second ).AppendFormat (_gae ,"\u0035");case "\u0073\u002e\u0030":_gae =_cdc .Round (_g .Second /10).AppendFormat (_gae ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_gae =_cdc .Round (_g .Second /100).AppendFormat (_gae ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_gae =_cdc .Round (_g .Second /1000).AppendFormat (_gae ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_gae =_cdc .Round (_g .Second ).AppendFormat (_gae ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_gae =_cdc .Round (_g .Second /10).AppendFormat (_gae ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_gae =_cdc .Round (_g .Second /100).AppendFormat (_gae ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_gae =_cdc .Round (_g .Second /1000).AppendFormat (_gae ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_gae =_cdc .AppendFormat (_gae ,"\u0050\u004d");case "\u005b\u0068\u005d":_gae =_f .AppendInt (_gae ,int64 (_cba *24),10);case "\u005b\u006d\u005d":_gae =_f .AppendInt (_gae ,int64 (_cba *24*60),10);case "\u005b\u0073\u005d":_gae =_f .AppendInt (_gae ,int64 (_cba *24*60*60),10);case "":default:_ga .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_dbd );};if _ffe [_cbf ]==':'{_gae =append (_gae ,':');};};return _gae ;};func _gffca (_eeec _g .Time )_g .Time {_eeec =_eeec .UTC ();return _g .Date (_eeec .Year (),_eeec .Month (),_eeec .Day (),_eeec .Hour (),_eeec .Minute (),_eeec .Second (),_eeec .Nanosecond (),_g .Local );};

// FmtType is the type of a format token.
//go:generate stringer -type=FmtType
type FmtType byte ;func _gffc (_bced []byte )[]byte {for _gba :=len (_bced )-1;_gba > 0;_gba --{if _bced [_gba ]=='9'+1{_bced [_gba ]='0';if _bced [_gba -1]=='.'{_gba --;};_bced [_gba -1]++;};};if _bced [0]=='9'+1{_bced [0]='0';copy (_bced [1:],_bced [0:]);_bced [0]='1';};return _bced ;};const _gbd int =0;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_abg :=Parse (f );var _ada Format ;if len (_abg )==1{_ada =_abg [0];}else if len (_abg )==4{_ada =_abg [3];};_fe :=false ;for _ ,_cfc :=range _ada .Whole {if _cfc .Type ==FmtTypeText {_fe =true ;};};if !_fe {return v ;};_dc :=_ge .Buffer {};for _ ,_feb :=range _ada .Whole {switch _feb .Type {case FmtTypeLiteral :_dc .WriteByte (_feb .Literal );case FmtTypeText :_dc .WriteString (v );};};return _dc .String ();};func _gde (_bbf float64 )string {_aed :=_f .FormatFloat (_bbf ,'E',-1,64);_cff :=_f .FormatFloat (_bbf ,'E',5,64);if len (_aed )< len (_cff ){return _f .FormatFloat (_bbf ,'E',2,64);};return _cff ;};