//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_d "bytes";_f "errors";_g "fmt";_ba "github.com/unidoc/unioffice";_cg "github.com/unidoc/unioffice/internal/mergesort";_b "github.com/unidoc/unioffice/internal/wildcard";_ff "github.com/unidoc/unioffice/spreadsheet/format";_fg "github.com/unidoc/unioffice/spreadsheet/reference";_adf "github.com/unidoc/unioffice/spreadsheet/update";_a "io";_ed "math";_df "math/big";_dg "math/rand";_cd "regexp";_ad "sort";_cb "strconv";_eg "strings";_dc "sync";_fb "time";_c "unicode";);type parsedReplaceObject struct{_bbgfg string ;_acbg int ;_cbdac int ;_beeba string ;};const _bdga =16;func (_defe *evCache )SetCache (key string ,value Result ){_defe ._def .Lock ();_defe ._ag [key ]=value ;_defe ._def .Unlock ();};const _gccf int =30;

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfad :=args [0].AsNumber ();if _cfad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acbcg :=float64 (1);_fbeg :=args [1].AsNumber ();if _fbeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_acbcg =_fbeg .ValueNumber ;if _acbcg < 0&&_cfad .ValueNumber > 0||_acbcg > 0&&_cfad .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_cebg :=_cfad .ValueNumber ;_cebg ,_cabgd :=_ed .Modf (_cebg /_acbcg );if _ed .Trunc (_cabgd +0.5)> 0{_cebg ++;};return MakeNumberResult (_cebg *_acbcg );};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// GetLocked returns FALSE for the invalid reference context.
func (_dbagb *ivr )GetLocked (cellRef string )bool {return false };

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_daafg ,_dacfg :=_cabfd ("\u0046\u0049\u004e\u0044",args );if _dacfg .Type !=ResultTypeEmpty {return _dacfg ;};_fdgg :=_eg .ToLower (_daafg ._gcaeg );if _fdgg ==""{return MakeNumberResult (1.0);};_aaead :=_eg .ToLower (_daafg ._cfddd );_aefc :=_daafg ._bbfga ;_ggde :=1;for _agdfda :=range _aaead {if _ggde < _aefc {_ggde ++;continue ;};_gbged :=_b .Index (_fdgg ,_aaead [_agdfda :]);if _gbged ==0{return MakeNumberResult (float64 (_ggde ));};_ggde ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_acfeb :=args [0].Ref ;if _acfeb .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_acfeb .Value ));};var _deggb =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_ceddd string };func _ebbgb (_bdebc Reference ,_ecbd Context )bool {return _ecbd .Sheet (_bdebc .Value )==InvalidReferenceContext ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gggggd :=args [0];_dadc :=args [1];if _dadc .Type !=ResultTypeArray &&_dadc .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ggaa :=_bdeb (_dadc );_cggg :=-1;for _dfgb ,_eefc :=range _ggaa {if _agdfd (_gggggd ,_eefc ,false ,false )==_ggfcc {_cggg =_dfgb ;};};if _cggg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_gega :=_ggaa ;if len (args )==3{_gega =_bdeb (args [2]);};if _cggg < 0||_cggg >=len (_gega ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _gega [_cggg ];};type yySymType struct{_fcfgg int ;_fbaa *node ;_fgfe Expression ;_accf []Expression ;_bgdcf [][]Expression ;};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_edda :=len (args );if _edda < 2||_edda > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcd :=args [0];if _dcd .Type !=ResultTypeArray &&_dcd .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gdac :=args [1].AsNumber ();if _gdac .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dede :=int (_gdac .ValueNumber )-1;_bdeg :=-1;if _edda ==3&&args [2].Type !=ResultTypeEmpty {_bffaf :=args [2].AsNumber ();if _bffaf .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bdeg =int (_bffaf .ValueNumber )-1;};if _dede ==-1&&_bdeg ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _aec []Result ;if _dcd .Type ==ResultTypeArray {_edad :=_dcd .ValueArray ;if _dede < -1||_dede >=len (_edad ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _dede ==-1{if _bdeg >=len (_edad [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_eagdg :=[][]Result {};for _ ,_ebfec :=range _edad {_bcdc :=_ebfec [_bdeg ];if _bcdc .Type ==ResultTypeEmpty {_bcdc =MakeNumberResult (0);};_eagdg =append (_eagdg ,[]Result {_bcdc });};return MakeArrayResult (_eagdg );};_aec =_edad [_dede ];}else {_ddcd :=_dcd .ValueList ;if _dede < -1||_dede >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _dede ==-1{if _bdeg >=len (_ddcd ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_cbaa :=_ddcd [_bdeg ];if _cbaa .Type ==ResultTypeEmpty {_cbaa =MakeNumberResult (0);};return _cbaa ;};_aec =_ddcd ;};if _bdeg < -1||_bdeg > len (_aec ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bdeg ==-1{_fdfa :=[]Result {};for _ ,_edge :=range _aec {if _edge .Type ==ResultTypeEmpty {_fdfa =append (_fdfa ,MakeNumberResult (0));}else {_fdfa =append (_fdfa ,_edge );};};return MakeArrayResult ([][]Result {_fdfa });};_bbad :=_aec [_bdeg ];if _bbad .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bbad ;};func _ccedd (_adefa _fb .Time )_fb .Time {_adefa =_adefa .UTC ();return _fb .Date (_adefa .Year (),_adefa .Month (),_adefa .Day (),_adefa .Hour (),_adefa .Minute (),_adefa .Second (),_adefa .Nanosecond (),_fb .Local );};func _gba (_gdb ,_adge int )int {switch _adge {case 1:if _gfaf (_gdb ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_aaf CellRef )Update (q *_adf .UpdateQuery )Expression {if q .UpdateCurrentSheet {_aaf ._aded =_ecb (_aaf ._aded ,q );};return _aaf ;};

// Eval evaluates and returns a boolean.
func (_ecg Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_ecg ._ebf )};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_dfae ,_aabb ,_ecc :=_agcbd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _ecc .Type ==ResultTypeError {return _ecc ;};if _aabb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _dfae ==0{return MakeNumberResult (0);};_bbba :=_dfae < 0;if _bbba {_dfae =-_dfae ;};_ceec :=float64 (int (_dfae ));_bfee :=args [0].Value ();_eaca :=_eg .Split (_bfee ,"\u002e");_dbdb :=0.0;if len (_eaca )> 1{var _bfbd error ;_eabd :=_eaca [1];_dbdb ,_bfbd =_cb .ParseFloat (_eabd ,64);if _bfbd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_agdc :=float64 (len (_eabd ));_dbdb /=_ed .Pow (10,_agdc );};_gfeg :=_dbdb *_aabb /_ed .Pow (10,float64 (int (_ed .Log10 (_aabb )))+1)+_ceec ;if _bbba {_gfeg =-_gfeg ;};return MakeNumberResult (_gfeg );};var _dcecg =[]*_cd .Regexp {};func _cabfd (_cbdde string ,_dfeb []Result )(*parsedSearchObject ,Result ){_eaagc :=len (_dfeb );if _eaagc !=2&&_eaagc !=3{return nil ,MakeErrorResult (_cbdde +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_geedb :=_dfeb [0];if _geedb .Type ==ResultTypeError {return nil ,_geedb ;};if _geedb .Type !=ResultTypeString &&_geedb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dffa :=_dfeb [1];if _dffa .Type ==ResultTypeError {return nil ,_dffa ;};if _dffa .Type !=ResultTypeString &&_dffa .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_dbddg :=_dffa .Value ();_dbbg :=_geedb .Value ();_accag :=1;if _eaagc ==3&&_dfeb [2].Type !=ResultTypeEmpty {_ffad :=_dfeb [2];if _ffad .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_accag =int (_ffad .ValueNumber );if _accag < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _accag > len (_dbddg ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_dbbg ,_dbddg ,_accag },_daaf ;};func _gffa (_eeadg Context ,_edggc ,_fabe int )(string ,string ){_baed :="\u0041"+_cb .Itoa (_edggc );_agag :=_eeadg .LastColumn (_edggc ,_fabe );_gfca :=_agag +_cb .Itoa (_fabe );return _baed ,_gfca ;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_fac BinaryExpr )Update (q *_adf .UpdateQuery )Expression {_dbb :=_fac ;_dbb ._da =_fac ._da .Update (q );_dbb ._dgf =_fac ._dgf .Update (q );return _dbb ;};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eaggb ,_bcd ,_cgcga :=_bbg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _cgcga .Type ==ResultTypeError {return _cgcga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfgb :=_bcd -_eaggb ;if _gfgb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_gffb :=args [2].ValueNumber ;if _gffb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_gffb *_gfgb /360));};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_fecb PrefixVerticalRange )Update (q *_adf .UpdateQuery )Expression {if q .UpdateType ==_adf .UpdateActionRemoveColumn {_gcfc :=_fecb ;_edac :=_fecb ._begf .String ();if _edac ==q .SheetToUpdate {_fddg :=q .ColumnIdx ;_gcfc ._accfe =_gcf (_fecb ._accfe ,_fddg );_gcfc ._gebgfa =_gcf (_fecb ._gebgfa ,_fddg );};return _gcfc ;};return _fecb ;};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fbge :=_fb .Now ();_ ,_bdfeb :=_fbge .Zone ();_add :=_bbcb +float64 (_fbge .Unix ()+int64 (_bdfeb ))/86400;return MakeNumberResult (_add );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bebb :=args [0].AsNumber ();_abeg :=args [1].AsNumber ();if _bebb .Type !=ResultTypeNumber ||_abeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eeadb :=_ed .Trunc (_bebb .ValueNumber );_cacg :=_ed .Trunc (_abeg .ValueNumber );if _eeadb < _cacg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _eeadb ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_eeadb +_cacg -1);args [1]=MakeNumberResult (_eeadb -1);return Combin (args );};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};func _fcg (_geb []Result ,_dbaae string )(*durationArgs ,Result ){_cgc :=len (_geb );if _cgc !=5&&_cgc !=6{return nil ,MakeErrorResult (_dbaae +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acfa ,_eda ,_dcbc :=_bbg (_geb [0],_geb [1],_dbaae );if _dcbc .Type ==ResultTypeError {return nil ,_dcbc ;};_fbgfg :=_geb [2];if _fbgfg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbaae +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_daddc :=_fbgfg .ValueNumber ;if _daddc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cgf :=_geb [3];if _cgf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbaae +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_caa :=_cgf .ValueNumber ;if _caa < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_aef :=_geb [4];if _aef .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbaae +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_becd :=float64 (int (_aef .ValueNumber ));if !_cggb (_becd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ebec :=0;if _cgc ==6&&_geb [5].Type !=ResultTypeEmpty {_cafc :=_geb [5];if _cafc .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbaae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebec =int (_cafc .ValueNumber );if !_cggba (_ebec ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_dbaae );};};return &durationArgs {_acfa ,_eda ,_daddc ,_caa ,_becd ,_ebec },_daaf ;};var _dbcdd =[...]int {1};func _aaff (_gbg ,_eaa int64 )float64 {return float64 (int (0.5+float64 ((_eaa -_gbg )/86400)))};

// Reference returns an invalid reference for Error.
func (_aag Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_cafb HorizontalRange )horizontalRangeReference ()string {return _g .Sprintf ("\u0025\u0064\u003a%\u0064",_cafb ._eggf ,_cafb ._cgce );};type cumulArgs struct{_ece float64 ;_bdcd float64 ;_agcb float64 ;_eaeda float64 ;_dcge float64 ;_cgcg int ;};

// Eval evaluates and returns the result of a function call.
func (_aada FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_badee :=LookupFunction (_aada ._gfabg );if _badee !=nil {_cabd :=make ([]Result ,len (_aada ._fbdg ));for _befe ,_eafb :=range _aada ._fbdg {_cabd [_befe ]=_eafb .Eval (ctx ,ev );_cabd [_befe ].Ref =_eafb .Reference (ctx ,ev );};if _ ,_bbcfe :=_aaee [_aada ._gfabg ];!_bbcfe {if _cbbb ,_eefcd :=_fadb (_cabd );_cbbb {return _eefcd ;};};return _badee (_cabd );};_eeee :=LookupFunctionComplex (_aada ._gfabg );if _eeee !=nil {_eabdb :=make ([]Result ,len (_aada ._fbdg ));for _efgg ,_bgdc :=range _aada ._fbdg {_eabdb [_efgg ]=_bgdc .Eval (ctx ,ev );_eabdb [_efgg ].Ref =_bgdc .Reference (ctx ,ev );};if _ ,_edabe :=_aaee [_aada ._gfabg ];!_edabe {if _acdb ,_gedbd :=_fadb (_eabdb );_acdb {return _gedbd ;};};return _eeee (ctx ,ev ,_eabdb );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_aada ._gfabg );};func _aagf (_bdcg yyLexer )int {return _cebf ().Parse (_bdcg )};func _ceag (_bbde []Result ,_cdfd []string ,_cfae bool )[]string {for _ ,_baaf :=range _bbde {switch _baaf .Type {case ResultTypeEmpty :if !_cfae {_cdfd =append (_cdfd ,"");};case ResultTypeString :if _baaf .ValueString !=""||!_cfae {_cdfd =append (_cdfd ,_baaf .ValueString );};case ResultTypeNumber :_cdfd =append (_cdfd ,_baaf .Value ());case ResultTypeList :_cdfd =_acbgc (_cdfd ,_ceag (_baaf .ValueList ,[]string {},_cfae ));case ResultTypeArray :for _ ,_ccfa :=range _baaf .ValueArray {_cdfd =_acbgc (_cdfd ,_ceag (_ccfa ,[]string {},_cfae ));};};};return _cdfd ;};type xargs struct{_deff []float64 ;_ccf []float64 ;};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_dacg ,_cbbec :=_cabfd ("\u0046\u0049\u004e\u0044",args );if _cbbec .Type !=ResultTypeEmpty {return _cbbec ;};_caaae :=_eg .ToLower (_dacg ._gcaeg );_bffaa :=_eg .ToLower (_dacg ._cfddd );if _caaae ==""{return MakeNumberResult (1.0);};_gdee :=_dacg ._bbfga -1;_dbcad :=1;_eafa :=0;for _fccb :=range _bffaa {if _fccb !=0{_ebcdc :=1;if _fccb -_eafa > 1{_ebcdc =2;};_dbcad +=_ebcdc ;};if _dbcad > _gdee {_efad :=_b .Index (_caaae ,_bffaa [_fccb :]);if _efad ==0{return MakeNumberResult (float64 (_dbcad ));};};_eafa =_fccb ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _ede (_aa BinOpType ,_fbg ,_db [][]Result )Result {_fa :=[][]Result {};for _ea :=range _fbg {_fbf :=_baf (_aa ,_fbg [_ea ],_db [_ea ]);if _fbf .Type ==ResultTypeError {return _fbf ;};_fa =append (_fa ,_fbf .ValueList );};return MakeArrayResult (_fa );};

// String returns a string representation of String.
func (_dafba String )String ()string {return "\u0022"+_dafba ._acddc +"\u0022"};const (_gafb countMode =iota ;_cedc ;_dbac ;);const _abdbe =57377;

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_dddg :=len (args );if _dddg !=4&&_dddg !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ffeb ,_gceb ,_gbaa :=_bbg (args [0],args [1],"\u0044\u0049\u0053\u0043");if _gbaa .Type ==ResultTypeError {return _gbaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gabg :=args [2].ValueNumber ;if _gabg <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbgdb :=args [3].ValueNumber ;if _fbgdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaedg :=0;if _dddg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaedg =int (args [4].ValueNumber );if !_cggba (_eaedg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_dgge ,_gbaa :=_bbbb (_ffeb ,_gceb ,_eaedg );if _gbaa .Type ==ResultTypeError {return _gbaa ;};return MakeNumberResult ((_fbgdb -_gabg )/_fbgdb /_dgge );};func (_eab *evCache )GetFromCache (key string )(Result ,bool ){_eab ._def .Lock ();_fdgb ,_fcae :=_eab ._ag [key ];_eab ._def .Unlock ();return _fdgb ,_fcae ;};type couponArgs struct{_bfd float64 ;_cdee float64 ;_cdgb int ;_fgfa int ;};

// Reference returns a string reference value to a cell.
func (_ccg CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_ccg ._aded };};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cde :=int (args [0].ValueNumber );if _cde < 0||_cde >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _cde <=1899{_cde +=1900;};_abfe :=_fb .Month (args [1].ValueNumber );_cdc :=int (args [2].ValueNumber );_fgg :=_cdaa (_cde ,_abfe ,_cdc );_dgg :=_aaff (_be ,_fgg )+1;if _dgg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_dgg );};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgge :=args [0].AsNumber ();if _bgge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbcbb :=float64 (1);if _bgge .ValueNumber < 0{_bbcbb =-1;};if len (args )> 1{_abdeg :=args [1].AsNumber ();if _abdeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbcbb =_ed .Abs (_abdeg .ValueNumber );};if len (args )==1{return MakeNumberResult (_ed .Ceil (_bgge .ValueNumber ));};_cfdfe :=_bgge .ValueNumber ;_cfdfe ,_ddag :=_ed .Modf (_cfdfe /_bbcbb );if _ddag !=0{if _bgge .ValueNumber > 0{_cfdfe ++;};};return MakeNumberResult (_cfdfe *_bbcbb );};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bggda :=args [0].AsNumber ();if _bggda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggad :=int (_bggda .ValueNumber );if _ggad < 0||_ggad > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_g .Sprintf ("\u0025\u0063",_ggad ));};var _daaf Result =MakeEmptyResult ();

// String returns an empty string for Error.
func (_bbc Error )String ()string {return ""};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_dfegg ,_bgcb :=_fcg (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _bgcb .Type ==ResultTypeError {return _bgcb ;};_gagbd :=_dfegg ._cdgd ;_bdcc :=_dfegg ._ccdf ;_adda :=_dfegg ._bgffb ;_ebdg :=_dfegg ._cbcg ;_geege :=_dfegg ._ecde ;_ccge :=_dfegg ._cega ;return _gff (_gagbd ,_bdcc ,_adda ,_ebdg ,_geege ,_ccge );};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_fbc ,_af :=_cb .ParseBool (v );if _af !=nil {_ba .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_af );};return Bool {_ebf :_fbc };};

// Reference returns a string reference value to a horizontal range.
func (_ecdc HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_ecdc .horizontalRangeReference ()};};func _cdeg (_ffaae ,_addbb int )string {const TOKSTART =4;if !_eeac {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_efbf :=range _facab {if _efbf ._fdccc ==_ffaae &&_efbf ._abfgb ==_addbb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_efbf ._effde ;};};_ddfb :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_ccfd (_addbb );_ccfdg :=make ([]int ,0,4);_abdg :=_deggb [_ffaae ];for _bfbdg :=TOKSTART ;_bfbdg -1< len (_egcbd );_bfbdg ++{if _fafde :=_abdg +_bfbdg ;_fafde >=0&&_fafde < _gcbec &&_bfec [_gebad [_fafde ]]==_bfbdg {if len (_ccfdg )==cap (_ccfdg ){return _ddfb ;};_ccfdg =append (_ccfdg ,_bfbdg );};};if _ddeb [_ffaae ]==-2{_egeg :=0;for _eeae [_egeg ]!=-1||_eeae [_egeg +1]!=_ffaae {_egeg +=2;};for _egeg +=2;_eeae [_egeg ]>=0;_egeg +=2{_fbec :=_eeae [_egeg ];if _fbec < TOKSTART ||_eeae [_egeg +1]==0{continue ;};if len (_ccfdg )==cap (_ccfdg ){return _ddfb ;};_ccfdg =append (_ccfdg ,_fbec );};if _eeae [_egeg +1]!=0{return _ddfb ;};};for _bdcf ,_aaac :=range _ccfdg {if _bdcf ==0{_ddfb +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_ddfb +="\u0020\u006f\u0072\u0020";};_ddfb +=_ccfd (_aaac );};return _ddfb ;};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbc :=ctx .GetEpoch ();_gfaa ,_cfbf :=_cggbb (args [0].Value (),_gbc );if _cfbf !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_gfaa .Year ()));};var _cac =map[string ]*_cd .Regexp {};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_befdb :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_abcag :=args [1].ValueNumber !=0;_bcca :=_ceag (args [2:],[]string {},_abcag );return MakeStringResult (_eg .Join (_bcca ,_befdb ));};func init (){_cfeg ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_bcgd *ivr )GetLabelPrefix (cellRef string )string {return ""};func _ced (_eca int )int {if _eca < 1900{if _eca < 30{_eca +=2000;}else {_eca +=1900;};};return _eca ;};const _ggbaa =57361;

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func (_dddb *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_bbge :=args [0];if _bbge .Type ==ResultTypeError {return _bbge ;};if _bbge .Type !=ResultTypeString &&_bbge .Type !=ResultTypeNumber &&_bbge .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_cafa :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gagbb :=int (args [1].ValueNumber );if _gagbb < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_ccbg :=int (args [2].ValueNumber );if _ccbg < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_aggd :=len (_cafa );if _gagbb > _aggd {return MakeStringResult ("");};_gagbb --;_fcebd :=_gagbb +_ccbg ;if _fcebd > _aggd {return MakeStringResult (_cafa [_gagbb :]);}else {return MakeStringResult (_cafa [_gagbb :_fcebd ]);};};

// HasFormula returns FALSE for the invalid reference context.
func (_afgcd *ivr )HasFormula (cellRef string )bool {return false };func _ebd (_bafg string )(int ,int ,float64 ,bool ,bool ,Result ){_aabd :="";_aacd :=[]string {};for _aaec ,_ccee :=range _gf {_aacd =_ccee .FindStringSubmatch (_bafg );if len (_aacd )> 1{_aabd =_aaec ;break ;};};if _aabd ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};_dbdg :=_aacd [1]=="";_aacd =_aacd [49:];_eee :=len (_aacd );_ccce :=_aacd [_eee -1];_aeg :=_ccce =="\u0061\u006d";_abfa :=_ccce =="\u0070\u006d";var _dfe ,_gfg int ;var _dfc float64 ;var _edb error ;switch _aabd {case "\u0068\u0068":_dfe ,_edb =_cb .Atoi (_aacd [0]);if _edb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};_gfg =0;_dfc =0;case "\u0068\u0068\u003am\u006d":_dfe ,_edb =_cb .Atoi (_aacd [0]);if _edb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};_gfg ,_edb =_cb .Atoi (_aacd [2]);if _edb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};_dfc =0;case "\u006d\u006d\u003as\u0073":_dfe =0;_gfg ,_edb =_cb .Atoi (_aacd [0]);if _edb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};_dfc ,_edb =_cb .ParseFloat (_aacd [2],64);if _edb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_dfe ,_edb =_cb .Atoi (_aacd [0]);if _edb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};_gfg ,_edb =_cb .Atoi (_aacd [2]);if _edb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};_dfc ,_edb =_cb .ParseFloat (_aacd [4],64);if _edb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};};if _gfg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};if _aeg ||_abfa {if _dfe > 12||_dfc >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );}else if _dfe ==12{_dfe =0;};}else if _dfe >=24||_dfc >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dfa );};return _dfe ,_gfg ,_dfc ,_abfa ,_dbdg ,_daaf ;};func _efab (_bbab []Result )(float64 ,float64 ,Result ){_fafd :=0.0;_fbbba :=1.0;for _ ,_bfce :=range _bbab {switch _bfce .Type {case ResultTypeNumber :_fafd +=_bfce .ValueNumber ;_fbbba *=_fbcg (_bfce .ValueNumber );case ResultTypeList ,ResultTypeArray :_aaedcb ,_dgga ,_fedd :=_efab (_bfce .ListValues ());_fafd +=_aaedcb ;_fbbba *=_fbcg (_dgga );if _fedd .Type ==ResultTypeError {return 0,0,_fedd ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_bfce ;};};return _fafd ,_fbbba ,_daaf ;};func _cdeeg (_fafdd []Result ,_bddc bool )(float64 ,float64 ){_dcbfg :=0.0;_bgacc :=0.0;for _ ,_dfdgf :=range _fafdd {switch _dfdgf .Type {case ResultTypeNumber :if _bddc ||!_dfdgf .IsBoolean {_bgacc +=_dfdgf .ValueNumber ;_dcbfg ++;};case ResultTypeList ,ResultTypeArray :_aeef ,_eeaa :=_cdeeg (_dfdgf .ListValues (),_bddc );_bgacc +=_aeef ;_dcbfg +=_eeaa ;case ResultTypeString :if _bddc {_dcbfg ++;};case ResultTypeEmpty :};};return _bgacc ,_dcbfg ;};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_gcbe ,_dead :=_fcg (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _dead .Type ==ResultTypeError {return _dead ;};_adaa :=_gcbe ._cdgd ;_bebdf :=_gcbe ._ccdf ;_adfc :=_gcbe ._bgffb ;_gcdg :=_gcbe ._cbcg ;_bbed :=_gcbe ._ecde ;_dgdc :=_gcbe ._cega ;_caab :=_gff (_adaa ,_bebdf ,_adfc ,_gcdg ,_bbed ,_dgdc );if _caab .Type ==ResultTypeError {return _caab ;};_bafa :=_caab .ValueNumber /(1.0+_gcdg /_bbed );return MakeNumberResult (_bafa );};func _fdcff (_ccfg ,_egcb Result ,_gefba string )(*xargs ,Result ){if _ccfg .Type !=ResultTypeList &&_ccfg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gefba +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_cgdc :=_cbcf (_ccfg );_bceb :=[]float64 {};for _ ,_cfge :=range _cgdc {for _ ,_bfdd :=range _cfge {if _bfdd .Type ==ResultTypeNumber &&!_bfdd .IsBoolean {_bceb =append (_bceb ,_bfdd .ValueNumber );}else {return nil ,MakeErrorResult (_gefba +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_eadc :=len (_bceb );if len (_bceb )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _egcb .Type !=ResultTypeList &&_egcb .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gefba +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_bddf :=_cbcf (_egcb );_eegc :=[]float64 {};_dafb :=0.0;for _ ,_gceg :=range _bddf {for _ ,_bbbf :=range _gceg {if _bbbf .Type ==ResultTypeNumber &&!_bbbf .IsBoolean {_ddgab :=float64 (int (_bbbf .ValueNumber ));if _ddgab < _dafb {return nil ,MakeErrorResultType (ErrorTypeNum ,_gefba +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_eegc =append (_eegc ,_ddgab );_dafb =_ddgab ;}else {return nil ,MakeErrorResult (_gefba +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_eegc )!=_eadc {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_bceb ,_eegc },MakeEmptyResult ();};var (_ggfd =0;_eeac =false ;);const _fcff =57376;func _dgfaf (_gbb ,_gafa _fb .Time ,_eebb ,_ecdfg int )_fb .Time {_gaed :=_gafa ;_acgb :=_gbb .Year ()-_gafa .Year ();_gaed =_gaed .AddDate (_acgb ,0,0);if _gbb .After (_gaed ){_gaed =_gaed .AddDate (1,0,0);};_egee :=-12/_eebb ;for _gaed .After (_gbb ){_gaed =_gaed .AddDate (0,_egee ,0);};return _gaed ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_acfec :=_fdged (args );_ad .Float64s (_acfec );var _dfgaf float64 ;if len (_acfec )%2==0{_dfgaf =(_acfec [len (_acfec )/2-1]+_acfec [len (_acfec )/2])/2;}else {_dfgaf =_acfec [len (_acfec )/2];};return MakeNumberResult (_dfgaf );};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_decg :=args [0];if _decg .Type ==ResultTypeList {_gccg :=[][]Result {};for _ ,_fcec :=range _decg .ValueList {_gccg =append (_gccg ,[]Result {_fcec });};return MakeArrayResult (_gccg );};_agac :=make ([][]Result ,len (_decg .ValueArray [0]));for _ ,_bdde :=range _decg .ValueArray {for _ggdgg ,_efca :=range _bdde {_agac [_ggdgg ]=append (_agac [_ggdgg ],_efca );};};return MakeArrayResult (_agac );};type plex struct{_ddaba chan *node ;_bdabe Expression ;_gggfff string ;};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcaf :=args [0].ValueNumber ;if _gcaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dece :=args [1].ValueNumber ;if _dece <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccda :=args [2].ValueNumber ;if _ccda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_ed .Pow (_ccda /_dece ,1/_gcaf )-1);};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_aedb ,_ffef string };var _aecf ,_cadc ,_cgggg ,_facf ,_decc ,_ebce *_cd .Regexp ;

// Update returns the same object as updating sheet references does not affect Number.
func (_agec Number )Update (q *_adf .UpdateQuery )Expression {return _agec };

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_cbde ,_bbeb :=_ffdf (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _bbeb .Type ==ResultTypeError {return _bbeb ;};_eaddg :=_cbde ._ece ;_efbb :=_cbde ._bdcd ;_abe :=_cbde ._agcb ;_cfc :=_cbde ._eaeda ;_addg :=_cbde ._dcge ;_cedd :=_cbde ._cgcg ;_ddgc :=_abca (_eaddg ,_efbb ,_abe ,0,_cedd );_facb :=0.0;if _cfc ==1{if _cedd ==0{_facb =_ddgc +_abe *_eaddg ;}else {_facb =_ddgc ;};_cfc ++;};for _dceg :=_cfc ;_dceg <=_addg ;_dceg ++{if _cedd ==1{_facb +=_ddgc -(_dfgc (_eaddg ,_dceg -2,_ddgc ,_abe ,1)-_ddgc )*_eaddg ;}else {_facb +=_ddgc -_dfgc (_eaddg ,_dceg -1,_ddgc ,_abe ,0)*_eaddg ;};};return MakeNumberResult (_facb );};func (_afbfc ReferenceType )String ()string {if _afbfc >=ReferenceType (len (_gdcb )-1){return _g .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_afbfc );};return _dcdg [_gdcb [_afbfc ]:_gdcb [_afbfc +1]];};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_adag :=len (args );if _adag !=6&&_adag !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gebe ,_eacc ,_abcc :=_bbg (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _abcc .Type ==ResultTypeError {return _abcc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdgd :=args [2].ValueNumber ;if _gdgd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_agg :=args [3].ValueNumber ;if _agg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gegf :=args [4].ValueNumber ;if _gegf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geae :=args [5];if _geae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_acfe :=_geae .ValueNumber ;if !_cggb (_acfe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gbcc :=0;if _adag ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbcc =int (args [6].ValueNumber );if !_cggba (_gbcc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_bfgc ,_abcc :=_bdea (_gebe ,_eacc ,_gdgd ,_agg ,_gegf ,_acfe ,_gbcc );if _abcc .Type ==ResultTypeError {return _abcc ;};return MakeNumberResult (_bfgc );};func _daa (_ee ,_dcec [][]Result )bool {if len (_ee )!=len (_dcec ){return false ;};for _daad :=range _ee {if len (_ee [_daad ])!=len (_dcec [_daad ]){return false ;};};return true ;};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adfcgf :=args [0].AsNumber ();if _adfcgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_ed .Pi *_adfcgf .ValueNumber );};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_efdg :=[]float64 {};for _ ,_bbag :=range args {switch _bbag .Type {case ResultTypeString :_acceb :=_bbag .AsNumber ();if _acceb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efdg =append (_efdg ,_acceb .ValueNumber );case ResultTypeList :_fegf :=LCM (_bbag .ValueList );if _fegf .Type !=ResultTypeNumber {return _fegf ;};_efdg =append (_efdg ,_fegf .ValueNumber );case ResultTypeNumber :_efdg =append (_efdg ,_bbag .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _bbag ;};};if len (_efdg )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _efdg [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_efdg )==1{return MakeNumberResult (_efdg [0]);};_befcd :=_efdg [0];for _aeaf :=1;_aeaf < len (_efdg );_aeaf ++{if _efdg [_aeaf ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_befcd =_adfb (_befcd ,_efdg [_aeaf ]);};return MakeNumberResult (_befcd );};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_fbdee :=args [0].AsNumber ();_bcgg :=args [1].AsNumber ();if _fbdee .Type ==ResultTypeNumber &&_bcgg .Type ==ResultTypeNumber {_caecfc :=_ed .Atan2 (_bcgg .ValueNumber ,_fbdee .ValueNumber );if _caecfc !=_caecfc {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_caecfc );};for _ ,_eada :=range []ResultType {_fbdee .Type ,_bcgg .Type }{switch _eada {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _fbdee ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eada ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _dedbe (args ,true )};

// LastRow returns 0 for the invalid reference context.
func (_cfade *ivr )LastRow (colFrom string )int {return 0};func (_ccdb VerticalRange )verticalRangeReference ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_ccdb ._aedb ,_ccdb ._ffef );};func _eadac (_efde Result )*criteriaParsed {_cggf :=_efde .Type ==ResultTypeNumber ;_dccg :=_efde .ValueNumber ;_ecbg :=_eg .ToLower (_efde .ValueString );_gccd :=_acdea (_ecbg );return &criteriaParsed {_cggf ,_dccg ,_ecbg ,_gccd };};func _fgge (_dcfe []Result )Result {_edgb :=_dcfe [0].ValueArray ;if len (_dcfe )==1{_gaaa :=[][]Result {};for _ ,_efeb :=range _edgb {_gaaa =append (_gaaa ,_beff ([]Result {MakeListResult (_efeb )}).ValueList );};return MakeArrayResult (_gaaa );}else if len (_dcfe )==2{_bgfd :=len (_edgb );_gefc :=len (_edgb [0]);_gfecf :=_dgfe (_dcfe [1],_bgfd ,_gefc );_dfdg :=len (_gfecf );_agdcg :=[][]Result {};var _efaag []Result ;for _cgaf ,_ebcag :=range _edgb {if _cgaf < _dfdg {_efaag =_gfecf [_cgaf ];}else {_efaag =_aafd (MakeErrorResultType (ErrorTypeNA ,""),_gefc );};_agdcg =append (_agdcg ,_beff ([]Result {MakeListResult (_ebcag ),MakeListResult (_efaag )}).ValueList );};return MakeArrayResult (_agdcg );}else if len (_dcfe )==3{_dcff :=len (_edgb );_febge :=len (_edgb [0]);_bebga :=_dgfe (_dcfe [1],_dcff ,_febge );_cdce :=_dgfe (_dcfe [2],_dcff ,_febge );_bfeedc :=len (_bebga );_fbcd :=len (_cdce );_cfab :=[][]Result {};var _fffg ,_eefe []Result ;for _efcb ,_ddbb :=range _edgb {if _efcb < _bfeedc {_fffg =_bebga [_efcb ];}else {_fffg =_aafd (MakeErrorResultType (ErrorTypeNA ,""),_febge );};if _efcb < _fbcd {_eefe =_cdce [_efcb ];}else {_eefe =_aafd (MakeErrorResultType (ErrorTypeNA ,""),_febge );};_cfab =append (_cfab ,_beff ([]Result {MakeListResult (_ddbb ),MakeListResult (_fffg ),MakeListResult (_eefe )}).ValueList );};return MakeArrayResult (_cfab );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_eecb :=len (args );if _eecb !=2&&_eecb !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_edca ,_dafa :=_fdcff (args [0],args [1],"\u0058\u0049\u0052\u0052");if _dafa .Type ==ResultTypeError {return _dafa ;};_cfeed :=_edca ._deff ;_gdgcf :=_edca ._ccf ;_cace :=0.1;if _eecb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cace =args [2].ValueNumber ;if _cace <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _dgcb (_cfeed ,_gdgcf ,_cace );};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_deec PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_ddee :=_deec ._eabg .Reference (ctx ,ev );_cgec :=_deec ._ffcgd .Reference (ctx ,ev );_fdcfe :=_deec ._gefgc .Reference (ctx ,ev );switch _ddee .Type {case ReferenceTypeSheet :if _ebbgb (_ddee ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ddee .Value ));};_gabbc :=_fefba (_ddee ,_cgec ,_fdcfe );if _cgec .Type ==ReferenceTypeCell &&_fdcfe .Type ==ReferenceTypeCell {if _ebeef ,_gdeg :=ev .GetFromCache (_gabbc );_gdeg {return _ebeef ;}else {_ddabd :=_bdbf (ctx .Sheet (_ddee .Value ),ev ,_cgec .Value ,_fdcfe .Value );ev .SetCache (_gabbc ,_ddabd );return _ddabd ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gabbc );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddee .Type ));};};func (_dgde Result )AsString ()Result {switch _dgde .Type {case ResultTypeNumber :return MakeStringResult (_dgde .Value ());default:return _dgde ;};};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Reference returns an invalid reference for BinaryExpr.
func (_dad BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_gfbfa :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfbfa =int (args [1].ValueNumber );if _gfbfa < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _gfbfa ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cdff :=args [0].Value ();_cgbcgg :=len (_cdff );if _gfbfa > _cgbcgg {return MakeStringResult (_cdff );};return MakeStringResult (_cdff [_cgbcgg -_gfbfa :_cgbcgg ]);};

// Reference returns a string reference value to a horizontal range with prefix.
func (_fefe PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_acbge :=_fefe ._gagag .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_fefe .horizontalRangeReference (_acbge .Value )};};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_ebeeb PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gaabg :=_ebeeb ._gagag .Reference (ctx ,ev );switch _gaabg .Type {case ReferenceTypeSheet :if _ebbgb (_gaabg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gaabg .Value ));};_eafee :=_ebeeb .horizontalRangeReference (_gaabg .Value );if _aaddaf ,_ddaab :=ev .GetFromCache (_eafee );_ddaab {return _aaddaf ;};_badb :=ctx .Sheet (_gaabg .Value );_fgdgb ,_fgedc :=_gffa (_badb ,_ebeeb ._fdeff ,_ebeeb ._fcbaed );_gdeacb :=_bdbf (_badb ,ev ,_fgdgb ,_fgedc );ev .SetCache (_eafee ,_gdeacb );return _gdeacb ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gaabg .Type ));};};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_fedc ,_fcdd :=_ffdf (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _fcdd .Type ==ResultTypeError {return _fcdd ;};_baffg :=_fedc ._ece ;_fdcc :=_fedc ._bdcd ;_dccd :=_fedc ._agcb ;_fcga :=_fedc ._eaeda ;_dbga :=_fedc ._dcge ;_ecef :=_fedc ._cgcg ;_fgfg :=_abca (_baffg ,_fdcc ,_dccd ,0,_ecef );_gegge :=0.0;if _fcga ==1{if _ecef ==0{_gegge =-_dccd ;_fcga ++;};};for _fcc :=_fcga ;_fcc <=_dbga ;_fcc ++{if _ecef ==1{_gegge +=_dfgc (_baffg ,_fcc -2,_fgfg ,_dccd ,1)-_fgfg ;}else {_gegge +=_dfgc (_baffg ,_fcc -1,_fgfg ,_dccd ,0);};};_gegge *=_baffg ;return MakeNumberResult (_gegge );};const _cacec =57359;const _bcgbe =57344;

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_gdgc ,_gfe :=_dgea (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _gfe .Type ==ResultTypeError {return _gfe ;};_aaag :=_eecd (_gdgc ._bfd );_begc :=_eecd (_gdgc ._cdee );_cdebb :=_gdgc ._cdgb ;_ebde :=_gdgc ._fgfa ;_gadc :=_dgfaf (_aaag ,_begc ,_cdebb ,_ebde );_fba ,_gafd ,_debd :=_gadc .Date ();return MakeNumberResult (_aac (_fba ,int (_gafd ),_debd ));};func _ecdd (_gefgb string )string {_gefgb =_eg .Replace (_gefgb ,"\u000a","\u005c\u006e",-1);_gefgb =_eg .Replace (_gefgb ,"\u000d","\u005c\u0072",-1);_gefgb =_eg .Replace (_gefgb ,"\u0009","\u005c\u0074",-1);return _gefgb ;};

// Reference returns an invalid reference for Number.
func (_gggaa Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_ebbae *ivr )SetOffset (col ,row uint32 ){};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_feab HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_abba :=_feab .horizontalRangeReference ();if _feef ,_eged :=ev .GetFromCache (_abba );_eged {return _feef ;};_gege ,_adcae :=_gffa (ctx ,_feab ._eggf ,_feab ._cgce );_dcbfb :=_bdbf (ctx ,ev ,_gege ,_adcae );ev .SetCache (_abba ,_dcbfb );return _dcbfb ;};func (_bgab *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Error is an error expression.
type Error struct{_cgba string };func _ggb (_bebg ,_agd float64 ,_aadd ,_acg int )float64 {_bbf :=_eecd (_bebg );_feaa :=_eecd (_agd );_dca :=_dgfaf (_bbf ,_feaa ,_aadd ,_acg );return _ddfe (_dca ,_bbf ,_acg );};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_dgaf :=args [0];if _dgaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gfed :=int (_dgaf .ValueNumber );if _gfed < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_gfed {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_gfed ];};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_bgbg :=len (args );if _bgbg !=4&&_bgbg !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_egdd ,_daag ,_adbc :=_bbg (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _adbc .Type ==ResultTypeError {return _adbc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgbaa :=args [2].ValueNumber ;if _cgbaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfcd :=args [3].ValueNumber ;if _bfcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebcd :=0;if _bgbg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebcd =int (args [4].ValueNumber );if !_cggba (_ebcd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_gegdg ,_adbc :=_bbbb (_egdd ,_daag ,_ebcd );if _adbc .Type ==ResultTypeError {return _adbc ;};return MakeNumberResult (_cgbaa /(1-_bfcd *_gegdg ));};const (_ggfcc cmpResult =0;_fedb cmpResult =-1;_fgbd cmpResult =1;_cefcc cmpResult =2;);func (_bccdc ResultType )String ()string {if _bccdc >=ResultType (len (_agddb )-1){return _g .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bccdc );};return _bdcga [_agddb [_bccdc ]:_agddb [_bccdc +1]];};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_acgc :=_eg .Split (v ,"\u003a");if len (_acgc )!=2{return nil ;};if _acgc [0]> _acgc [1]{_acgc [0],_acgc [1]=_acgc [1],_acgc [0];};return VerticalRange {_aedb :_acgc [0],_ffef :_acgc [1]};};func _eaag (_dadgb ,_fbfad ,_gfda ,_debg ,_eabdd float64 )float64 {var _fbdd float64 ;_fcgc :=_eabdd /_gfda ;if _fcgc >=1{_fcgc =1;if _debg ==1{_fbdd =_dadgb ;}else {_fbdd =0;};}else {_fbdd =_dadgb *_ed .Pow (1-_fcgc ,_debg -1);};_gcae :=_dadgb *_ed .Pow (1-_fcgc ,_debg );var _gcgc float64 ;if _gcae < _fbfad {_gcgc =_fbdd -_fbfad ;}else {_gcgc =_fbdd -_gcae ;};if _gcgc < 0{_gcgc =0;};return _gcgc ;};func _aac (_fea ,_fgbg ,_feb int )float64 {return float64 (_cdaa (_fea ,_fb .Month (_fgbg ),_feb )/86400)+_bbcb ;};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_eed ,_fffd :=_bacd (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _fffd .Type ==ResultTypeError {return _fffd ;};_fffc :=_eed ._gacd ;_gacc :=_eed ._bga ;_bbcg :=_eed ._eege ;_fgcd :=_eed ._fdcg ;_affc :=_eed ._edgg ;_gefb :=_eed ._gdbe ;if _gefb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_dcca :=_eed ._bdae ;_fbb :=1.0/_gefb ;_efb :=2.5;if _fbb < 3{_efb =1;}else if _fbb < 5{_efb =1.5;}else if _fbb <=6{_efb =2;};_gefb *=_efb ;_begg ,_bded :=_bbbb (_gacc ,_bbcg ,_dcca );if _bded .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_gdce :=_effc (_begg *_gefb *_fffc );_fffc -=_gdce ;_dec :=_fffc -_fgcd ;for _fad :=0;_fad < _affc ;_fad ++{_gdce =_effc (_gefb *_fffc );_dec -=_gdce ;if _dec < 0{switch _affc -_fad {case 0:case 1:return MakeNumberResult (_effc (_fffc *0.5));default:return MakeNumberResult (0);};};_fffc -=_gdce ;};return MakeNumberResult (_gdce );};func _bacd (_debc []Result ,_faaaf string )(*amorArgs ,Result ){_dgcg :=len (_debc );if _dgcg !=6&&_dgcg !=7{return nil ,MakeErrorResult (_faaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _debc [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faaaf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ccgb :=_debc [0].ValueNumber ;if _ccgb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_faaaf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_gdbeg ,_bgbc :=_febg (_debc [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_faaaf );if _bgbc .Type ==ResultTypeError {return nil ,_bgbc ;};_baaa ,_bgbc :=_febg (_debc [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_faaaf );if _bgbc .Type ==ResultTypeError {return nil ,_bgbc ;};if _baaa < _gdbeg {return nil ,MakeErrorResultType (ErrorTypeNum ,_faaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _debc [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdee :=_debc [3].ValueNumber ;if _bdee < 0||_bdee > _ccgb {return nil ,MakeErrorResultType (ErrorTypeNum ,_faaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _debc [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faaaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgddc :=int (_debc [4].ValueNumber );if _fgddc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_faaaf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _debc [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faaaf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cgbc :=_debc [5].ValueNumber ;if _cgbc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_faaaf +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_bfe :=0;if _dgcg ==7&&_debc [6].Type !=ResultTypeEmpty {if _debc [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_faaaf +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfe =int (_debc [6].ValueNumber );if !_cggba (_bfe )||_bfe ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_faaaf );};};return &amorArgs {_ccgb ,_gdbeg ,_baaa ,_bdee ,_fgddc ,_cgbc ,_bfe },_daaf ;};

// Update updates the horizontal range references after removing a row/column.
func (_cada HorizontalRange )Update (q *_adf .UpdateQuery )Expression {return _cada };

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abccg :=args [0].AsString ();if _abccg .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_eg .ToUpper (_abccg .ValueString ));};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_bcf [][]Expression };func _eecd (_ecdf float64 )_fb .Time {_aca :=int64 ((_ecdf -_bbcb )*_afdb );return _fb .Unix (0,_aca ).UTC ();};const _edce =57354;

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ggbdg :=args [0].Ref ;if _ggbdg .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_cgca ,_daba :=_fg .ParseCellReference (_ggbdg .Value );if _daba !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ggbdg .Value );};return MakeNumberResult (float64 (_cgca .RowIdx ));};func _agdfd (_cbfc ,_bfbfd Result ,_aedab ,_abed bool )cmpResult {_cbfc =_cbfc .AsNumber ();_bfbfd =_bfbfd .AsNumber ();if _cbfc .Type !=_bfbfd .Type {return _cefcc ;};if _cbfc .Type ==ResultTypeNumber {if _cbfc .ValueNumber ==_bfbfd .ValueNumber {return _ggfcc ;};if _cbfc .ValueNumber < _bfbfd .ValueNumber {return _fedb ;};return _fgbd ;};if _cbfc .Type ==ResultTypeString {_gffbg :=_cbfc .ValueString ;_adcf :=_bfbfd .ValueString ;if !_aedab {_gffbg =_eg .ToLower (_gffbg );_adcf =_eg .ToLower (_adcf );};if _abed {_aaea :=_b .Match (_adcf ,_gffbg );if _aaea {return _ggfcc ;}else {return _fgbd ;};};return cmpResult (_eg .Compare (_gffbg ,_adcf ));};if _cbfc .Type ==ResultTypeEmpty {return _ggfcc ;};if _cbfc .Type ==ResultTypeList {if len (_cbfc .ValueList )< len (_bfbfd .ValueList ){return _fedb ;};if len (_cbfc .ValueList )> len (_bfbfd .ValueList ){return _fgbd ;};for _adab :=range _cbfc .ValueList {_bcef :=_agdfd (_cbfc .ValueList [_adab ],_bfbfd .ValueList [_adab ],_aedab ,_abed );if _bcef !=_ggfcc {return _bcef ;};};return _ggfcc ;};if _cbfc .Type ==ResultTypeList {if len (_cbfc .ValueArray )< len (_bfbfd .ValueArray ){return _fedb ;};if len (_cbfc .ValueArray )> len (_bfbfd .ValueArray ){return _fgbd ;};for _dbcca :=range _cbfc .ValueArray {_cdcff :=_cbfc .ValueArray [_dbcca ];_dbfd :=_cbfc .ValueArray [_dbcca ];if len (_cdcff )< len (_dbfd ){return _fedb ;};if len (_cdcff )> len (_dbfd ){return _fgbd ;};for _eeda :=range _cdcff {_bfeed :=_agdfd (_cdcff [_eeda ],_dbfd [_eeda ],_aedab ,_abed );if _bfeed !=_ggfcc {return _bfeed ;};};};return _ggfcc ;};return _cefcc ;};

// GetWidth returns 0 for the invalid reference context.
func (_aecfg *ivr )GetWidth (colIdx int )float64 {return float64 (0)};const _ada ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fag *defEval )LastEvalIsRef ()bool {return _fag ._fgc };

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_begf Expression ;_accfe ,_gebgfa string ;};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);type noCache struct{};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fedba :=args [0];if _fedba .Type ==ResultTypeNumber {return _fedba ;};if _fedba .Type ==ResultTypeString {_bbec ,_fffdec :=_cb .ParseFloat (_fedba .Value (),64);if _fffdec ==nil {return MakeNumberResult (_bbec );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};const _ffdce =57378;

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_dbdbb (args ,_gafb ))};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dcbfe :=args [0].AsNumber ();if _dcbfe .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbgfe ,_bafaa :=_ed .Modf (_dcbfe .ValueNumber );if _bafaa < 0{_fbgfe --;};return MakeNumberResult (_fbgfe );};func _cddb (_gacf [][]Result ,_dfaec int )[][]Result {_fegagf :=[][]Result {};for _fdff :=range _gacf {if _fdff ==0{continue ;};_dgac :=[]Result {};for _dgfee :=range _gacf {if _dgfee ==_dfaec {continue ;};_dgac =append (_dgac ,_gacf [_fdff ][_dgfee ]);};_fegagf =append (_fegagf ,_dgac );};return _fegagf ;};const _fgbc ="\u005e\u0028\u0028"+_bff +"\u007c"+_fgd +"\u007c"+_bfff +"\u007c"+_agf +"\u0029\u0020\u0029\u003f";

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_afca ,_dccag ,_efba :=_bbg (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _efba .Type ==ResultTypeError {return _efba ;};_egb ,_efba :=_febg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _efba .Type ==ResultTypeError {return _efba ;};if _egb >=_afca {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cgdg :=args [3].ValueNumber ;if _cgdg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_egba :=args [4].ValueNumber ;if _egba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dceea :=args [5].ValueNumber ;if _dceea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acce :=float64 (int (args [6].ValueNumber ));if !_cggb (_acce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bgbe :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgbe =int (args [7].ValueNumber );if !_cggba (_bgbe ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_ebbef ,_efba :=_bbbb (_egb ,_dccag ,_bgbe );if _efba .Type ==ResultTypeError {return _efba ;};_ebbef *=_acce ;_fbe ,_efba :=_bbbb (_afca ,_dccag ,_bgbe );if _efba .Type ==ResultTypeError {return _efba ;};_fbe *=_acce ;_dbgg ,_efba :=_bbbb (_egb ,_afca ,_bgbe );if _efba .Type ==ResultTypeError {return _efba ;};_dbgg *=_acce ;_acdd :=_dceea +_ebbef *100*_cgdg /_acce ;_acdd /=_egba +_dbgg *100*_cgdg /_acce ;_acdd --;_acdd *=_acce /_fbe ;return MakeNumberResult (_acdd );};func _fadb (_cbdgb []Result )(bool ,Result ){for _ ,_adfbd :=range _cbdgb {if _adfbd .Type ==ResultTypeError {return true ,_adfbd ;};};return false ,MakeEmptyResult ();};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _gdad (args ,_aagg )};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_addb :=args [0];if _addb .Type !=ResultTypeArray &&_addb .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fcdg :=_cbcf (_addb );_bfde :=args [2];if _bfde .Type !=ResultTypeArray &&_bfde .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gfdad :=_cbcf (_bfde );_deaf :=_eadac (args [1]);_efgd :=0.0;for _caead ,_babb :=range _fcdg {for _ecad ,_cgbaf :=range _babb {if _fdaae (_cgbaf ,_deaf ){_efgd +=_gfdad [_caead ][_ecad ].ValueNumber ;};};};return MakeNumberResult (_efgd );};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bcee :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_bcee *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_cgeb :=_cbcf (args [1]);for _ ,_efc :=range _cgeb {for _ ,_dbbf :=range _efc {if _dbbf .Type !=ResultTypeNumber ||_dbbf .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_bcee *=1.0+_dbbf .ValueNumber ;};};return MakeNumberResult (_bcee );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dea :=args [0];switch _dea .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_fdfc :=_eecd (_dea .ValueNumber );return MakeNumberResult (float64 (_fdfc .Day ()));case ResultTypeString :_baa :=_eg .ToLower (_dea .ValueString );if !_cacc (_baa ){_ ,_ ,_ ,_ ,_bgf ,_ceg :=_ebd (_baa );if _ceg .Type ==ResultTypeError {_ceg .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _ceg ;};if _bgf {return MakeNumberResult (0);};};_ ,_ ,_cca ,_ ,_eec :=_ebca (_baa );if _eec .Type ==ResultTypeError {return _eec ;};return MakeNumberResult (float64 (_cca ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};const _bfgb =57365;

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgfa :=args [0];switch _bgfa .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_caff :=_eecd (_bgfa .ValueNumber );return MakeNumberResult (float64 (_caff .Minute ()));case ResultTypeString :_fab :=_eg .ToLower (_bgfa .ValueString );if !_gce (_fab ){_ ,_ ,_ ,_ggfa ,_bfb :=_ebca (_fab );if _bfb .Type ==ResultTypeError {_bfb .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _bfb ;};if _ggfa {return MakeNumberResult (0);};};_ ,_ffff ,_ ,_ ,_ ,_dba :=_ebd (_fab );if _dba .Type ==ResultTypeError {return _dba ;};return MakeNumberResult (float64 (_ffff ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbaca :=int (args [0].ValueNumber );return MakeBoolResult (_fbaca !=_fbaca /2*2);};func _dddgc (_badg []Result ,_fcgbc bool ,_bbfc string )Result {var _gadb ,_ggfac string ;if _fcgbc {_gadb ="\u0074\u0068\u0072e\u0065";_ggfac ="\u006f\u0064\u0064";}else {_gadb ="\u0074\u0077\u006f";_ggfac ="\u0065\u0076\u0065\u006e";};_afef :=len (_badg );if (_fcgbc &&_afef < 3)||(!_fcgbc &&_afef < 2){return MakeErrorResult (_bbfc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_gadb +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_afef /2*2==_afef )==_fcgbc {return MakeErrorResult (_bbfc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ggfac +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_bfdce :=-1;_aadf :=-1;for _acdfb :=0;_acdfb < _afef ;_acdfb +=2{_ggga :=_badg [_acdfb ];if _ggga .Type !=ResultTypeArray &&_ggga .Type !=ResultTypeList {return MakeErrorResult (_bbfc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_cgbg :=_cbcf (_ggga );if _aadf ==-1{_aadf =len (_cgbg );_bfdce =len (_cgbg [0]);}else if len (_cgbg )!=_aadf ||len (_cgbg [0])!=_bfdce {return MakeErrorResult (_bbfc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _fcgbc &&_acdfb ==0{_acdfb --;};};return _daaf ;};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_adea :s }};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aega :=true ;for _ ,_gfcf :=range args {_gfcf =_gfcf .AsNumber ();switch _gfcf .Type {case ResultTypeList ,ResultTypeArray :_bcbcc :=And (_gfcf .ListValues ());if _bcbcc .Type ==ResultTypeError {return _bcbcc ;};if _bcbcc .ValueNumber ==0{_aega =false ;};case ResultTypeNumber :if _gfcf .ValueNumber ==0{_aega =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _gfcf ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_aega );};const _bacg =57369;

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcbd :=args [0].Type ;for _ ,_dbdd :=range args {if _dbdd .Type !=_bcbd {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _bcbd {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_cbgg :=len (args [0].ListValues ());_dfga :=make ([]float64 ,_cbgg );for _gedf :=range _dfga {_dfga [_gedf ]=1.0;};for _ ,_aabff :=range args {if len (_aabff .ListValues ())!=_cbgg {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _dgdbc ,_dfag :=range _aabff .ListValues (){_dfag =_dfag .AsNumber ();if _dfag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_dfga [_dgdbc ]=_dfga [_dgdbc ]*_dfag .ValueNumber ;};};_gcdda :=0.0;for _ ,_dbba :=range _dfga {_gcdda +=_dbba ;};return MakeNumberResult (_gcdda );};return MakeNumberResult (1.0);};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_aae string ,_aed Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_cgg string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_fb .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_faf int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_aff string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_cbf string )string ;

// GetFormat returns if cell is protected.
GetLocked (_ggf string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_deb string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_gcfb string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cda ,_gdc int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_ce string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_dga string ,_ace bool );

// NamedRange returns a named range.
NamedRange (_bb string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_ccd ,_dfg uint32 );};func _bgddg (_dcgd Result ,_gdec ,_eebe string )(float64 ,Result ){switch _dcgd .Type {case ResultTypeEmpty :return 0,_daaf ;case ResultTypeNumber :return _dcgd .ValueNumber ,_daaf ;case ResultTypeString :_gecd ,_gaaeb :=_cb .ParseFloat (_dcgd .ValueString ,64);if _gaaeb !=nil {return 0,MakeErrorResult (_eebe +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_gdec );};return _gecd ,_daaf ;default:return 0,MakeErrorResult (_gdec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_eebe +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};var _agab []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_cdaade :=args [0].AsString ();if _cdaade .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_dfebe :=args [1].AsNumber ();if _dfebe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _dfebe .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _dfebe .ValueNumber ==0{return MakeStringResult ("");};_afbgg :=_d .Buffer {};for _ggac :=0;_ggac < int (_dfebe .ValueNumber );_ggac ++{_afbgg .WriteString (_cdaade .ValueString );};return MakeStringResult (_afbgg .String ());};func (_egd BinOpType )String ()string {if _egd >=BinOpType (len (_ga )-1){return _g .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_egd );};return _gg [_ga [_egd ]:_ga [_egd +1]];};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gdda :=args [0].AsString ();if _gdda .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_gdda .ValueString ,ev );};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_aedg :=MakeNumberResult (0);for _ ,_egeb :=range args {_egeb =_egeb .AsNumber ();switch _egeb .Type {case ResultTypeNumber :_aedg .ValueNumber +=_egeb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_edee :=Sum (_egeb .ListValues ());if _edee .Type !=ResultTypeNumber {return _edee ;};_aedg .ValueNumber +=_edee .ValueNumber ;case ResultTypeString :case ResultTypeError :return _egeb ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egeb .Type ));};};return _aedg ;};func _ead (_ebbf ,_eadd ,_ggca ,_dbff int )int {if _eadd > _ggca {return 0;};if _bgdd (_dbff ){return (_ggca -_eadd +1)*30;};_faea :=0;for _gcde :=_eadd ;_gcde <=_ggca ;_gcde ++{_faea +=_egf (_ebbf ,_gcde );};return _faea ;};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _dcae (args ,false )};func _ffdf (_gdga []Result ,_febc string )(*cumulArgs ,Result ){if len (_gdga )!=6{return nil ,MakeErrorResult (_febc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gdga [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_febc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_edfc :=_gdga [0].ValueNumber ;if _edfc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_febc +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gdga [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_febc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eagg :=_gdga [1].ValueNumber ;if _eagg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_febc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _gdga [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_febc +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daef :=_gdga [2].ValueNumber ;if _daef <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_febc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gdga [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_febc +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gcbf :=_gdga [3].ValueNumber ;if _gcbf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_febc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gdga [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_febc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abab :=_gdga [4].ValueNumber ;if _abab <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_febc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _abab < _gcbf {return nil ,MakeErrorResultType (ErrorTypeNum ,_febc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _abab > _eagg {return nil ,MakeErrorResultType (ErrorTypeNum ,_febc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_facc :=int (_gdga [5].ValueNumber );if _facc !=0&&_facc !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_febc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_edfc ,_eagg ,_daef ,_gcbf ,_abab ,_facc },_daaf ;};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_cfdg :=len (args );if _cfdg < 4||_cfdg > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bffc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebe :=args [1].ValueNumber ;if _cebe <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beggd :=args [2].ValueNumber ;if _beggd < _cebe {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dddf :=args [3].ValueNumber ;_ddaa :=0.0;if _cfdg >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddaa =args [4].ValueNumber ;};_eggc :=0;if _cfdg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eggc =int (args [5].ValueNumber );if _eggc !=0{_eggc =1;};};return MakeNumberResult (_abca (_bffc ,_beggd ,_dddf ,_ddaa ,_eggc )-_ebbe (_bffc ,_cebe ,_beggd ,_dddf ,_ddaa ,_eggc ));};

// LastColumn returns empty string for the invalid reference context.
func (_cfbca *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;const _aece =57352;func _ebba (_affde ,_gabf float64 )float64 {_affde =_ed .Trunc (_affde );_gabf =_ed .Trunc (_gabf );if _affde ==0{return _gabf ;};if _gabf ==0{return _affde ;};for _affde !=_gabf {if _affde > _gabf {_affde =_affde -_gabf ;}else {_gabf =_gabf -_affde ;};};return _affde ;};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceecc :=args [0].AsNumber ();_gfegd :=args [1].AsNumber ();if _ceecc .Type !=ResultTypeNumber ||_gfegd .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efcda :=_ed .Trunc (_ceecc .ValueNumber );_addd :=_ed .Trunc (_gfegd .ValueNumber );if _addd > _efcda {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _addd ==_efcda ||_addd ==0{return MakeNumberResult (1);};_bfefe :=float64 (1);for _dbcd :=float64 (1);_dbcd <=_addd ;_dbcd ++{_bfefe *=(_efcda +1-_dbcd )/_dbcd ;};return MakeNumberResult (_bfefe );};func _ddae (_cefge Result )Result {if _cefge .Type ==ResultTypeEmpty {return _cefge ;};_bgedfg :=_cefge .AsString ();if _bgedfg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _cefge .IsBoolean {if _bgedfg .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _bgedfg .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_eg .ToLower (_bgedfg .ValueString ));};};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _gdad (args ,_fbab )};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_gcdfe :=_dddgc (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _gcdfe .Type !=ResultTypeEmpty {return _gcdfe ;};_ffaac :=_bgcc (args );return MakeNumberResult (float64 (len (_ffaac )));};type Reference struct{Type ReferenceType ;Value string ;};

// Reference returns a string reference value to a range with prefix.
func (_edbge PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_cdead :=_edbge ._eabg .Reference (ctx ,ev );_dedgg :=_edbge ._ffcgd .Reference (ctx ,ev );_abegc :=_edbge ._gefgc .Reference (ctx ,ev );if _cdead .Type ==ReferenceTypeSheet &&_dedgg .Type ==ReferenceTypeCell &&_abegc .Type ==ReferenceTypeCell {return MakeRangeReference (_fefba (_cdead ,_dedgg ,_abegc ));};return ReferenceInvalid ;};type rmode byte ;

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbgfb :=args [0];_eeag :=args [1];if _eeag .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ggbd :=args [2].AsNumber ();if _ggbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgbef :=false ;if len (args )==4{_gaca :=args [3].AsNumber ();if _gaca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gaca .ValueNumber ==0{_cgbef =true ;};};_gcefg :=-1;_edgc :=false ;if len (_eeag .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_gddg :=_eeag .ValueArray [0];_fadc :for _cfcd ,_bbea :=range _gddg {switch _agdfd (_bbea ,_fbgfb ,false ,_cgbef ){case _fedb :_gcefg =_cfcd ;case _ggfcc :_gcefg =_cfcd ;_edgc =true ;break _fadc ;};};if _gcefg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_dacd :=int (_ggbd .ValueNumber )-1;if _dacd < 0||_dacd > len (_eeag .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_gddg =_eeag .ValueArray [_dacd ];if _gcefg < 0||_gcefg >=len (_gddg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _edgc ||!_cgbef {return _gddg [_gcefg ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};type countMode byte ;

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gcfd :=args [0].AsNumber ();if _gcfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfgg :=_ed .Signbit (_gcfd .ValueNumber );_effcf ,_cfcaf :=_ed .Modf (_gcfd .ValueNumber /2);_dedg :=_effcf *2;if _cfcaf !=0{if !_dfgg {_dedg +=2;}else {_dedg -=2;};};return MakeNumberResult (_dedg );};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_fcaeeg :=args [0];if _fcaeeg .Type !=ResultTypeNumber &&_fcaeeg .Type !=ResultTypeString &&_fcaeeg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_dbgc :=args [1].ValueString ;switch _fcaeeg .Type {case ResultTypeNumber :return MakeStringResult (_ff .Number (_fcaeeg .ValueNumber ,_dbgc ));case ResultTypeString :return MakeStringResult (_ff .String (_fcaeeg .ValueString ,_dbgc ));case ResultTypeEmpty :return MakeStringResult (_ff .Number (0,_dbgc ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};type criteriaParsed struct{_gcff bool ;_bccdd float64 ;_cfce string ;_dbbbc *criteriaRegex ;};const _fabcb =57355;

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_cgfef .Float64 ());};func (_cfacf *plex )Lex (lval *yySymType )int {_eeac =true ;_acad :=<-_cfacf ._ddaba ;if _acad !=nil {lval ._fbaa =_acad ;return int (lval ._fbaa ._ecbbf );};return 0;};const _cbag =57360;const _agf ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_dcbe +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _fdfg (_gfc Result ,_aebc *criteriaParsed )bool {if _gfc .Type ==ResultTypeEmpty {return false ;};if _aebc ._gcff {return _gfc .ValueNumber ==_aebc ._bccdd ;}else {_dggf :=_eg .ToLower (_gfc .ValueString );return _aebc ._cfce ==_dggf ||_b .Match (_aebc ._cfce ,_dggf );};};func _fefba (_deae ,_gaeee ,_effe Reference )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_deae .Value ,_gaeee .Value ,_effe .Value );};const _gdfba =57375;

// Db implements the Excel DB function.
func Db (args []Result )Result {_bafdd :=len (args );if _bafdd !=4&&_bafdd !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcdf :=args [0].ValueNumber ;if _gcdf < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdbc :=args [1].ValueNumber ;if _gdbc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgcb :=args [2].ValueNumber ;if _cgcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aea :=args [3].ValueNumber ;if _aea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _aea -_cgcb > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_bfbf :=12.0;if _bafdd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfbf =args [4].ValueNumber ;if _bfbf < 1||_bfbf > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _bfbf ==12&&_aea > _cgcb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _gdbc >=_gcdf {return MakeNumberResult (0);};_bbdg :=1-_ed .Pow (_gdbc /_gcdf ,1/_cgcb );_bbdg =float64 (int (_bbdg *1000+0.5))/1000;_gecf :=_gcdf *_bbdg *_bfbf /12;if _aea ==1{return MakeNumberResult (_gecf );};_aagd :=_gecf ;_gfgf :=0.0;_gca :=_cgcb ;if _gca > _aea {_gca =_aea ;};for _aagag :=2.0;_aagag <=_gca ;_aagag ++{_gfgf =(_gcdf -_aagd )*_bbdg ;_aagd +=_gfgf ;};if _aea > _cgcb {return MakeNumberResult ((_gcdf -_aagd )*_bbdg *(12-_bfbf )/12);};return MakeNumberResult (_gfgf );};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_afbg :=len (args );if (_afbg !=2&&_afbg !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fefdf :=0;if _afbg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fefdf =int (args [2].ValueNumber );if !_cggba (_fefdf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ccaf :=args [1].ValueNumber ;_bgdf ,_bce :=_bbbb (_fcda ,_ccaf ,_fefdf );if _bce .Type ==ResultTypeError {return _bce ;};return MakeNumberResult (_bgdf );};func _ca (_ec BinOpType ,_cbd [][]Result ,_aeb Result )Result {_ac :=[][]Result {};for _adb :=range _cbd {_ef :=_bc (_ec ,_cbd [_adb ],_aeb );if _ef .Type ==ResultTypeError {return _ef ;};_ac =append (_ac ,_ef .ValueList );};return MakeArrayResult (_ac );};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dfdbc :=args [0].AsNumber ();_dcgfg :=args [1].AsNumber ();if _dfdbc .Type !=ResultTypeNumber ||_dcgfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _dcgfg .ValueNumber < _dfdbc .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_cegf :=int64 (_dfdbc .ValueNumber );_dfbgf :=int64 (_dcgfg .ValueNumber );return MakeNumberResult (float64 (_cgfef .Int63n (_dfbgf -_cegf +1)+_cegf ));};const _afgd =57357;func (_cgee *ivr )Sheet (name string )Context {return _cgee };

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_febcc :=args [0];switch _febcc .Type {case ResultTypeError :return _febcc ;case ResultTypeNumber ,ResultTypeString :return _ddae (args [0]);case ResultTypeList :_gdacfd :=_febcc .ValueList ;_fdbe :=[]Result {};for _ ,_adfa :=range _gdacfd {_cbca :=_ddae (_adfa );if _cbca .Type ==ResultTypeError {return _cbca ;};_fdbe =append (_fdbe ,_cbca );};return MakeListResult (_fdbe );case ResultTypeArray :_afcaa :=_febcc .ValueArray ;_faag :=[][]Result {};for _ ,_gegac :=range _afcaa {_gefg :=[]Result {};for _ ,_dgdg :=range _gegac {_dbag :=_ddae (_dgdg );if _dbag .Type ==ResultTypeError {return _dbag ;};_gefg =append (_gefg ,_dbag );};_faag =append (_faag ,_gefg );};return MakeArrayResult (_faag );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_edaa :=args [0].AsNumber ();if _edaa .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afcc :=float64 (1);if _edaa .ValueNumber < 0{_afcc =-1;};if len (args )> 1{_bfefd :=args [1].AsNumber ();if _bfefd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_afcc =_bfefd .ValueNumber ;};_gbacc :=float64 (1);if len (args )> 2{_bbeg :=args [2].AsNumber ();if _bbeg .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbacc =_bbeg .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ed .Floor (_edaa .ValueNumber ));};_ageee :=_edaa .ValueNumber ;_ageee ,_cad :=_ed .Modf (_ageee /_afcc );if _cad !=0&&_edaa .ValueNumber < 0&&_gbacc > 0{_ageee ++;};return MakeNumberResult (_ageee *_afcc );};const _bgg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_acca :=len (args );if _acca !=6&&_acca !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dedb ,_fbgde ,_gbab :=_bbg (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _gbab .Type ==ResultTypeError {return _gbab ;};_dcce :=args [2];if _dcce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_faaag :=_dcce .ValueNumber ;if _faaag < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_gffbe :=args [3];if _gffbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bag :=_gffbe .ValueNumber ;if _bag <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_cddg :=args [4];if _cddg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_cecag :=_cddg .ValueNumber ;if _cecag < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_edbfc :=args [5];if _edbfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dgae :=float64 (int (_edbfc .ValueNumber ));if !_cggb (_dgae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cefc :=0;if _acca ==7&&args [6].Type !=ResultTypeEmpty {_bfefg :=args [6];if _bfefg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_cefc =int (_bfefg .ValueNumber );if !_cggba (_cefc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_gbfc :=0.0;_ffdb :=0.0;_ffcf :=1.0;_ddef ,_gbab :=_bdea (_dedb ,_fbgde ,_faaag ,_ffdb ,_cecag ,_dgae ,_cefc );if _gbab .Type ==ResultTypeError {return _gbab ;};_fce ,_gbab :=_bdea (_dedb ,_fbgde ,_faaag ,_ffcf ,_cecag ,_dgae ,_cefc );if _gbab .Type ==ResultTypeError {return _gbab ;};_cdgg :=(_ffcf -_ffdb )*0.5;for _abaa :=0;_abaa < 100&&_gbfc !=_bag ;_abaa ++{_gbfc ,_gbab =_bdea (_dedb ,_fbgde ,_faaag ,_cdgg ,_cecag ,_dgae ,_cefc );if _gbab .Type ==ResultTypeError {return _gbab ;};if _bag ==_ddef {return MakeNumberResult (_ffdb );}else if _bag ==_fce {return MakeNumberResult (_ffcf );}else if _bag ==_gbfc {return MakeNumberResult (_cdgg );}else if _bag < _fce {_ffcf *=2.0;_fce ,_gbab =_bdea (_dedb ,_fbgde ,_faaag ,_ffcf ,_cecag ,_dgae ,_cefc );if _gbab .Type ==ResultTypeError {return _gbab ;};_cdgg =(_ffcf -_ffdb )*0.5;}else {if _bag < _gbfc {_ffdb =_cdgg ;_ddef =_gbfc ;}else {_ffcf =_cdgg ;_fce =_gbfc ;};_cdgg =_ffcf -(_ffcf -_ffdb )*((_bag -_fce )/(_ddef -_fce ));};};return MakeNumberResult (_cdgg );};

// Eval evaluates and returns a number.
func (_gdfbf Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_gdfbf ._cadf )};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_cee ,_eeg :=_dgea (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _eeg .Type ==ResultTypeError {return _eeg ;};return MakeNumberResult (_beg (_cee ._bfd ,_cee ._cdee ,_cee ._cdgb ,_cee ._fgfa ));};

// Reference returns a string reference value to a sheet.
func (_eaeaa SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_eaeaa ._adea };};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// Bool is a boolean expression.
type Bool struct{_ebf bool };

// Reference returns a string reference value to a range.
func (_dfedf Range )Reference (ctx Context ,ev Evaluator )Reference {_fbeeg :=_dfedf ._fggbe .Reference (ctx ,ev );_gdgde :=_dfedf ._fegga .Reference (ctx ,ev );if _fbeeg .Type ==ReferenceTypeCell &&_gdgde .Type ==ReferenceTypeCell {return MakeRangeReference (_caeag (_fbeeg ,_gdgde ));};return ReferenceInvalid ;};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_fdgec ,_defgc ,_egbcd :=_efab (args );if _egbcd .Type ==ResultTypeError {return _egbcd ;};return MakeNumberResult (_fbcg (_fdgec )/_defgc );};func (_faded *Lexer )nextRaw ()*node {for len (_faded ._fgec )!=0{_acgdc :=<-_faded ._fgec [len (_faded ._fgec )-1];if _acgdc !=nil {return _acgdc ;};_faded ._fgec =_faded ._fgec [0:len (_faded ._fgec )-1];};return <-_faded ._cggd ;};

// String returns a string representation of a horizontal range with prefix.
func (_ffgb PrefixHorizontalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ffgb ._gagag .String (),_ffgb ._fdeff ,_ffgb ._fcbaed );};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_eggf ,_cgce int };

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_deef :pfx ,_cdffc :exp }};func _fdged (_daagf []Result )[]float64 {_afaf :=make ([]float64 ,0);for _ ,_cdbcb :=range _daagf {if _cdbcb .Type ==ResultTypeEmpty {continue ;};_cdbcb =_cdbcb .AsNumber ();switch _cdbcb .Type {case ResultTypeNumber :if !_cdbcb .IsBoolean {_afaf =append (_afaf ,_cdbcb .ValueNumber );};case ResultTypeList ,ResultTypeArray :_afaf =append (_afaf ,_fdged (_cdbcb .ListValues ())...);case ResultTypeString :default:_ba .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdbcb .Type );};};return _afaf ;};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dafd :=args [0].AsNumber ();if _dafd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_ed .Pi /180.0*_dafd .ValueNumber );};var _gebad =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_ed .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbdf :=args [0].AsNumber ();if _gbdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bebgf :=0;if len (args )> 1{_ggbgg :=args [1];if _ggbgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_bebgf =int (_ggbgg .ValueNumber );if _bebgf < 0{_bebgf =0;}else if _bebgf > 4{_bebgf =4;};};_cfec :=_fcgg ;switch _bebgf {case 1:_cfec =_dgff ;case 2:_cfec =_ceeg ;case 3:_cfec =_eede ;case 4:_cfec =_dbgb ;};_geega :=_ed .Trunc (_gbdf .ValueNumber );_gfgcg :=_d .Buffer {};for _ ,_gbgf :=range _cfec {for _geega >=_gbgf ._bdab {_gfgcg .WriteString (_gbgf ._dfcfa );_geega -=_gbgf ._bdab ;};};return MakeStringResult (_gfgcg .String ());};var _cgfef *_dg .Rand ;

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_fcba ,_aaga :=_bacd (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _aaga .Type ==ResultTypeError {return _aaga ;};_dfbcc :=_fcba ._gacd ;_efe :=_fcba ._bga ;_abag :=_fcba ._eege ;_aedcd :=_fcba ._fdcg ;_cfdf :=_fcba ._edgg ;_fcfe :=_fcba ._gdbe ;_edbe :=_fcba ._bdae ;_dgaa ,_dffc :=_bbbb (_efe ,_abag ,_edbe );if _dffc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_ddga :=_dgaa *_fcfe *_dfbcc ;if _cfdf ==0{return MakeNumberResult (_ddga );};_cccge :=_dfbcc *_fcfe ;_bdbc :=_dfbcc -_aedcd ;_fgfd :=int ((_bdbc -_ddga )/_cccge );if _cfdf <=_fgfd {return MakeNumberResult (_cccge );}else if _cfdf ==_fgfd +1{return MakeNumberResult (_bdbc -_cccge *float64 (_fgfd )-_ddga );}else {return MakeNumberResult (0);};};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;func _bbg (_accd ,_gdd Result ,_ecge string )(float64 ,float64 ,Result ){_fbd ,_afbf :=_febg (_accd ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_ecge );if _afbf .Type ==ResultTypeError {return 0,0,_afbf ;};_agfb ,_afbf :=_febg (_gdd ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_ecge );if _afbf .Type ==ResultTypeError {return 0,0,_afbf ;};if _fbd >=_agfb {return 0,0,MakeErrorResultType (ErrorTypeNum ,_ecge +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _fbd ,_agfb ,_daaf ;};

// FunctionCall is a function call expression.
type FunctionCall struct{_gfabg string ;_fbdg []Expression ;};var _cgag =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};func _gcf (_ged string ,_gee uint32 )string {_geg :=_fg .ColumnToIndex (_ged );if _geg ==_gee {return "\u0023\u0052\u0045F\u0021";}else if _geg > _gee {return _fg .IndexToColumn (_geg -1);}else {return _ged ;};};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcc :=_fb .Now ();_ ,_dgeb :=_dcc .Zone ();_fed :=_aaff (_be ,_dcc .Unix ()+int64 (_dgeb ))+1;return MakeNumberResult (_fed );};func init (){_afeg ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};func _dedbe (_eabdcf []Result ,_dgace bool )Result {_defee :="\u004d\u0041\u0058";if _dgace {_defee ="\u004d\u0041\u0058\u0041";};if len (_eabdcf )==0{return MakeErrorResult (_defee +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbggb :=-_ed .MaxFloat64 ;for _ ,_fdgeb :=range _eabdcf {switch _fdgeb .Type {case ResultTypeNumber :if (_dgace ||!_fdgeb .IsBoolean )&&_fdgeb .ValueNumber > _cbggb {_cbggb =_fdgeb .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bdfa :=_dedbe (_fdgeb .ListValues (),_dgace );if _bdfa .ValueNumber > _cbggb {_cbggb =_bdfa .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_efabf :=0.0;if _dgace {_efabf =_fdgeb .AsNumber ().ValueNumber ;};if _efabf > _cbggb {_cbggb =_efabf ;};default:_ba .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_defee +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdgeb .Type );};};if _cbggb ==-_ed .MaxFloat64 {_cbggb =0;};return MakeNumberResult (_cbggb );};var _faeb =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgdgf :=args [0].AsString ();if _dgdgf .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gddab :=_d .Buffer {};_cdae :=false ;_cefde :=false ;_dcfg :=0;for _ ,_gbfac :=range _dgdgf .ValueString {_cffb :=_gbfac ==' ';if _cffb {if !_cdae {continue ;};if !_cefde {_dcfg ++;_gddab .WriteRune (_gbfac );};}else {_dcfg =0;_cdae =true ;_gddab .WriteRune (_gbfac );};_cefde =_cffb ;};_gddab .Truncate (_gddab .Len ()-_dcfg );return MakeStringResult (_gddab .String ());};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fbdc :=args [0].AsString ();_becc :=args [1].AsString ();if _fbdc .Type !=ResultTypeString ||_becc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_fbdc .ValueString ==_becc .ValueString );};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_ecea :=args [0].AsNumber ();if _ecea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adfe :=_ed .Signbit (_ecea .ValueNumber );_eface ,_gcce :=_ed .Modf ((_ecea .ValueNumber -1)/2);_cdbc :=_eface *2+1;if _gcce !=0{if !_adfe {_cdbc +=2;}else {_cdbc -=2;};};return MakeNumberResult (_cdbc );};func _ccfd (_gbde int )string {if _gbde >=1&&_gbde -1< len (_egcbd ){if _egcbd [_gbde -1]!=""{return _egcbd [_gbde -1];};};return _g .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_gbde );};func _bcgba (_fade yyLexer ,_fcgbe *yySymType )(_cfcag ,_dacfc int ){_dacfc =0;_cfcag =_fade .Lex (_fcgbe );if _cfcag <=0{_dacfc =_dbcdd [0];goto _fefbf ;};if _cfcag < len (_dbcdd ){_dacfc =_dbcdd [_cfcag ];goto _fefbf ;};if _cfcag >=_bcgbe {if _cfcag < _bcgbe +len (_cgag ){_dacfc =_cgag [_cfcag -_bcgbe ];goto _fefbf ;};};for _fcafd :=0;_fcafd < len (_abce );_fcafd +=2{_dacfc =_abce [_fcafd +0];if _dacfc ==_cfcag {_dacfc =_abce [_fcafd +1];goto _fefbf ;};};_fefbf :if _dacfc ==0{_dacfc =_cgag [1];};if _ggfd >=3{_g .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_ccfd (_dacfc ),uint (_cfcag ));};return _cfcag ,_dacfc ;};

// Eval evaluates and returns the result of an error expression.
func (_deg Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_deg ._cgba )};func _cggbb (_eacca string ,_adbd _fb .Time )(_fb .Time ,error ){_fdaad ,_ ,_gacg :=_df .ParseFloat (_eacca ,10,128,_df .ToNearestEven );if _gacg !=nil {return _fb .Time {},_gacg ;};_edcf :=new (_df .Float );_edcf .SetUint64 (uint64 (24*_fb .Hour ));_fdaad .Mul (_fdaad ,_edcf );_adce ,_ :=_fdaad .Uint64 ();_bdbca :=_adbd .Add (_fb .Duration (_adce ));return _ccedd (_bdbca ),nil ;};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_bfae :=len (args );if _bfae < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bfae > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cefdb :=args [0];_cbcd :=args [1];if _cbcd .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gdgec :=args [2].AsNumber ();if _gdgec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccdfd :=false ;if _bfae ==4&&args [3].Type !=ResultTypeEmpty {_bebfg :=args [3].AsNumber ();if _bebfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _bebfg .ValueNumber ==0{_ccdfd =true ;};};_adfcg :=int (_gdgec .ValueNumber )-1;_gfec :=-1;_aaedc :=false ;_fffdb :for _bbff ,_gffc :=range _cbcd .ValueArray {if len (_gffc )==0{continue ;};_bfca :=_gffc [0];switch _agdfd (_bfca ,_cefdb ,false ,_ccdfd ){case _fedb :_gfec =_bbff ;case _ggfcc :_gfec =_bbff ;_aaedc =true ;break _fffdb ;};};if _gfec ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_afbed :=_cbcd .ValueArray [_gfec ];if _adfcg < 0||_adfcg >=len (_afbed ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _aaedc ||!_ccdfd {return _afbed [_adfcg ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};type tokenType int ;const _cffc =57372;

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_dcg :=&defEval {};_dcg .evCache =_cec ();return _dcg };

// Update returns the same object as updating sheet references does not affect Error.
func (_bda Error )Update (q *_adf .UpdateQuery )Expression {return _bda };

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_caec ,_baca :=_dgea (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _baca .Type ==ResultTypeError {return _baca ;};_afbc :=_caec ._cdgb ;_adecb :=_caec ._fgfa ;_eafg ,_baca :=_gdfb (_caec ._bfd ,_caec ._cdee ,_afbc ,_adecb );if _baca .Type ==ResultTypeError {return _baca ;};return MakeNumberResult (_eafg );};

// Eval evaluates a vertical range returning a list of results or an error.
func (_acbaa VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_cegd :=_acbaa .verticalRangeReference ();if _gagd ,_cgeba :=ev .GetFromCache (_cegd );_cgeba {return _gagd ;};_cggdb ,_cafab :=_ffbd (ctx ,_acbaa ._aedb ,_acbaa ._ffef );_ecadd :=_bdbf (ctx ,ev ,_cggdb ,_cafab );ev .SetCache (_cegd ,_ecadd );return _ecadd ;};

// String returns a string representation of CellRef.
func (_fdg CellRef )String ()string {return _fdg ._aded };

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_acd :=args [0].ValueNumber ;_bgec :=args [1].ValueNumber ;if _bgec < _acd {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _bgec ==_acd {return MakeNumberResult (0);};_cdf :=_eg .ToLower (args [2].ValueString );if _cdf =="\u0064"{return MakeNumberResult (_bgec -_acd );};_cfd :=_eecd (_acd );_ded :=_eecd (_bgec );_fga ,_cfgg ,_bdb :=_cfd .Date ();_cbff ,_cdeb ,_fff :=_ded .Date ();_dbf :=int (_cfgg );_feg :=int (_cdeb );var _eabf float64 ;switch _cdf {case "\u0079":_eabf =float64 (_cbff -_fga );if _feg < _dbf ||(_feg ==_dbf &&_fff < _bdb ){_eabf --;};case "\u006d":_ddf :=_cbff -_fga ;_gedc :=_feg -_dbf ;if _fff < _bdb {_gedc --;};if _gedc < 0{_ddf --;_gedc +=12;};_eabf =float64 (_ddf *12+_gedc );case "\u006d\u0064":_fbfa :=_feg ;if _fff < _bdb {_fbfa --;};_eabf =float64 (int (_bgec -_aac (_cbff ,_fbfa ,_bdb )));case "\u0079\u006d":_eabf =float64 (_feg -_dbf );if _fff < _bdb {_eabf --;};if _eabf < 0{_eabf +=12;};case "\u0079\u0064":_aceb :=_cbff ;if _feg < _dbf ||(_feg ==_dbf &&_fff < _bdb ){_aceb --;};_eabf =float64 (int (_bgec -_aac (_aceb ,_dbf ,_bdb )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_eabf );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfadb :=args [0].AsNumber ();if _cfadb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _cfadb .ValueNumber < 0{return MakeNumberResult (-1);}else if _cfadb .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// String returns a string representation of a named range.
func (_cfeee NamedRangeRef )String ()string {return _cfeee ._ceddd };func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};var _ggcg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_bcf :data }};func _adfb (_gdgece ,_face float64 )float64 {_gdgece =_ed .Trunc (_gdgece );_face =_ed .Trunc (_face );if _gdgece ==0&&_face ==0{return 0;};return _gdgece *_face /_ebba (_gdgece ,_face );};func _eae (_cefg ,_abde _fb .Time ,_cff int )_fb .Time {_eebg :=_fb .Date (_cefg .Year (),_abde .Month (),_abde .Day (),0,0,0,0,_fb .UTC );if _eebg .After (_cefg ){_eebg =_eebg .AddDate (-1,0,0);};for !_eebg .After (_cefg ){_eebg =_eebg .AddDate (0,12/_cff ,0);};return _eebg ;};

// Value returns a string version of the result.
func (_ceea Result )Value ()string {switch _ceea .Type {case ResultTypeNumber :_afcf :=_cb .FormatFloat (_ceea .ValueNumber ,'f',-1,64);if len (_afcf )> 12{_feaed :=12;for _cgcc :=_feaed ;_cgcc > 0&&_afcf [_cgcc ]=='0';_cgcc --{_feaed --;};_afcf =_afcf [0:_feaed +1];};return _afcf ;case ResultTypeError :return _ceea .ValueString ;case ResultTypeString :return _ceea .ValueString ;case ResultTypeList :if len (_ceea .ValueList )==0{return "";};return _ceea .ValueList [0].Value ();case ResultTypeArray :if len (_ceea .ValueArray )==0||len (_ceea .ValueArray [0])==0{return "";};return _ceea .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func _abca (_aegd ,_ebbb ,_gagb ,_bafc float64 ,_geeg int )float64 {var _fgbef float64 ;if _aegd ==0{_fgbef =(_gagb +_bafc )/_ebbb ;}else {_cfgf :=_ed .Pow (1+_aegd ,_ebbb );if _geeg ==1{_fgbef =(_bafc *_aegd /(_cfgf -1)+_gagb *_aegd /(1-1/_cfgf ))/(1+_aegd );}else {_fgbef =_bafc *_aegd /(_cfgf -1)+_gagb *_aegd /(1-1/_cfgf );};};return -_fgbef ;};

// Update returns the same object as updating sheet references does not affect Bool.
func (_ge Bool )Update (q *_adf .UpdateQuery )Expression {return _ge };

// Update updates references in the PrefixExpr after removing a row/column.
func (_aeff PrefixExpr )Update (q *_adf .UpdateQuery )Expression {_dgadf :=_aeff ;_fbbg :=_aeff ._deef .String ();if _fbbg ==q .SheetToUpdate {_edaec :=*q ;_edaec .UpdateCurrentSheet =true ;_dgadf ._cdffc =_aeff ._cdffc .Update (&_edaec );};return _dgadf ;};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _aaa ,_gae float64 ;switch args [0].Type {case ResultTypeNumber :_gae =args [0].ValueNumber ;case ResultTypeString :_aceg :=DateValue ([]Result {args [0]});if _aceg .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gae =_aceg .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_aaa =args [1].ValueNumber ;if _aaa < 62&&_gae >=62{_aaa --;};case ResultTypeString :_dbbc :=DateValue ([]Result {args [1]});if _dbbc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_aaa =_dbbc .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gb :=float64 (int (_gae -_aaa ));return MakeNumberResult (_gb );};

// Update returns the same object as updating sheet references does not affect String.
func (_cbdba String )Update (q *_adf .UpdateQuery )Expression {return _cbdba };

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_badd :=args [0].Ref ;if _badd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_badd .Value ,ev ).IsBoolean );};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_fgbdc Context ,_dfadf Evaluator ,_dgcba []Result )Result ;

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_begeb ,_gbda :=_cdeeg (args ,true );if _gbda ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_begeb /_gbda );};func _fgea (_badcg float64 ,_cdfc *criteriaRegex )bool {_beeg ,_bbfe :=_cb .ParseFloat (_cdfc ._dbde ,64);if _bbfe !=nil {return false ;};switch _cdfc ._edab {case _aacde :return _badcg ==_beeg ;case _affe :return _badcg <=_beeg ;case _aadda :return _badcg >=_beeg ;case _dabe :return _badcg < _beeg ;case _bcegb :return _badcg > _beeg ;};return false ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_gfabg :name ,_fbdg :args };};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _dcae (args ,true )};func init (){_cgfef =_dg .New (_dg .NewSource (_fb .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_ceba ("\u0041\u0053\u0049\u004e",_ed .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_ceba ("\u0041\u0053\u0049\u004e",_ed .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_ceba ("\u0041\u0053\u0049\u004e",_ed .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_ceba ("\u0041\u0043\u004f\u0054",func (_cbef float64 )float64 {return _ed .Pi /2-_ed .Atan (_cbef )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_ceba ("\u0041\u0043\u004fT\u0048",func (_ddfgd float64 )float64 {return _ed .Atanh (1/_ddfgd )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_ceba ("\u0041\u0053\u0049\u004e",_ed .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_ceba ("\u0041\u0053\u0049N\u0048",_ed .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_ceba ("\u0041\u0054\u0041\u004e",_ed .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_ceba ("\u0041\u0054\u0041N\u0048",_ed .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_ceba ("\u0043\u004f\u0053",_ed .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_ceba ("\u0043\u004f\u0053\u0048",_ed .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_ebbd ("\u0043\u004f\u0054",_ed .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_ebbd ("\u0043\u004f\u0054\u0048",_ed .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_ebbd ("\u0043\u0053\u0043",_ed .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_ebbd ("\u0043\u0053\u0043",_ed .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_ceba ("\u0045\u0058\u0050",_ed .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_ceba ("\u004c\u004e",_ed .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_ceba ("\u004c\u004f\u00471\u0030",_ed .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_ebbd ("\u0053\u0045\u0043",_ed .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_ebbd ("\u0053\u0045\u0043\u0048",_ed .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_ceba ("\u0053\u0049\u004e",_ed .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_ceba ("\u0053\u0049\u004e\u0048",_ed .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_ceba ("\u0053\u0051\u0052\u0054",_ed .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_ceba ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_agcae float64 )float64 {return _ed .Sqrt (_agcae *_ed .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_ceba ("\u0054\u0041\u004e",_ed .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_ceba ("\u0054\u0041\u004e\u0048",_ed .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ggffc :=args [0].AsNumber ();if _ggffc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_fddc :=int (_ggffc .ValueNumber );_edfd :=make ([][]Result ,0,_fddc );for _edfda :=0;_edfda < _fddc ;_edfda ++{_ccbe :=make ([]Result ,_fddc );for _gacgb :=0;_gacgb < _fddc ;_gacgb ++{if _edfda ==_gacgb {_ccbe [_gacgb ]=MakeNumberResult (1.0);}else {_ccbe [_gacgb ]=MakeNumberResult (0.0);};};_edfd =append (_edfd ,_ccbe );};return MakeArrayResult (_edfd );};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};const _bcdd =57366;func _bgcc (_ddba []Result )[]rangeIndex {_ffdd :=[]rangeIndex {};_dabf :=len (_ddba );for _bcdf :=0;_bcdf < _dabf -1;_bcdf +=2{_fbcc :=[]rangeIndex {};_edabg :=_cbcf (_ddba [_bcdf ]);_agdfe :=_eadac (_ddba [_bcdf +1]);if _bcdf ==0{for _gged ,_cfeea :=range _edabg {for _abccb ,_gdff :=range _cfeea {if _fdaae (_gdff ,_agdfe ){_fbcc =append (_fbcc ,rangeIndex {_gged ,_abccb });};};};}else {for _ ,_ecda :=range _ffdd {_cfbg :=_edabg [_ecda ._dafbg ][_ecda ._agfg ];if _fdaae (_cfbg ,_agdfe ){_fbcc =append (_fbcc ,_ecda );};};};if len (_fbcc )==0{return []rangeIndex {};};_ffdd =_fbcc [:];};return _ffdd ;};func (_dbfb node )String ()string {return _g .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_dbfb ._ecbbf ,_ecdd (string (_dbfb ._dgad )));};const _geee =2;

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_abfga :=len (args );if _abfga !=3&&_abfga !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfad ,_bfccd :=_abgf (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _bfccd .Type ==ResultTypeError {return _bfccd ;};_becf ,_bfccd :=_abgf (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _bfccd .Type ==ResultTypeError {return _bfccd ;};_gbef ,_bfccd :=_abgf (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _bfccd .Type ==ResultTypeError {return _bfccd ;};_beea :=0;if _abfga ==3{return MakeStringResult (_eg .Replace (_dfad ,_becf ,_gbef ,-1));}else {_beefa ,_edef :=_bgddg (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _edef .Type ==ResultTypeError {return _edef ;};_beea =int (_beefa );if _beea < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_faafe :=_dfad ;_cfbb :=_beea ;_eddda :=-1;_fcafc :=len (_becf );_dcbgd :=0;for {_cfbb --;_gdadf :=_eg .Index (_faafe ,_becf );if _gdadf ==-1{_eddda =-1;break ;}else {_eddda =_gdadf +_dcbgd ;if _cfbb ==0{break ;};_ffdbd :=_fcafc +_gdadf ;_dcbgd +=_ffdbd ;_faafe =_faafe [_ffdbd :];};};if _eddda ==-1{return MakeStringResult (_dfad );}else {_bacfc :=_dfad [:_eddda ];_bdfd :=_dfad [_eddda +_fcafc :];return MakeStringResult (_bacfc +_gbef +_bdfd );};};};var _ceeg =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _bge ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";var _eeae =[...]int {-1,1,1,-1,-2,0};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dfaa :=args [0].ValueNumber ;if _dfaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_dbea ,_aacg :=_fdcff (args [1],args [2],"\u0058\u004e\u0050\u0056");if _aacg .Type ==ResultTypeError {return _aacg ;};_acda :=_dbea ._deff ;_agff :=_dbea ._ccf ;_efeg :=0.0;_daff :=_agff [0];for _efag ,_gdaag :=range _acda {_efeg +=_gdaag /_ed .Pow (1+_dfaa ,(_agff [_efag ]-_daff )/365);};return MakeNumberResult (_efeg );};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbgee :=args [0].AsNumber ();if _fbgee .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _fbgee .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_fbcg (_fbgee .ValueNumber ));};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_gagag Expression ;_fdeff ,_fcbaed int ;};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_defbg .Lock ();defer _defbg .Unlock ();if _cggfd ,_cggda :=_dgbc [name ];_cggda {return _cggfd ;};return nil ;};func _cacc (_faab string )bool {for _ ,_acf :=range _ddgf {_bef :=_acf .FindStringSubmatch (_faab );if len (_bef )> 1{return true ;};};return false ;};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daea :=args [0].ValueNumber ;if _daea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcbf :=args [1].ValueNumber ;if _dcbf <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfd :=args [2].ValueNumber ;if _acfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_ed .Log10 (_acfd )-_ed .Log10 (_dcbf ))/_ed .Log10 (1+_daea ));};func _ebca (_fdge string )(int ,int ,int ,bool ,Result ){_cfb :="";_edf :=[]string {};for _cgge ,_gaa :=range _cac {_edf =_gaa .FindStringSubmatch (_fdge );if len (_edf )> 1{_cfb =_cgge ;break ;};};if _cfb ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_ddd :=false ;var _dcee ,_agc ,_cabf int ;var _gde error ;switch _cfb {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_agc ,_gde =_cb .Atoi (_edf [1]);if _gde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_cabf ,_gde =_cb .Atoi (_edf [3]);if _gde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_dcee ,_gde =_cb .Atoi (_edf [5]);if _gde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};if _dcee < 0||_dcee > 9999||(_dcee > 99&&_dcee < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_dcee =_ced (_dcee );_ddd =_edf [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_agc =_gag [_edf [1]];_cabf ,_gde =_cb .Atoi (_edf [14]);if _gde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_dcee ,_gde =_cb .Atoi (_edf [16]);if _gde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};if _dcee < 0||_dcee > 9999||(_dcee > 99&&_dcee < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_dcee =_ced (_dcee );_ddd =_edf [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_gfa ,_fgbe :=_cb .Atoi (_edf [1]);if _fgbe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_ffc ,_fgbe :=_cb .Atoi (_edf [3]);if _fgbe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_aga ,_fgbe :=_cb .Atoi (_edf [5]);if _fgbe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};if _gfa >=1900&&_gfa < 10000{_dcee =_gfa ;_agc =_ffc ;_cabf =_aga ;}else if _gfa > 0&&_gfa < 13{_agc =_gfa ;_cabf =_ffc ;_dcee =_aga ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_ddd =_edf [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_dcee ,_gde =_cb .Atoi (_edf [16]);if _gde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_agc =_gag [_edf [3]];_cabf ,_gde =_cb .Atoi (_edf [1]);if _gde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};_ddd =_edf [19]=="";};if !_ccgc (_dcee ,_agc ,_cabf ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_ada );};return _dcee ,_agc ,_cabf ,_ddd ,_daaf ;};const _adg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func (_edbbd *Lexer )emit (_eebcf tokenType ,_dbef []byte ){if _efcdg {_g .Println ("\u0065\u006d\u0069\u0074",_eebcf ,_ecdd (string (_dbef )));};_edbbd ._cggd <-&node {_eebcf ,string (_dbef )};};

// Error is called in the case of parsing error and saves an error to a plex.
func (_bcga *plex )Error (s string ){_ba .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_bcga ._gggfff =s ;};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_ebaeg :=len (args );if _ebaeg < 5||_ebaeg > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_faba :=args [0].ValueNumber ;if _faba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgac :=args [1].ValueNumber ;if _cgac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgbd :=args [2].ValueNumber ;if _bgbd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bgbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfca :=args [3].ValueNumber ;if _cfca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egdb :=args [4].ValueNumber ;if _cfca > _egdb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _egdb > _bgbd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_faccg :=2.0;if _ebaeg > 5{if args [5].Type ==ResultTypeEmpty {_faccg =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faccg =args [5].ValueNumber ;if _faccg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_gggff :=false ;if _ebaeg > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gggff =args [6].ValueNumber !=0;};_bbbad :=0.0;_fefb :=_ed .Floor (_cfca );_bebgc :=_ed .Ceil (_egdb );if _gggff {for _gcddb :=_fefb +1;_gcddb <=_bebgc ;_gcddb ++{_ecaf :=_eaag (_faba ,_cgac ,_bgbd ,_gcddb ,_faccg );if _gcddb ==_fefb +1{_ecaf *=_ed .Min (_egdb ,_fefb +1)-_cfca ;}else if _gcddb ==_bebgc {_ecaf *=_egdb +1-_bebgc ;};_bbbad +=_ecaf ;};}else {_aabbd :=_bgbd ;var _acag float64 ;if !_edbd (_cfca ,_ed .Floor (_cfca )){if _faccg ==1{_gfbf :=_bgbd /2;if _cfca > _gfbf ||_edbd (_cfca ,_gfbf ){_acag =_cfca -_gfbf ;_cfca =_gfbf ;_egdb -=_acag ;_aabbd ++;};};};if _faccg !=0{_faba -=_gcef (_faba ,_cgac ,_bgbd ,_aabbd ,_cfca ,_faccg );};_bbbad =_gcef (_faba ,_cgac ,_bgbd ,_bgbd -_cfca ,_egdb -_cfca ,_faccg );};return MakeNumberResult (_bbbad );};func (_aegg *Lexer )Next ()*node {_aegg ._aaddac .Lock ();defer _aegg ._aaddac .Unlock ();if len (_aegg ._beega )> 0{_afae :=_aegg ._beega [0];_aegg ._beega =_aegg ._beega [1:];return _afae ;};return _aegg .nextRaw ();};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_eabg ,_ffcgd ,_gefgc Expression };

// BinaryExpr is a binary expression.
type BinaryExpr struct{_da ,_dgf Expression ;_ege BinOpType ;};func _dabg (_bbeda string ,_eefa []Result )(*parsedReplaceObject ,Result ){if len (_eefa )!=4{return nil ,MakeErrorResult (_bbeda +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _eefa [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_bbeda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_ebbga :=_eefa [0].ValueString ;if _eefa [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bbeda +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_bbdbe :=int (_eefa [1].ValueNumber )-1;if _eefa [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bbeda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_afbba :=int (_eefa [2].ValueNumber );if _eefa [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_bbeda +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_eaeag :=_eefa [3].ValueString ;return &parsedReplaceObject {_ebbga ,_bbdbe ,_afbba ,_eaeag },_daaf ;};func _effce (_gfcd []Result ,_bdgb bool )Result {_cea :="\u004d\u0049\u004e";if _bdgb {_cea ="\u004d\u0049\u004e\u0041";};if len (_gfcd )==0{return MakeErrorResult (_cea +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adfec :=_ed .MaxFloat64 ;for _ ,_bcce :=range _gfcd {switch _bcce .Type {case ResultTypeNumber :if (_bdgb ||!_bcce .IsBoolean )&&_bcce .ValueNumber < _adfec {_adfec =_bcce .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_aaeb :=_effce (_bcce .ListValues (),_bdgb );if _aaeb .ValueNumber < _adfec {_adfec =_aaeb .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_agba :=0.0;if _bdgb {_agba =_bcce .AsNumber ().ValueNumber ;};if _agba < _adfec {_adfec =_agba ;};default:_ba .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_cea +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bcce .Type );};};if _adfec ==_ed .MaxFloat64 {_adfec =0;};return MakeNumberResult (_adfec );};const _gfbgf int =0;const _gggfag =57370;type defEval struct{evCache ;_fgc bool ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_cge ,_afaa :=_dgea (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _afaa .Type ==ResultTypeError {return _afaa ;};_gfgc :=_eecd (_cge ._bfd );_agef :=_eecd (_cge ._cdee );_defg :=_cge ._cdgb ;_ffaa :=_eae (_gfgc ,_agef ,_defg );_fbgeb ,_egg ,_afff :=_ffaa .Date ();return MakeNumberResult (_aac (_fbgeb ,int (_egg ),_afff ));};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};func (_dbgec PrefixHorizontalRange )horizontalRangeReference (_agda string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_agda ,_dbgec ._fdeff ,_dbgec ._fcbaed );};func (_debcg *Lexer )lex (_bddb _a .Reader ){_bcege ,_egda ,_egca :=0,0,0;_gafdf :=-1;_dfgcc ,_efgbd ,_fdggg :=0,0,0;_ =_fdggg ;_edcfe :=1;_ =_edcfe ;_ebee :=make ([]byte ,4096);_cgae :=false ;for !_cgae {_abge :=0;if _dfgcc > 0{_abge =_egda -_dfgcc ;};_egda =0;_gdbba ,_cbdbc :=_bddb .Read (_ebee [_abge :]);if _gdbba ==0||_cbdbc !=nil {_cgae =true ;};_egca =_gdbba +_abge ;if _egca < len (_ebee ){_gafdf =_egca ;};{_bcege =_gccf ;_dfgcc =0;_efgbd =0;_fdggg =0;};{var _gbbgd int ;var _eebde uint ;if _egda ==_egca {goto _fafcb ;};if _bcege ==0{goto _abbe ;};_ddgaba :_gbbgd =int (_ggcg [_bcege ]);_eebde =uint (_bgaad [_gbbgd ]);_gbbgd ++;for ;_eebde > 0;_eebde --{_gbbgd ++;switch _bgaad [_gbbgd -1]{case 2:_dfgcc =_egda ;};};switch _bcege {case 30:switch _ebee [_egda ]{case 34:goto _gcbc ;case 35:goto _eaeg ;case 36:goto _afge ;case 38:goto _aaceg ;case 39:goto _gbeee ;case 40:goto _fdgbc ;case 41:goto _gafdce ;case 42:goto _aeba ;case 43:goto _ddgbd ;case 44:goto _ffdcg ;case 45:goto _gfgg ;case 47:goto _cged ;case 58:goto _bccef ;case 59:goto _bccdfa ;case 60:goto _dfbb ;case 61:goto _ggbbb ;case 62:goto _dfgab ;case 63:goto _dgee ;case 70:goto _fegg ;case 84:goto _dege ;case 92:goto _gdef ;case 94:goto _bbae ;case 95:goto _fgeg ;case 123:goto _aaaa ;case 125:goto _bdgcc ;};switch {case _ebee [_egda ]< 65:switch {case _ebee [_egda ]> 37:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _gadca ;};case _ebee [_egda ]>=33:goto _dgee ;};case _ebee [_egda ]> 90:switch {case _ebee [_egda ]> 93:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _bddd ;};case _ebee [_egda ]>=91:goto _dgee ;};default:goto _baga ;};goto _cbffd ;case 1:switch _ebee [_egda ]{case 33:goto _gcbb ;case 47:goto _eaac ;case 123:goto _eaac ;case 125:goto _eaac ;};switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _eaac ;};case _ebee [_egda ]> 45:switch {case _ebee [_egda ]> 63:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _eaac ;};case _ebee [_egda ]>=58:goto _eaac ;};default:goto _eaac ;};goto _cbffd ;case 0:goto _abbe ;case 2:if _ebee [_egda ]==34{goto _dafe ;};goto _gcbc ;case 31:if _ebee [_egda ]==34{goto _gcbc ;};goto _cbfg ;case 3:switch _ebee [_egda ]{case 78:goto _ggbbd ;case 82:goto _bcba ;};goto _dgee ;case 4:switch _ebee [_egda ]{case 47:goto _adcc ;case 85:goto _ddcec ;};goto _dgee ;case 5:if _ebee [_egda ]==65{goto _ddgbc ;};goto _dgee ;case 6:switch _ebee [_egda ]{case 76:goto _abace ;case 77:goto _debea ;};goto _dgee ;case 7:if _ebee [_egda ]==76{goto _debea ;};goto _dgee ;case 8:if _ebee [_egda ]==33{goto _ddgbc ;};goto _dgee ;case 9:if _ebee [_egda ]==69{goto _adcb ;};goto _dgee ;case 10:if _ebee [_egda ]==70{goto _dbce ;};goto _dgee ;case 11:if _ebee [_egda ]==33{goto _gcge ;};goto _dgee ;case 12:switch _ebee [_egda ]{case 33:goto _gcbb ;case 47:goto _dgee ;case 123:goto _dgee ;case 125:goto _dgee ;};switch {case _ebee [_egda ]< 48:switch {case _ebee [_egda ]> 35:if 37<=_ebee [_egda ]&&_ebee [_egda ]<=45{goto _dgee ;};case _ebee [_egda ]>=34:goto _dgee ;};case _ebee [_egda ]> 57:switch {case _ebee [_egda ]< 65:if 58<=_ebee [_egda ]&&_ebee [_egda ]<=63{goto _dgee ;};case _ebee [_egda ]> 90:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _dgee ;};default:goto _accc ;};default:goto _efaae ;};goto _cbffd ;case 13:switch _ebee [_egda ]{case 33:goto _gcbb ;case 47:goto _dgee ;case 58:goto _efdb ;case 123:goto _dgee ;case 125:goto _dgee ;};switch {case _ebee [_egda ]< 48:switch {case _ebee [_egda ]> 35:if 37<=_ebee [_egda ]&&_ebee [_egda ]<=45{goto _dgee ;};case _ebee [_egda ]>=34:goto _dgee ;};case _ebee [_egda ]> 57:switch {case _ebee [_egda ]> 63:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _dgee ;};case _ebee [_egda ]>=59:goto _dgee ;};default:goto _efaae ;};goto _cbffd ;case 14:if _ebee [_egda ]==36{goto _bdfaf ;};if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _ebcb ;};goto _eaac ;case 15:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _ebcb ;};goto _eaac ;case 32:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _ebcb ;};goto _ddgcc ;case 16:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 47:goto _dgee ;case 58:goto _affb ;case 123:goto _dgee ;case 125:goto _dgee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 45:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _ccbac ;};case _ebee [_egda ]>=34:goto _dgee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]> 90:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _dgee ;};case _ebee [_egda ]>=65:goto _accc ;};default:goto _dgee ;};goto _cbffd ;case 17:switch _ebee [_egda ]{case 33:goto _gcbb ;case 47:goto _eaac ;case 123:goto _eaac ;case 125:goto _eaac ;};switch {case _ebee [_egda ]< 48:switch {case _ebee [_egda ]> 35:if 37<=_ebee [_egda ]&&_ebee [_egda ]<=45{goto _eaac ;};case _ebee [_egda ]>=34:goto _eaac ;};case _ebee [_egda ]> 57:switch {case _ebee [_egda ]> 63:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _eaac ;};case _ebee [_egda ]>=58:goto _eaac ;};default:goto _ccbac ;};goto _cbffd ;case 33:switch _ebee [_egda ]{case 33:goto _gcbb ;case 47:goto _bgbfe ;case 123:goto _bgbfe ;case 125:goto _bgbfe ;};switch {case _ebee [_egda ]< 48:switch {case _ebee [_egda ]> 35:if 37<=_ebee [_egda ]&&_ebee [_egda ]<=45{goto _bgbfe ;};case _ebee [_egda ]>=34:goto _bgbfe ;};case _ebee [_egda ]> 57:switch {case _ebee [_egda ]> 63:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _bgbfe ;};case _ebee [_egda ]>=58:goto _bgbfe ;};default:goto _ccbac ;};goto _cbffd ;case 18:if _ebee [_egda ]==36{goto _baagf ;};if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _dbgba ;};goto _eaac ;case 19:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _dbgba ;};goto _eaac ;case 34:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _dbgba ;};goto _edfbd ;case 20:switch _ebee [_egda ]{case 39:goto _dgee ;case 42:goto _dgee ;case 47:goto _dgee ;case 58:goto _dgee ;case 63:goto _dgee ;};if 91<=_ebee [_egda ]&&_ebee [_egda ]<=93{goto _dgee ;};goto _cdebc ;case 21:switch _ebee [_egda ]{case 39:goto _becda ;case 42:goto _dgee ;case 47:goto _dgee ;case 58:goto _dgee ;case 63:goto _dgee ;};if 91<=_ebee [_egda ]&&_ebee [_egda ]<=93{goto _dgee ;};goto _cdebc ;case 22:if _ebee [_egda ]==33{goto _eegdc ;};goto _dgee ;case 35:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _cgcgac ;case 58:goto _efdb ;case 101:goto _caad ;case 123:goto _bgfe ;case 125:goto _bgfe ;};switch {case _ebee [_egda ]< 48:switch {case _ebee [_egda ]> 35:if 37<=_ebee [_egda ]&&_ebee [_egda ]<=47{goto _bgfe ;};case _ebee [_egda ]>=34:goto _bgfe ;};case _ebee [_egda ]> 57:switch {case _ebee [_egda ]> 63:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _bgfe ;};case _ebee [_egda ]>=59:goto _bgfe ;};default:goto _gadca ;};goto _cbffd ;case 36:switch _ebee [_egda ]{case 33:goto _gcbb ;case 47:goto _bgfe ;case 101:goto _caad ;case 123:goto _bgfe ;case 125:goto _bgfe ;};switch {case _ebee [_egda ]< 48:switch {case _ebee [_egda ]> 35:if 37<=_ebee [_egda ]&&_ebee [_egda ]<=45{goto _bgfe ;};case _ebee [_egda ]>=34:goto _bgfe ;};case _ebee [_egda ]> 57:switch {case _ebee [_egda ]> 63:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _bgfe ;};case _ebee [_egda ]>=58:goto _bgfe ;};default:goto _cgcgac ;};goto _cbffd ;case 23:switch _ebee [_egda ]{case 33:goto _gcbb ;case 47:goto _gbgba ;case 123:goto _gbgba ;case 125:goto _gbgba ;};switch {case _ebee [_egda ]< 48:switch {case _ebee [_egda ]> 35:if 37<=_ebee [_egda ]&&_ebee [_egda ]<=45{goto _gbgba ;};case _ebee [_egda ]>=34:goto _gbgba ;};case _ebee [_egda ]> 57:switch {case _ebee [_egda ]> 63:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _gbgba ;};case _ebee [_egda ]>=58:goto _gbgba ;};default:goto _bbef ;};goto _cbffd ;case 37:switch _ebee [_egda ]{case 33:goto _gcbb ;case 47:goto _bgfe ;case 123:goto _bgfe ;case 125:goto _bgfe ;};switch {case _ebee [_egda ]< 48:switch {case _ebee [_egda ]> 35:if 37<=_ebee [_egda ]&&_ebee [_egda ]<=45{goto _bgfe ;};case _ebee [_egda ]>=34:goto _bgfe ;};case _ebee [_egda ]> 57:switch {case _ebee [_egda ]> 63:if 91<=_ebee [_egda ]&&_ebee [_egda ]<=94{goto _bgfe ;};case _ebee [_egda ]>=58:goto _bgfe ;};default:goto _bbef ;};goto _cbffd ;case 38:switch _ebee [_egda ]{case 61:goto _fdbd ;case 62:goto _cgea ;};goto _baege ;case 39:if _ebee [_egda ]==61{goto _fdgdb ;};goto _ebcab ;case 24:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _dgee ;case 125:goto _dgee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _dgee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _dgee ;};default:goto _dgee ;};goto _cbffd ;case 40:switch _ebee [_egda ]{case 33:goto _gcbb ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _gdfg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _gdfg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 41:switch _ebee [_egda ]{case 46:goto _gcba ;case 92:goto _gcba ;case 95:goto _gcba ;};switch {case _ebee [_egda ]< 65:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _gcba ;};case _ebee [_egda ]> 90:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _gcba ;};default:goto _gcba ;};goto _efaaee ;case 42:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 43:switch _ebee [_egda ]{case 33:goto _gcbb ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _bgbfe ;case 125:goto _bgbfe ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _bgbfe ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};default:goto _bgbfe ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _gdfg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _bgbfe ;};default:goto _bgbfe ;};goto _cbffd ;case 44:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _eaac ;case 125:goto _eaac ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _eaac ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _eaac ;};default:goto _eaac ;};goto _cbffd ;case 25:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 65:goto _caeb ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _dgee ;case 125:goto _dgee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _dgee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 66<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _dgee ;};default:goto _dgee ;};goto _cbffd ;case 45:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 76:goto _bgdba ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 46:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 83:goto _ddab ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 47:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 69:goto _eacdg ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 26:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 79:goto _cdcd ;case 82:goto _dbec ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _dgee ;case 125:goto _dgee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _dgee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _dgee ;};default:goto _dgee ;};goto _cbffd ;case 48:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 68:goto _fdfea ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 49:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 79:goto _agfd ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 50:switch _ebee [_egda ]{case 33:goto _gcbb ;case 36:goto _dceca ;case 40:goto _ebfae ;case 46:goto _gdfg ;case 58:goto _affb ;case 85:goto _ddab ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 59:switch {case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _baede ;};case _ebee [_egda ]>=34:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bgecd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 27:switch _ebee [_egda ]{case 46:goto _gcba ;case 92:goto _gcba ;case 95:goto _gcba ;};switch {case _ebee [_egda ]< 65:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _gcba ;};case _ebee [_egda ]> 90:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _gcba ;};default:goto _gcba ;};goto _dgee ;case 28:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _feccg ;case 120:goto _ffcfb ;case 123:goto _dgee ;case 125:goto _dgee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _dgee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _dgee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _dgee ;};default:goto _dgee ;};goto _cbffd ;case 51:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _feccg ;case 108:goto _ebag ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 52:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _feccg ;case 102:goto _cefccf ;case 110:goto _bageb ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 53:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _feccg ;case 110:goto _bgegc ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 54:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _facbf ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 55:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _bfddb ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bfddb ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 56:switch _ebee [_egda ]{case 33:goto _gcbb ;case 40:goto _bgccd ;case 46:goto _bfddb ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _bfddb ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bfddb ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 57:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _feccg ;case 109:goto _efec ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 58:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _fbdaf ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _efaaee ;case 125:goto _efaaee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _efaaee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _efaaee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _efaaee ;};default:goto _efaaee ;};goto _cbffd ;case 59:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _bddbd ;case 123:goto _eaac ;case 125:goto _eaac ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _eaac ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _eaac ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _bddbd ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _eaac ;};default:goto _eaac ;};goto _cbffd ;case 29:switch _ebee [_egda ]{case 33:goto _gcbb ;case 46:goto _feccg ;case 92:goto _gcba ;case 95:goto _feccg ;case 123:goto _dgee ;case 125:goto _dgee ;};switch {case _ebee [_egda ]< 58:switch {case _ebee [_egda ]< 37:if 34<=_ebee [_egda ]&&_ebee [_egda ]<=35{goto _dgee ;};case _ebee [_egda ]> 47:if 48<=_ebee [_egda ]&&_ebee [_egda ]<=57{goto _feccg ;};default:goto _dgee ;};case _ebee [_egda ]> 63:switch {case _ebee [_egda ]< 91:if 65<=_ebee [_egda ]&&_ebee [_egda ]<=90{goto _feccg ;};case _ebee [_egda ]> 94:if 97<=_ebee [_egda ]&&_ebee [_egda ]<=122{goto _feccg ;};default:goto _dgee ;};default:goto _dgee ;};goto _cbffd ;};_dgee :_bcege =0;goto _cedcd ;_cbffd :_bcege =1;goto _cedcd ;_gcbc :_bcege =2;goto _cedcd ;_eaeg :_bcege =3;goto _cedcd ;_ggbbd :_bcege =4;goto _cedcd ;_adcc :_bcege =5;goto _cedcd ;_ddcec :_bcege =6;goto _cedcd ;_abace :_bcege =7;goto _cedcd ;_debea :_bcege =8;goto _cedcd ;_bcba :_bcege =9;goto _cedcd ;_adcb :_bcege =10;goto _cedcd ;_dbce :_bcege =11;goto _cedcd ;_afge :_bcege =12;goto _cedcd ;_efaae :_bcege =13;goto _cedcd ;_efdb :_bcege =14;goto _cedcd ;_bdfaf :_bcege =15;goto _cedcd ;_accc :_bcege =16;goto _cedcd ;_dceca :_bcege =17;goto _cedcd ;_affb :_bcege =18;goto _cedcd ;_baagf :_bcege =19;goto _cedcd ;_gbeee :_bcege =20;goto _cedcd ;_cdebc :_bcege =21;goto _cedcd ;_becda :_bcege =22;goto _cedcd ;_caad :_bcege =23;goto _cedcd ;_baga :_bcege =24;goto _cedcd ;_fegg :_bcege =25;goto _cedcd ;_dege :_bcege =26;goto _cedcd ;_gdef :_bcege =27;goto _cedcd ;_fgeg :_bcege =28;goto _cedcd ;_bddd :_bcege =29;goto _cedcd ;_eaac :_bcege =30;goto _aecb ;_gcbb :_bcege =30;goto _abdgb ;_ddgbc :_bcege =30;goto _eece ;_gcge :_bcege =30;goto _dbcg ;_eegdc :_bcege =30;goto _aggg ;_gbgba :_bcege =30;goto _gaff ;_ebfae :_bcege =30;goto _ggcfd ;_aaceg :_bcege =30;goto _gcabb ;_fdgbc :_bcege =30;goto _fecgd ;_gafdce :_bcege =30;goto _cfaa ;_aeba :_bcege =30;goto _gcddag ;_ddgbd :_bcege =30;goto _eggd ;_ffdcg :_bcege =30;goto _fffa ;_gfgg :_bcege =30;goto _fbad ;_cged :_bcege =30;goto _fcfb ;_bccef :_bcege =30;goto _gfbc ;_bccdfa :_bcege =30;goto _eadae ;_ggbbb :_bcege =30;goto _agfed ;_bbae :_bcege =30;goto _aafbg ;_aaaa :_bcege =30;goto _fgadf ;_bdgcc :_bcege =30;goto _beac ;_cbfg :_bcege =30;goto _cagd ;_ddgcc :_bcege =30;goto _caeae ;_bgbfe :_bcege =30;goto _bede ;_edfbd :_bcege =30;goto _affdb ;_bgfe :_bcege =30;goto _gbec ;_baege :_bcege =30;goto _ggcgc ;_fdbd :_bcege =30;goto _cbeda ;_cgea :_bcege =30;goto _bfbee ;_ebcab :_bcege =30;goto _caac ;_fdgdb :_bcege =30;goto _cbeb ;_efaaee :_bcege =30;goto _aacb ;_bgccd :_bcege =30;goto _fefdb ;_dafe :_bcege =31;goto _fbga ;_ebcb :_bcege =32;goto _cedcd ;_ccbac :_bcege =33;goto _cbfdc ;_dbgba :_bcege =34;goto _cedcd ;_gadca :_bcege =35;goto _dbbea ;_cgcgac :_bcege =36;goto _dbbea ;_bbef :_bcege =37;goto _dbbea ;_dfbb :_bcege =38;goto _cedcd ;_dfgab :_bcege =39;goto _cedcd ;_gdfg :_bcege =40;goto _gddb ;_gcba :_bcege =41;goto _cedcd ;_feccg :_bcege =42;goto _gddb ;_baede :_bcege =43;goto _cbfdc ;_bgecd :_bcege =44;goto _gddb ;_eacdg :_bcege =44;goto _feac ;_agfd :_bcege =44;goto _geef ;_caeb :_bcege =45;goto _gddb ;_bgdba :_bcege =46;goto _gddb ;_ddab :_bcege =47;goto _gddb ;_cdcd :_bcege =48;goto _gddb ;_fdfea :_bcege =49;goto _gddb ;_dbec :_bcege =50;goto _gddb ;_ffcfb :_bcege =51;goto _gddb ;_ebag :_bcege =52;goto _gddb ;_cefccf :_bcege =53;goto _gddb ;_bgegc :_bcege =54;goto _gddb ;_facbf :_bcege =55;goto _gddb ;_bfddb :_bcege =56;goto _gddb ;_bageb :_bcege =57;goto _gddb ;_efec :_bcege =58;goto _gddb ;_fbdaf :_bcege =59;goto _gddb ;_bddbd :_bcege =59;goto _fbegc ;_eece :_gbbgd =3;goto _gcfgb ;_dbcg :_gbbgd =5;goto _gcfgb ;_abdgb :_gbbgd =7;goto _gcfgb ;_aggg :_gbbgd =9;goto _gcfgb ;_ggcfd :_gbbgd =11;goto _gcfgb ;_fefdb :_gbbgd =13;goto _gcfgb ;_gcabb :_gbbgd =15;goto _gcfgb ;_fgadf :_gbbgd =17;goto _gcfgb ;_beac :_gbbgd =19;goto _gcfgb ;_fecgd :_gbbgd =21;goto _gcfgb ;_cfaa :_gbbgd =23;goto _gcfgb ;_eggd :_gbbgd =25;goto _gcfgb ;_fbad :_gbbgd =27;goto _gcfgb ;_gcddag :_gbbgd =29;goto _gcfgb ;_fcfb :_gbbgd =31;goto _gcfgb ;_aafbg :_gbbgd =33;goto _gcfgb ;_agfed :_gbbgd =35;goto _gcfgb ;_cbeda :_gbbgd =37;goto _gcfgb ;_cbeb :_gbbgd =39;goto _gcfgb ;_bfbee :_gbbgd =41;goto _gcfgb ;_gfbc :_gbbgd =43;goto _gcfgb ;_eadae :_gbbgd =45;goto _gcfgb ;_fffa :_gbbgd =47;goto _gcfgb ;_gbec :_gbbgd =49;goto _gcfgb ;_bede :_gbbgd =51;goto _gcfgb ;_caeae :_gbbgd =53;goto _gcfgb ;_affdb :_gbbgd =55;goto _gcfgb ;_aacb :_gbbgd =57;goto _gcfgb ;_cagd :_gbbgd =59;goto _gcfgb ;_ggcgc :_gbbgd =61;goto _gcfgb ;_caac :_gbbgd =63;goto _gcfgb ;_gaff :_gbbgd =65;goto _gcfgb ;_aecb :_gbbgd =67;goto _gcfgb ;_feac :_gbbgd =72;goto _gcfgb ;_dbbea :_gbbgd =75;goto _gcfgb ;_cbfdc :_gbbgd =78;goto _gcfgb ;_geef :_gbbgd =81;goto _gcfgb ;_fbegc :_gbbgd =84;goto _gcfgb ;_gddb :_gbbgd =87;goto _gcfgb ;_fbga :_gbbgd =90;goto _gcfgb ;_gcfgb :_eebde =uint (_bgaad [_gbbgd ]);_gbbgd ++;for ;_eebde > 0;_eebde --{_gbbgd ++;switch _bgaad [_gbbgd -1]{case 3:_efgbd =_egda +1;case 4:_fdggg =1;case 5:_fdggg =2;case 6:_fdggg =3;case 7:_fdggg =4;case 8:_fdggg =11;case 9:_fdggg =14;case 10:_fdggg =15;case 11:_efgbd =_egda +1;{_debcg .emit (_fabcb ,_ebee [_dfgcc :_efgbd ]);};case 12:_efgbd =_egda +1;{_debcg .emit (_aadb ,_ebee [_dfgcc :_efgbd ]);};case 13:_efgbd =_egda +1;{_debcg .emit (_afgd ,_ebee [_dfgcc :_efgbd -1]);};case 14:_efgbd =_egda +1;{_debcg .emit (_afgd ,_ebee [_dfgcc +1:_efgbd -2]);};case 15:_efgbd =_egda +1;{_debcg .emit (_cacec ,_ebee [_dfgcc :_efgbd -1]);};case 16:_efgbd =_egda +1;{_debcg .emit (_cacec ,_ebee [_dfgcc :_efgbd -1]);};case 17:_efgbd =_egda +1;{_debcg .emit (_abdbe ,_ebee [_dfgcc :_efgbd ]);};case 18:_efgbd =_egda +1;{_debcg .emit (_cbag ,_ebee [_dfgcc :_efgbd ]);};case 19:_efgbd =_egda +1;{_debcg .emit (_ggbaa ,_ebee [_dfgcc :_efgbd ]);};case 20:_efgbd =_egda +1;{_debcg .emit (_befcda ,_ebee [_dfgcc :_efgbd ]);};case 21:_efgbd =_egda +1;{_debcg .emit (_cbagg ,_ebee [_dfgcc :_efgbd ]);};case 22:_efgbd =_egda +1;{_debcg .emit (_gggcd ,_ebee [_dfgcc :_efgbd ]);};case 23:_efgbd =_egda +1;{_debcg .emit (_bfgb ,_ebee [_dfgcc :_efgbd ]);};case 24:_efgbd =_egda +1;{_debcg .emit (_bcdd ,_ebee [_dfgcc :_efgbd ]);};case 25:_efgbd =_egda +1;{_debcg .emit (_eddb ,_ebee [_dfgcc :_efgbd ]);};case 26:_efgbd =_egda +1;{_debcg .emit (_feca ,_ebee [_dfgcc :_efgbd ]);};case 27:_efgbd =_egda +1;{_debcg .emit (_bacg ,_ebee [_dfgcc :_efgbd ]);};case 28:_efgbd =_egda +1;{_debcg .emit (_cffc ,_ebee [_dfgcc :_efgbd ]);};case 29:_efgbd =_egda +1;{_debcg .emit (_ebcea ,_ebee [_dfgcc :_efgbd ]);};case 30:_efgbd =_egda +1;{_debcg .emit (_gbdff ,_ebee [_dfgcc :_efgbd ]);};case 31:_efgbd =_egda +1;{_debcg .emit (_gdfba ,_ebee [_dfgcc :_efgbd ]);};case 32:_efgbd =_egda +1;{_debcg .emit (_ffdce ,_ebee [_dfgcc :_efgbd ]);};case 33:_efgbd =_egda +1;{_debcg .emit (_fcff ,_ebee [_dfgcc :_efgbd ]);};case 34:_efgbd =_egda ;_egda --;{_debcg .emit (_effd ,_ebee [_dfgcc :_efgbd ]);};case 35:_efgbd =_egda ;_egda --;{_debcg .emit (_dbbbcd ,_ebee [_dfgcc :_efgbd ]);};case 36:_efgbd =_egda ;_egda --;{_debcg .emit (_acbgg ,_ebee [_dfgcc :_efgbd ]);};case 37:_efgbd =_egda ;_egda --;{_debcg .emit (_egcg ,_ebee [_dfgcc :_efgbd ]);};case 38:_efgbd =_egda ;_egda --;{_debcg .emit (_cdea ,_ebee [_dfgcc :_efgbd ]);};case 39:_efgbd =_egda ;_egda --;{_debcg .emit (_edce ,_ebee [_dfgcc +1:_efgbd -1]);};case 40:_efgbd =_egda ;_egda --;{_debcg .emit (_gggfag ,_ebee [_dfgcc :_efgbd ]);};case 41:_efgbd =_egda ;_egda --;{_debcg .emit (_cdcfe ,_ebee [_dfgcc :_efgbd ]);};case 42:_egda =(_efgbd )-1;{_debcg .emit (_effd ,_ebee [_dfgcc :_efgbd ]);};case 43:switch _fdggg {case 0:{_bcege =0;goto _cedcd ;};case 1:{_egda =(_efgbd )-1;_debcg .emit (_aece ,_ebee [_dfgcc :_efgbd ]);};case 2:{_egda =(_efgbd )-1;_debcg .emit (_effd ,_ebee [_dfgcc :_efgbd ]);};case 3:{_egda =(_efgbd )-1;_debcg .emit (_dbbbcd ,_ebee [_dfgcc :_efgbd ]);};case 4:{_egda =(_efgbd )-1;_debcg .emit (_gcgg ,_ebee [_dfgcc :_efgbd ]);};case 11:{_egda =(_efgbd )-1;_debcg .emit (_bdabb ,_ebee [_dfgcc :_efgbd ]);};case 14:{_egda =(_efgbd )-1;_debcg .emit (_cdea ,_ebee [_dfgcc :_efgbd ]);};case 15:{_egda =(_efgbd )-1;_debcg .emit (_edce ,_ebee [_dfgcc +1:_efgbd -1]);};};};};goto _cedcd ;_cedcd :_gbbgd =int (_agab [_bcege ]);_eebde =uint (_bgaad [_gbbgd ]);_gbbgd ++;for ;_eebde > 0;_eebde --{_gbbgd ++;switch _bgaad [_gbbgd -1]{case 0:_dfgcc =0;case 1:_fdggg =0;};};if _bcege ==0{goto _abbe ;};if _egda ++;_egda !=_egca {goto _ddgaba ;};_fafcb :{};if _egda ==_gafdf {switch _bcege {case 1:goto _eaac ;case 2:goto _eaac ;case 31:goto _cbfg ;case 14:goto _eaac ;case 15:goto _eaac ;case 32:goto _ddgcc ;case 17:goto _eaac ;case 33:goto _bgbfe ;case 18:goto _eaac ;case 19:goto _eaac ;case 34:goto _edfbd ;case 35:goto _bgfe ;case 36:goto _bgfe ;case 23:goto _gbgba ;case 37:goto _bgfe ;case 38:goto _baege ;case 39:goto _ebcab ;case 40:goto _efaaee ;case 41:goto _efaaee ;case 42:goto _efaaee ;case 43:goto _bgbfe ;case 44:goto _eaac ;case 45:goto _efaaee ;case 46:goto _efaaee ;case 47:goto _efaaee ;case 48:goto _efaaee ;case 49:goto _efaaee ;case 50:goto _efaaee ;case 51:goto _efaaee ;case 52:goto _efaaee ;case 53:goto _efaaee ;case 54:goto _efaaee ;case 55:goto _efaaee ;case 56:goto _efaaee ;case 57:goto _efaaee ;case 58:goto _efaaee ;case 59:goto _eaac ;};};_abbe :{};};if _dfgcc > 0{copy (_ebee [0:],_ebee [_dfgcc :]);};};_ =_gafdf ;if _bcege ==_gfbgf {_debcg .emit (_faac ,nil );};close (_debcg ._cggd );};

// IsBool returns false for the invalid reference context.
func (_aeccf *ivr )IsBool (cellRef string )bool {return false };const _cfe ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";var _dgbc =map[string ]FunctionComplex {};type rangeIndex struct{_dafbg int ;_agfg int ;};

// Reference returns an invalid reference for FunctionCall.
func (_fabd FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _fcbae int =30;

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_cggd chan *node ;_aaddac _dc .Mutex ;_fgec []chan *node ;_beega []*node ;};const _egcg =57347;const _aadb =57356;

// GetEpoch returns a null time object for the invalid reference context.
func (_accdg *ivr )GetEpoch ()_fb .Time {return _fb .Time {}};type yyParserImpl struct{_faafd yySymType ;_bgcag [_bdga ]yySymType ;_afgaf int ;};func _acbgc (_dcadg ,_cbdge []string )[]string {for _ ,_gabdd :=range _cbdge {_dcadg =append (_dcadg ,_gabdd );};return _dcadg ;};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _gdad (args ,_fceb )};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dbfa :=ctx .GetEpoch ();_fccg ,_ddgg :=_cggbb (args [0].Value (),_dbfa );if _ddgg !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_acdgf :=_fccg .Year ();return MakeBoolResult (_gfaf (_acdgf ));};

// Eval evaluates the binary expression using the context given.
func (_fc BinaryExpr )String ()string {_adec :="";switch _fc ._ege {case BinOpTypePlus :_adec ="\u002b";case BinOpTypeMinus :_adec ="\u002d";case BinOpTypeMult :_adec ="\u002a";case BinOpTypeDiv :_adec ="\u002f";case BinOpTypeExp :_adec ="\u005e";case BinOpTypeLT :_adec ="\u003c";case BinOpTypeGT :_adec ="\u003e";case BinOpTypeEQ :_adec ="\u003d";case BinOpTypeLEQ :_adec ="\u003c\u003d";case BinOpTypeGEQ :_adec ="\u003e\u003d";case BinOpTypeNE :_adec ="\u003c\u003e";case BinOpTypeConcat :_adec ="\u0026";};return _fc ._da .String ()+_adec +_fc ._dgf .String ();};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_aded :v }};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_eg .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_acddc :v };};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_eaf ConstArrayExpr )Update (q *_adf .UpdateQuery )Expression {return _eaf };func _caaa (_ebdeg [][]Result )float64 {if len (_ebdeg )==2{_ddeg :=_ebdeg [0][0].AsNumber ();_deeg :=_ebdeg [0][1].AsNumber ();_fbbc :=_ebdeg [1][0].AsNumber ();_agfee :=_ebdeg [1][1].AsNumber ();if _ddeg .Type !=ResultTypeNumber ||_deeg .Type !=ResultTypeNumber ||_fbbc .Type !=ResultTypeNumber ||_agfee .Type !=ResultTypeNumber {return _ed .NaN ();};return _ddeg .ValueNumber *_agfee .ValueNumber -_fbbc .ValueNumber *_deeg .ValueNumber ;};_dfgfd :=float64 (0);_cffe :=float64 (1);for _fgfdb :=range _ebdeg {_dfgfd +=_cffe *_ebdeg [0][_fgfdb ].ValueNumber *_caaa (_cddb (_ebdeg ,_fgfdb ));_cffe *=-1;};return _dfgfd ;};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};const _gcgg =57349;

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_egc :=len (args );if _egc !=4&&_egc !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aegc ,_efcc ,_dde :=_bbg (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _dde .Type ==ResultTypeError {return _dde ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gddc :=args [2].ValueNumber ;if _gddc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aaae :=args [3].ValueNumber ;if _aaae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_debcc :=0;if _egc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_debcc =int (args [4].ValueNumber );if !_cggba (_debcc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_cgfe ,_dde :=_bbbb (_aegc ,_efcc ,_debcc );if _dde .Type ==ResultTypeError {return _dde ;};return MakeNumberResult ((_aaae -_gddc )/_gddc /_cgfe );};const _acbgg =57346;const _bdcga ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";func _ebbe (_acdf ,_cfac ,_egfd ,_caee ,_gdea float64 ,_bcgf int )float64 {_dbab :=_abca (_acdf ,_egfd ,_caee ,_gdea ,_bcgf );var _acbf float64 ;if _cfac ==1{if _bcgf ==1{_acbf =0;}else {_acbf =-_caee ;};}else {if _bcgf ==1{_acbf =_dfgc (_acdf ,_cfac -2,_dbab ,_caee ,1)-_dbab ;}else {_acbf =_dfgc (_acdf ,_cfac -1,_dbab ,_caee ,0);};};return _acbf *_acdf ;};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_daafb NamedRangeRef )Update (q *_adf .UpdateQuery )Expression {return _daafb };

// Eval evaluates and returns a string.
func (_dcged String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_dcged ._acddc )};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gbag :=args [0].AsNumber ();_gdcee :=args [1].AsNumber ();if _gbag .Type !=ResultTypeNumber ||_gdcee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _gdcee .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_gaac ,_fdfbg :=_ed .Modf (_gbag .ValueNumber /_gdcee .ValueNumber );if _fdfbg < 0{_gaac --;};return MakeNumberResult (_gbag .ValueNumber -_gdcee .ValueNumber *_gaac );};

// Eval evaluates and returns the result of an empty expression.
func (_aab EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};func init (){_ebfb ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};const _bdf =_fb .Second *1;func (_adcea tokenType )String ()string {return _ccfd (int (_adcea ))};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_geea :=len (args );if _geea ==0||_geea > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_cedeb :=_cbcf (args [0]);_cgbag :=[]float64 {};for _ ,_cfee :=range _cedeb {for _ ,_ceee :=range _cfee {if _ceee .Type ==ResultTypeNumber &&!_ceee .IsBoolean {_cgbag =append (_cgbag ,_ceee .ValueNumber );};};};_ffgc :=len (_cgbag );if len (_cgbag )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_bade :=0.1;if _geea ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bade =args [1].ValueNumber ;if _bade <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_cba :=[]float64 {};for _cdbe :=0;_cdbe < _ffgc ;_cdbe ++{if _cdbe ==0{_cba =append (_cba ,0);}else {_cba =append (_cba ,_cba [_cdbe -1]+365);};};return _dgcb (_cgbag ,_cba ,_bade );};func _ebfb (){_aecf =_cd .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_cadc =_cd .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_facf =_cd .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_cgggg =_cd .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_ebce =_cd .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_decc =_cd .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_baad :=len (args );if _baad !=4&&_baad !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dedc ,_dgcdb ,_aee :=_bbg (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _aee .Type ==ResultTypeError {return _aee ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbd :=args [2].ValueNumber ;if _gbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dbabc :=args [3].ValueNumber ;if _dbabc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_gfaac :=0;if _baad ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfaac =int (args [4].ValueNumber );if !_cggba (_gfaac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_fagc ,_aee :=_bbbb (_dedc ,_dgcdb ,_gfaac );if _aee .Type ==ResultTypeError {return _aee ;};return MakeNumberResult (_dbabc *(1-_gbd *_fagc ));};func _dcae (_cafd []Result ,_daae bool )Result {var _egef string ;if _daae {_egef ="\u004c\u0041\u0052G\u0045";}else {_egef ="\u0053\u004d\u0041L\u004c";};if len (_cafd )!=2{return MakeErrorResult (_egef +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_adcab :=_cafd [0];var _beeb [][]Result ;switch _adcab .Type {case ResultTypeArray :_beeb =_adcab .ValueArray ;case ResultTypeList :_beeb =[][]Result {_adcab .ValueList };default:return MakeErrorResult (_egef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_beeb )==0{return MakeErrorResult (_egef +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _cafd [1].Type !=ResultTypeNumber {return MakeErrorResult (_egef +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ggggc :=_cafd [1].ValueNumber ;if _ggggc < 1{return MakeErrorResultType (ErrorTypeNum ,_egef +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_ffdbg :=int (_ggggc );if float64 (_ffdbg )!=_ggggc {return MakeErrorResultType (ErrorTypeNum ,_egef +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_defc :=[]float64 {};for _ ,_fggdf :=range _beeb {for _ ,_begd :=range _fggdf {if _begd .Type ==ResultTypeNumber {_defc =append (_defc ,_begd .ValueNumber );};};};if _ffdbg > len (_defc ){return MakeErrorResultType (ErrorTypeNum ,_egef +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_edcc :=_cg .MergeSort (_defc );if _daae {return MakeNumberResult (_edcc [len (_edcc )-_ffdbg ]);}else {return MakeNumberResult (_edcc [_ffdbg -1]);};};func _cdaa (_gbca int ,_bfg _fb .Month ,_ccde int )int64 {if _gbca ==1900&&int (_bfg )<=2{_ccde --;};_dbe :=_fb .Date (_gbca ,_bfg ,_ccde ,0,0,0,0,_fb .UTC );return _dbe .Unix ();};var _bbcb float64 =25569.0;

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_afdc :=_dddgc (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _afdc .Type !=ResultTypeEmpty {return _afdc ;};_fged :=_bgcc (args [1:]);_fdda :=0.0;_agdfdb :=_cbcf (args [0]);for _ ,_fdca :=range _fged {_fdda +=_agdfdb [_fdca ._dafbg ][_fdca ._agfg ].ValueNumber ;};return MakeNumberResult (float64 (_fdda ));};type criteriaRegex struct{_edab byte ;_dbde string ;};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dbbe :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bdgc :=args [2].ValueNumber +1;if _bdgc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bbca :=_cbcf (args [0]);_eacd :=float64 (len (_bbca ));_faabf ,_afdf :=0.0,0.0;_fcdaa ,_bdeef :=1.0,1.0;_cgad ,_eccc :=false ,false ;for _ ,_acde :=range _bbca {for _ ,_ceb :=range _acde {if _ceb .Type ==ResultTypeNumber &&!_ceb .IsBoolean {_ggdg :=_ceb .ValueNumber ;if _ggdg ==0{continue ;}else {if _ggdg > 0{_cgad =true ;_afdf +=_ceb .ValueNumber *_bdeef ;}else {_eccc =true ;_faabf +=_ceb .ValueNumber *_fcdaa ;};_fcdaa /=_dbbe ;_bdeef /=_bdgc ;};};};};if !_cgad ||!_eccc {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gfbg :=-_afdf /_faabf ;_gfbg *=_ed .Pow (_bdgc ,_eacd -1);_gfbg =_ed .Pow (_gfbg ,1/(_eacd -1));return MakeNumberResult (_gfbg -1);};type parsedSearchObject struct{_gcaeg string ;_cfddd string ;_bbfga int ;};

// Update updates references in the Negate after removing a row/column.
func (_fbdec Negate )Update (q *_adf .UpdateQuery )Expression {return Negate {_deea :_fbdec ._deea .Update (q )};};const _eddb =57367;const _effd =57353;const (_ byte =iota ;_aacde ;_affe ;_aadda ;_dabe ;_bcegb ;);func _effc (_eddc float64 )float64 {return float64 (int (_eddc +0.5))};var _bgaad []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_cgab ,_dffgf :=_dgea (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _dffgf .Type ==ResultTypeError {return _dffgf ;};return MakeNumberResult (_ggb (_cgab ._bfd ,_cgab ._cdee ,_cgab ._cdgb ,_cgab ._fgfa ));};func _gegg (_gdca ,_cae float64 ,_bafd ,_ebae int )float64 {_age :=_eecd (_gdca );_dfcf :=_eecd (_cae );if _ebae ==1{_adc :=_dgfaf (_age ,_dfcf ,_bafd ,1);_aafe :=_adc .AddDate (0,12/_bafd ,0);return _ddfe (_adc ,_aafe ,_ebae );};return float64 (_gba (0,_ebae ))/float64 (_bafd );};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bgeg :=[]float64 {};for _ ,_cdbb :=range args {switch _cdbb .Type {case ResultTypeString :_cadg :=_cdbb .AsNumber ();if _cadg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bgeg =append (_bgeg ,_cadg .ValueNumber );case ResultTypeList ,ResultTypeArray :_dfde :=GCD (_cdbb .ListValues ());if _dfde .Type !=ResultTypeNumber {return _dfde ;};_bgeg =append (_bgeg ,_dfde .ValueNumber );case ResultTypeNumber :_bgeg =append (_bgeg ,_cdbb .ValueNumber );case ResultTypeError :return _cdbb ;default:return MakeErrorResult (_g .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdbb .Type ));};};if _bgeg [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_bgeg )==1{return MakeNumberResult (_bgeg [0]);};_befd :=_bgeg [0];for _dggff :=1;_dggff < len (_bgeg );_dggff ++{if _bgeg [_dggff ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_befd =_ebba (_befd ,_bgeg [_dggff ]);};return MakeNumberResult (_befd );};const _ccfc int =30;

// Number is a nubmer expression.
type Number struct{_cadf float64 };

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_fbfb :=len (args );if _fbfb !=4&&_fbfb !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggggg ,_bcb ,_fbddb :=_bbg (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _fbddb .Type ==ResultTypeError {return _fbddb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffffc :=args [2].ValueNumber ;if _ffffc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cgga :=args [3].ValueNumber ;if _cgga <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_badc :=0;if _fbfb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_badc =int (args [4].ValueNumber );if !_cggba (_badc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_bebf ,_fbddb :=_bbbb (_ggggg ,_bcb ,_badc );if _fbddb .Type ==ResultTypeError {return _fbddb ;};return MakeNumberResult ((_cgga /_ffffc -1)/_bebf );};var _edbb =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// Eval evaluates and returns the result of the cell reference.
func (_fdf CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fdf ._aded ,ev )};var _ga =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfef :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeab :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afaae :=args [2].ValueNumber ;if _afaae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbbd :=args [3].ValueNumber ;if _gbbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _gbbd > _afaae {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_beab :=(_bfef -_aeab )*(_afaae -_gbbd +1)*2;_dbdgg :=_afaae *(_afaae +1);return MakeNumberResult (_beab /_dbdgg );};type cmpResult int8 ;

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_egaf :=args [0].AsNumber ();if _egaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbffd :=float64 (1);if _egaf .ValueNumber < 0{_dbffd =-1;};if len (args )> 1{_dabd :=args [1].AsNumber ();if _dabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_dbffd =_ed .Abs (_dabd .ValueNumber );};if len (args )==1{return MakeNumberResult (_ed .Floor (_egaf .ValueNumber ));};_debb :=_egaf .ValueNumber ;_debb ,_cabg :=_ed .Modf (_debb /_dbffd );if _cabg !=0{if _egaf .ValueNumber < 0{_debb --;};};return MakeNumberResult (_debb *_dbffd );};

// Update updates references in the Range after removing a row/column.
func (_cagf Range )Update (q *_adf .UpdateQuery )Expression {_fafac :=_cagf ;if q .UpdateCurrentSheet {_fafac ._fggbe =_cagf ._fggbe .Update (q );_fafac ._fegga =_cagf ._fegga .Update (q );};return _fafac ;};func _ebaa (_fcea []string ,_bccf int )string {return _cb .Itoa (len (_fcea [len (_fcea )-1-_bccf ]))};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_edfb :=args [0].AsNumber ();if _edfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ecce :=10.0;if len (args )> 1{_bdebb :=args [1].AsNumber ();if _bdebb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_ecce =args [1].ValueNumber ;};if _edfb .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _ecce ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_ed .Log (_edfb .ValueNumber )/_ed .Log (_ecce ));};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bafca :=args [0].AsNumber ();if _bafca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_fggb :=float64 (1);if _bafca .ValueNumber < 0{_fggb =-1;};if len (args )> 1{_dcde :=args [1].AsNumber ();if _dcde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fggb =_dcde .ValueNumber ;};if _fggb < 0&&_bafca .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_ed .Ceil (_bafca .ValueNumber ));};_defba :=_bafca .ValueNumber ;_defba ,_dbdc :=_ed .Modf (_defba /_fggb );if _dbdc > 0{_defba ++;};return MakeNumberResult (_defba *_fggb );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_agaf ,_eedf :=_dabg ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _eedf .Type !=ResultTypeEmpty {return _eedf ;};_dccgb :=_agaf ._bbgfg ;_abgb :=_agaf ._acbg ;_bfffg :=_agaf ._cbdac ;_fdbc :=_agaf ._beeba ;_bbcda :=len (_dccgb );if _abgb > _bbcda {_abgb =_bbcda ;};_agedg :=_abgb +_bfffg ;if _agedg > _bbcda {_agedg =_bbcda ;};_ggfcd :=_dccgb [0:_abgb ]+_fdbc +_dccgb [_agedg :];return MakeStringResult (_ggfcd );};

// GetFormat returns an empty string for the invalid reference context.
func (_egebe *ivr )GetFormat (cellRef string )string {return ""};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ddec ,_bbfg ,_ggeg :=_bbg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _ggeg .Type ==ResultTypeError {return _ggeg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caaf :=_bbfg -_ddec ;if _caaf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_cfaca :=args [2].ValueNumber ;if _cfaca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbgb :=(100-_cfaca )/_cfaca ;_cbad :=360/_caaf ;return MakeNumberResult (_gbgb *_cbad );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_bdda NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_cfeb :=ctx .NamedRange (_bdda ._ceddd );_dabec :=_cfeb .Value ;if _ccga ,_ddac :=ev .GetFromCache (_dabec );_ddac {return _ccga ;};_adae :=_eg .Split (_dabec ,"\u0021");if len (_adae )!=2{return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_dabec ));};_bgffc :=ctx .Sheet (_adae [0]);_fcge :=_eg .Split (_adae [1],"\u003a");switch len (_fcge ){case 1:_fgcb :=ev .Eval (_bgffc ,_fcge [0]);ev .SetCache (_dabec ,_fgcb );return _fgcb ;case 2:_dceag :=_bdbf (_bgffc ,ev ,_fcge [0],_fcge [1]);ev .SetCache (_dabec ,_dceag );return _dceag ;};return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_cfeb .Type ));};

// Reference returns a string reference value to an expression with prefix.
func (_dbced PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_dega :=_dbced ._deef .Reference (ctx ,ev );_cabc :=_dbced ._cdffc .Reference (ctx ,ev );if _dega .Type ==ReferenceTypeSheet &&_cabc .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_dega .Value +"\u0021"+_cabc .Value };};return ReferenceInvalid ;};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_defbg .Lock ();defer _defbg .Unlock ();if _cfgfa ,_dcdc :=_adcaba [name ];_dcdc {return _cfgfa ;};return nil ;};const _aba ="\u0028\u0020\u0028"+_bgg +"\u007c"+_adg +"\u007c"+_bge +"\u007c"+_cfe +"\u0029\u0029\u003f\u0024";

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gggc :=args [0].AsString ();if _gggc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_bafcd :="\u0041\u0031";if len (args )==2{_eddea :=args [1].Ref ;if _eddea .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_bafcd =_eddea .Value ;};switch _gggc .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_eceg ,_ebbg :=_fg .ParseCellReference (_bafcd );if _ebbg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bafcd );};_afbfd :="\u0024"+_eceg .Column +"\u0024"+_cb .Itoa (int (_eceg .RowIdx ));if _eceg .SheetName !=""{_afbfd =_eceg .SheetName +"\u0021"+_afbfd ;};return MakeStringResult (_afbfd );case "\u0063\u006f\u006c":_cdfe ,_beabe :=_fg .ParseCellReference (_bafcd );if _beabe !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bafcd );};return MakeNumberResult (float64 (_cdfe .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_cbeg :=_eg .Contains (ctx .GetFormat (_bafcd ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_cbeg );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_gcbfb :="\u0047";_edbg :=ctx .GetFormat (_bafcd );if _edbg =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_cgcbf .MatchString (_edbg ){_gcbfb ="\u0046\u0030";}else if _edbg =="\u0030\u0025"{_gcbfb ="\u0050\u0030";}else if _edbg =="\u004d\u004d\u004d\u0020\u0044\u0044"{_gcbfb ="\u0044\u0032";}else if _edbg =="\u004d\u004d\u002fY\u0059"{_gcbfb ="\u0044\u0033";}else if _edbg =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_edbg =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_gcbfb ="\u0044\u0034";}else if _edbg =="\u004d\u004d\u005c\u002d\u0044\u0044"{_gcbfb ="\u0044\u0035";}else if _edbg =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_gcbfb ="\u0044\u0036";}else if _edbg =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_gcbfb ="\u0044\u0037";}else if _edbg =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_gcbfb ="\u0044\u0038";}else if _edbg =="\u0048\u0048\u003aM\u004d"{_gcbfb ="\u0044\u0039";}else if _dcac .MatchString (_edbg ){_gcbfb ="\u002e\u0030";}else if _fgaec .MatchString (_edbg ){_gcbfb ="\u002e\u0030\u0028\u0029";}else if _ggea .MatchString (_edbg ){_gcbfb ="\u0043\u0030";}else if _bfga .MatchString (_edbg )||_bdce .MatchString (_edbg ){_gcbfb ="\u0044\u0031";}else if _gaae :=_agfcg .FindStringSubmatch (_edbg );len (_gaae )> 1{_gcbfb ="\u0046"+_cb .Itoa (len (_gaae [1]));}else if _bged :=_eefd .FindStringSubmatch (_edbg );len (_bged )> 1{_gcbfb ="\u002e"+_cb .Itoa (len (_bged [2]));}else if _aedd :=_egeab .FindStringSubmatch (_edbg );len (_aedd )> 1{_gcbfb ="\u0050"+_cb .Itoa (len (_aedd [2]));}else if _bcbf :=_bbdd .FindStringSubmatch (_edbg );len (_bcbf )> 1{_gcbfb ="\u0043"+_ebaa (_bcbf ,1);}else if _adcg :=_aege .FindStringSubmatch (_edbg );len (_adcg )> 1{_gcbfb ="\u0043"+_ebaa (_adcg ,1);}else if _dcgg :=_fcgb .FindStringSubmatch (_edbg );len (_dcgg )> 1{_gcbfb ="\u002e"+_ebaa (_dcgg ,1)+"\u0028\u0029";}else if _ddgcb :=_bcbc .FindStringSubmatch (_edbg );len (_ddgcb )> 1{_gcbfb ="\u002e"+_ebaa (_ddgcb ,1);}else if _ffgca :=_fbcb .FindStringSubmatch (_edbg );len (_ffgca )> 1{_gcbfb ="\u0053"+_ebaa (_ffgca ,3);};if _gcbfb !="\u0047"&&_eg .Contains (_edbg ,"\u005b\u0052\u0045D\u005d"){_gcbfb +="\u002d";};return MakeStringResult (_gcbfb );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_ccgd :=ctx .GetFormat (_bafcd );if _cfdd .MatchString (_ccgd ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_bafcd ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_bege :=0.0;if ctx .GetLocked (_bafcd ){_bege =1.0;};return MakeNumberResult (_bege );case "\u0072\u006f\u0077":_faaf ,_ggaf :=_fg .ParseCellReference (_bafcd );if _ggaf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bafcd );};return MakeNumberResult (float64 (_faaf .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_cgbac ,_bebef :=_fg .ParseCellReference (_bafcd );if _bebef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bafcd );};if _cgbac .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_cgbac .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_cgbac .SheetName ).GetWidth (int (_cgbac .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_gggc .ValueString );};const _afdb =86400000000000;

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _dedbe (args ,false )};const _gggcd =57364;

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_ffb :=len (args );if _ffb !=4&&_ffb !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fddf :=args [0].ValueNumber ;if _fddf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaae :=args [1].ValueNumber ;if _eaae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcgc :=args [2].ValueNumber ;if _bcgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffcb :=args [3].ValueNumber ;if _ffcb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _ffcb > _bcgc {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_ega :=2.0;if _ffb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ega =args [4].ValueNumber ;if _ega < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_eaag (_fddf ,_eaae ,_bcgc ,_ffcb ,_ega ));};func _fbcg (_gcdfc float64 )float64 {_ggdb :=float64 (1);for _egag :=float64 (2);_egag <=_gcdfc ;_egag ++{_ggdb *=_egag ;};return _ggdb ;};var _cgcbf ,_agfcg ,_dcac ,_fgaec ,_bcbc ,_eefd ,_fcgb ,_cfdd ,_egeab ,_ggea ,_bbdd ,_aege ,_bfga ,_bdce ,_fbcb *_cd .Regexp ;

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abdf :=args [0].AsNumber ();if _abdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_cfde :=float64 (1);if _abdf .ValueNumber < 0{_cfde =-1;};if len (args )> 1{_eaea :=args [1].AsNumber ();if _eaea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cfde =_eaea .ValueNumber ;};_fgde :=float64 (1);if len (args )> 2{_eeccf :=args [2].AsNumber ();if _eeccf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_fgde =_eeccf .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ed .Ceil (_abdf .ValueNumber ));};_gaedc :=_abdf .ValueNumber ;_gaedc ,_cgbcg :=_ed .Modf (_gaedc /_cfde );if _cgbcg !=0{if _abdf .ValueNumber > 0{_gaedc ++;}else if _fgde < 0{_gaedc --;};};return MakeNumberResult (_gaedc *_cfde );};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gadd :=args [0].AsNumber ();if _gadd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gadd .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_egbab :=float64 (1);_bbedg :=_ed .Trunc (_gadd .ValueNumber );for _debf :=_bbedg ;_debf > 1;_debf -=2{_egbab *=_debf ;};return MakeNumberResult (_egbab );};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebgc :=args [0].AsString ();if _ebgc .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_gece :=args [1].AsNumber ();if _gece .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fccfa :=_ebgc .ValueString ;if len (_fccfa )> 2&&(_eg .HasPrefix (_fccfa ,"\u0030\u0078")||_eg .HasPrefix (_fccfa ,"\u0030\u0058")){_fccfa =_fccfa [2:];};_eedac ,_cbded :=_cb .ParseInt (_fccfa ,int (_gece .ValueNumber ),64);if _cbded !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_eedac ));};

// Eval evaluates and returns an expression with prefix.
func (_abbea PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_bbafa :=_abbea ._deef .Reference (ctx ,ev );switch _bbafa .Type {case ReferenceTypeSheet :if _ebbgb (_bbafa ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bbafa .Value ));};_bcebb :=ctx .Sheet (_bbafa .Value );return _abbea ._cdffc .Eval (_bcebb ,ev );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbafa .Type ));};};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func NewLexer ()*Lexer {return &Lexer {_cggd :make (chan *node )}};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_dcacf :=_eg .Split (v ,"\u003a");if len (_dcacf )!=2{return nil ;};_gcffb ,_ :=_cb .Atoi (_dcacf [0]);_dbfe ,_ :=_cb .Atoi (_dcacf [1]);if _gcffb > _dbfe {_gcffb ,_dbfe =_dbfe ,_gcffb ;};return PrefixHorizontalRange {_gagag :pfx ,_fdeff :_gcffb ,_fcbaed :_dbfe };};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_eaff EmptyExpr )Update (q *_adf .UpdateQuery )Expression {return _eaff };

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _gdeac :=0;_gdeac < len (args )-1;_gdeac +=2{if args [_gdeac ].ValueNumber ==1{return args [_gdeac +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_bebdfc Result )AsNumber ()Result {if _bebdfc .Type ==ResultTypeString {_bebeb ,_cece :=_cb .ParseFloat (_bebdfc .ValueString ,64);if _cece ==nil {return MakeNumberResult (_bebeb );};};if _bebdfc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bebdfc ;};const _gcbec =187;func (_aagfd PrefixVerticalRange )verticalRangeReference (_aadc string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_aadc ,_aagfd ._accfe ,_aagfd ._gebgfa );};func _abgf (_efbg Result ,_ecbef ,_fegfe string )(string ,Result ){switch _efbg .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _efbg .Value (),_daaf ;default:return "",MakeErrorResult (_ecbef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fegfe +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_gcedg ,_aacff :=_cdeeg (args ,false );if _aacff ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_gcedg /_aacff );};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_dbffc :=[]string {};for _gadf :=range _adcaba {_dbffc =append (_dbffc ,_gadf );};for _gbffd :=range _dgbc {_dbffc =append (_dbffc ,_gbffd );};_ad .Strings (_dbffc );return _dbffc ;};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_degd ,_affa ,_gga :=_bbg (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _gga .Type ==ResultTypeError {return _gga ;};_bggd ,_gga :=_febg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _gga .Type ==ResultTypeError {return _gga ;};if _bggd >=_degd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_dbdbc :=args [3];if _dbdbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_ecf :=_dbdbc .ValueNumber ;if _ecf < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_eddf :=args [4];if _eddf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gdbb :=_eddf .ValueNumber ;if _gdbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_febce :=args [5];if _febce .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_agb :=_febce .ValueNumber ;if _agb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_egde :=args [6];if _egde .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddfa :=float64 (int (_egde .ValueNumber ));if !_cggb (_ddfa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dgfc :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_egae :=args [7];if _egae .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dgfc =int (_egae .ValueNumber );if !_cggba (_dgfc ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_cbae ,_gga :=_bbbb (_bggd ,_affa ,_dgfc );if _gga .Type ==ResultTypeError {return _gga ;};_cbae *=_ddfa ;_dab ,_gga :=_bbbb (_degd ,_affa ,_dgfc );if _gga .Type ==ResultTypeError {return _gga ;};_dab *=_ddfa ;_fcaa ,_gga :=_bbbb (_bggd ,_degd ,_dgfc );if _gga .Type ==ResultTypeError {return _gga ;};_fcaa *=_ddfa ;_ddcb :=_agb +_cbae *100*_ecf /_ddfa ;_ddcb /=_dab *_gdbb /_ddfa +1;_ddcb -=_fcaa *100*_ecf /_ddfa ;return MakeNumberResult (_ddcb );};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_daab PrefixHorizontalRange )Update (q *_adf .UpdateQuery )Expression {return _daab };const _dbbbcd =57358;func _bd (_ffe Result )bool {if _ffe .Type ==ResultTypeString {return _ffe .ValueString =="";};return _ffe .ValueNumber ==0;};

// CellRef is a reference to a single cell
type CellRef struct{_aded string };

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_dbdbb (args ,_cedc ))};const _faac =57350;

// String returns a string representation of FunctionCall expression.
func (_aeag FunctionCall )String ()string {_babd :=_d .Buffer {};_babd .WriteString (_aeag ._gfabg );_babd .WriteString ("\u0028");_cgdb :=len (_aeag ._fbdg )-1;for _acfaf ,_cfbbb :=range _aeag ._fbdg {_babd .WriteString (_cfbbb .String ());if _acfaf !=_cgdb {_babd .WriteString ("\u002c");};};_babd .WriteString ("\u0029");return _babd .String ();};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_fcd Context ,formula string )Result ;SetCache (_fcag string ,_eeb Result );GetFromCache (_fef string )(Result ,bool );LastEvalIsRef ()bool ;};

// Reference returns an invalid reference for EmptyExpr.
func (_cfg EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_edcg ,_cgcae :=_cabfd ("\u0046\u0049\u004e\u0044",args );if _cgcae .Type !=ResultTypeEmpty {return _cgcae ;};_cbaag :=_edcg ._gcaeg ;if _cbaag ==""{return MakeNumberResult (1.0);};_daed :=_edcg ._cfddd ;_dgfeg :=_edcg ._bbfga ;_bacdc :=1;for _cfeeae :=range _daed {if _bacdc < _dgfeg {_bacdc ++;continue ;};_aaeg :=_eg .Index (_daed [_cfeeae :],_cbaag );if _aaeg ==0{return MakeNumberResult (float64 (_bacdc ));};_bacdc ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _dfa ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// String returns a string representation of Number.
func (_eafac Number )String ()string {return _cb .FormatFloat (_eafac ._cadf ,'f',-1,64)};

// SetLocked does nothing for the invalid reference context.
func (_bfba *ivr )SetLocked (cellRef string ,locked bool ){};func _caeag (_fcdfg ,_ffaf Reference )string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_fcdfg .Value ,_ffaf .Value );};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffebe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbac :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aafg :=args [2].ValueNumber ;if _aafg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_ffebe -_fbac )/_aafg );};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_fggbe ,_fegga Expression };func _ceba (_bbee string ,_ffbb func (_gecfg float64 )float64 )Function {return func (_cbdd []Result )Result {if len (_cbdd )!=1{return MakeErrorResult (_bbee +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_becgd :=_cbdd [0].AsNumber ();switch _becgd .Type {case ResultTypeNumber :_agefb :=_ffbb (_becgd .ValueNumber );if _ed .IsNaN (_agefb ){return MakeErrorResult (_bbee +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ed .IsInf (_agefb ,0){return MakeErrorResult (_bbee +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_agefb );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_bbee +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _becgd ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbee ,_becgd .Type ));};};};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_dffdd Result )ListValues ()[]Result {if _dffdd .Type ==ResultTypeArray {_bbdc :=[]Result {};for _ ,_eabc :=range _dffdd .ValueArray {for _ ,_aeafe :=range _eabc {_bbdc =append (_bbdc ,_aeafe );};};return _bbdc ;};if _dffdd .Type ==ResultTypeList {return _dffdd .ValueList ;};return nil ;};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aafac :=args [0];if _aafac .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccb :=len (_aafac .ValueArray );for _ ,_fcdf :=range _aafac .ValueArray {if len (_fcdf )!=_ccb {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_caaa (_aafac .ValueArray ));};func _dcbcg (_efedb _fb .Time )bool {return _fb .Now ().Sub (_efedb )>=_cccb };func _bdeb (_cdfbf Result )[]Result {_daaga :=_cdfbf .ValueList ;if _cdfbf .Type ==ResultTypeArray {_daaga =nil ;for _ ,_cgfa :=range _cdfbf .ValueArray {if len (_cgfa )> 0{_daaga =append (_daaga ,_cgfa [0]);}else {_daaga =append (_daaga ,_daaf );};};};return _daaga ;};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_abfc :=args [0];if _abfc .Type !=ResultTypeArray &&_abfc .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cbb :=_abfc .ValueArray ;if len (_cbb )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_cbb )));};

// String returns a string representation for Negate.
func (_bfgf Negate )String ()string {return "\u002d"+_bfgf ._deea .String ()};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func _gff (_gabb ,_gggfb ,_dfcaf ,_geca ,_egeec float64 ,_dadd int )Result {_edg ,_bea :=_bbbb (_gabb ,_gggfb ,_dadd );if _bea .Type ==ResultTypeError {return _bea ;};_ddce ,_gfd :=_gdfb (_gabb ,_gggfb ,int (_egeec ),_dadd );if _gfd .Type ==ResultTypeError {return _gfd ;};_ggfag :=0.0;_cbgc :=0.0;_dfcaf *=100/_egeec ;_geca /=_egeec ;_geca ++;_dcba :=_edg *_egeec -_ddce ;for _bafga :=1.0;_bafga < _ddce ;_bafga ++{_gggfa :=_bafga +_dcba ;_eaaa :=_dfcaf /_ed .Pow (_geca ,_gggfa );_cbgc +=_eaaa ;_ggfag +=_gggfa *_eaaa ;};_eaed :=(_dfcaf +100)/_ed .Pow (_geca ,_ddce +_dcba );_cbgc +=_eaed ;_ggfag +=(_ddce +_dcba )*_eaed ;_ggfag /=_cbgc ;_ggfag /=_egeec ;return MakeNumberResult (_ggfag );};func _afeg (){_cgcbf =_cd .MustCompile ("\u005e\u0030\u002b\u0024");_dcac =_cd .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_fgaec =_cd .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_agfcg =_cd .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_bcbc =_cd .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_eefd =_cd .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_fcgb =_cd .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_egeab =_cd .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_ggea =_cd .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_bbdd =_cd .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_aege =_cd .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_bfga =_cd .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_edfca +_edfca +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_edfca +_edfca +"\u0029\u002b\u0059+\u0024");_bdce =_cd .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_edfca +_edfca +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_edfca +_edfca +"\u0029\u002b\u0059+\u0024");_fbcb =_cd .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_cfdd =_cd .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// String returns a string representation of PrefixExpr.
func (_caae PrefixExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021%\u0073",_caae ._deef .String (),_caae ._cdffc .String ());};

// IsDBCS returns false for the invalid reference context.
func (_addc *ivr )IsDBCS ()bool {return false };

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fdga :=args [0];if _fdga .Type ==ResultTypeError ||_fdga .Type ==ResultTypeString {return _fdga ;};return _daaf ;};

// Reference returns an invalid reference for Bool.
func (_faa Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _fgd =_dcbe +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Eval evaluates and returns the result of a Negate expression.
func (_beae Negate )Eval (ctx Context ,ev Evaluator )Result {_fdad :=_beae ._deea .Eval (ctx ,ev );if _fdad .Type ==ResultTypeNumber {return MakeNumberResult (-_fdad .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _gdcb =[...]uint8 {0,20,37,60,78,96};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_dbdbb (args ,_dbac ));};func _egf (_efd ,_egfe int )int {if _egfe ==2&&_gfaf (_efd ){return 29;}else {return _gcc [_egfe -1];};};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_bdaf :=len (args );if _bdaf < 3||_bdaf > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgdf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afcb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_abfg :=args [2].ValueNumber ;_eaef :=0.0;if _bdaf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eaef =args [3].ValueNumber ;};_dee :=0.0;if _bdaf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dee =args [4].ValueNumber ;if _dee !=0{_dee =1;};};_bfea :=_afcb *(1+_dgdf *_dee )-_eaef *_dgdf ;_ccdg :=(_abfg *_dgdf +_afcb *(1+_dgdf *_dee ));return MakeNumberResult (_ed .Log (_bfea /_ccdg )/_ed .Log (1+_dgdf ));};var _be int64 =_cdaa (1900,_fb .January ,1);

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_ceddd :v }};

// Negate is a negate expression like -A1.
type Negate struct{_deea Expression };

// Eval evaluates and returns the result of a constant array expression.
func (_dd ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_ebfe :=[][]Result {};for _ ,_adeg :=range _dd ._bcf {_afb :=[]Result {};for _ ,_dgfb :=range _adeg {_afb =append (_afb ,_dgfb .Eval (ctx ,ev ));};_ebfe =append (_ebfe ,_afb );};return MakeArrayResult (_ebfe );};func (_gbea *yyParserImpl )Parse (yylex yyLexer )int {_bfcf :=_fb .Now ();var _fffcd int ;var _fadg yySymType ;var _eeedc []yySymType ;_ =_eeedc ;_cgafa :=_gbea ._bgcag [:];Nerrs :=0;Errflag :=0;_bdbcd :=0;_gbea ._afgaf =-1;_ddgeg :=-1;defer func (){_bdbcd =-1;_gbea ._afgaf =-1;_ddgeg =-1}();_bcbdg :=-1;goto _dadga ;_baec :return 0;_gfbb :return 1;_dadga :if _dcbcg (_bfcf ){_ba .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gfbb ;};if _ggfd >=4{_g .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_ccfd (_ddgeg ),_bdaa (_bdbcd ));};_bcbdg ++;if _bcbdg >=len (_cgafa ){_dag :=make ([]yySymType ,len (_cgafa )*2);copy (_dag ,_cgafa );_cgafa =_dag ;};_cgafa [_bcbdg ]=_fadg ;_cgafa [_bcbdg ]._fcfgg =_bdbcd ;_faee :if _dcbcg (_bfcf ){_ba .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gfbb ;};_fffcd =_deggb [_bdbcd ];if _fffcd <=_cbed {goto _aabdd ;};if _gbea ._afgaf < 0{_gbea ._afgaf ,_ddgeg =_bcgba (yylex ,&_gbea ._faafd );};_fffcd +=_ddgeg ;if _fffcd < 0||_fffcd >=_gcbec {goto _aabdd ;};_fffcd =_gebad [_fffcd ];if _bfec [_fffcd ]==_ddgeg {_gbea ._afgaf =-1;_ddgeg =-1;_fadg =_gbea ._faafd ;_bdbcd =_fffcd ;if Errflag > 0{Errflag --;};goto _dadga ;};_aabdd :if _dcbcg (_bfcf ){_ba .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gfbb ;};_fffcd =_ddeb [_bdbcd ];if _fffcd ==-2{if _gbea ._afgaf < 0{_gbea ._afgaf ,_ddgeg =_bcgba (yylex ,&_gbea ._faafd );};_faeg :=0;for {if _eeae [_faeg +0]==-1&&_eeae [_faeg +1]==_bdbcd {break ;};_faeg +=2;};for _faeg +=2;;_faeg +=2{_fffcd =_eeae [_faeg +0];if _fffcd < 0||_fffcd ==_ddgeg {break ;};};_fffcd =_eeae [_faeg +1];if _fffcd < 0{goto _baec ;};};if _fffcd ==0{switch Errflag {case 0:yylex .Error (_cdeg (_bdbcd ,_ddgeg ));Nerrs ++;if _ggfd >=1{_g .Printf ("\u0025\u0073",_bdaa (_bdbcd ));_g .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_ccfd (_ddgeg ));};fallthrough;case 1,2:Errflag =3;for _bcbdg >=0{_fffcd =_deggb [_cgafa [_bcbdg ]._fcfgg ]+_geee ;if _fffcd >=0&&_fffcd < _gcbec {_bdbcd =_gebad [_fffcd ];if _bfec [_bdbcd ]==_geee {goto _dadga ;};};if _ggfd >=2{_g .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_cgafa [_bcbdg ]._fcfgg );};_bcbdg --;};goto _gfbb ;case 3:if _ggfd >=2{_g .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_ccfd (_ddgeg ));};if _ddgeg ==_dbeb {goto _gfbb ;};_gbea ._afgaf =-1;_ddgeg =-1;goto _faee ;};};if _ggfd >=2{_g .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_fffcd ,_bdaa (_bdbcd ));};_fbcf :=_fffcd ;_cdgbc :=_bcbdg ;_ =_cdgbc ;_bcbdg -=_faeb [_fffcd ];if _bcbdg +1>=len (_cgafa ){_gffd :=make ([]yySymType ,len (_cgafa )*2);copy (_gffd ,_cgafa );_cgafa =_gffd ;};_fadg =_cgafa [_bcbdg +1];_fffcd =_ecgg [_fffcd ];_ebfef :=_edbb [_fffcd ];_fbca :=_ebfef +_cgafa [_bcbdg ]._fcfgg +1;if _fbca >=_gcbec {_bdbcd =_gebad [_ebfef ];}else {_bdbcd =_gebad [_fbca ];if _bfec [_bdbcd ]!=-_fffcd {_bdbcd =_gebad [_ebfef ];};};switch _fbcf {case 1:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{yylex .(*plex )._bdabe =_fadg ._fgfe ;};case 3:_eeedc =_cgafa [_cdgbc -2:_cdgbc +1];{_fadg ._fgfe =_eeedc [2]._fgfe ;};case 4:_eeedc =_cgafa [_cdgbc -4:_cdgbc +1];{};case 5:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewBool (_eeedc [1]._fbaa ._dgad );};case 6:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewNumber (_eeedc [1]._fbaa ._dgad );};case 7:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewString (_eeedc [1]._fbaa ._dgad );};case 8:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewError (_eeedc [1]._fbaa ._dgad );};case 9:_eeedc =_cgafa [_cdgbc -2:_cdgbc +1];{_fadg ._fgfe =_eeedc [2]._fgfe ;};case 10:_eeedc =_cgafa [_cdgbc -2:_cdgbc +1];{_fadg ._fgfe =NewNegate (_eeedc [2]._fgfe );};case 15:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =_eeedc [2]._fgfe ;};case 17:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewConstArrayExpr (_eeedc [2]._bgdcf );};case 18:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._bgdcf =append (_fadg ._bgdcf ,_eeedc [1]._accf );};case 19:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._bgdcf =append (_eeedc [1]._bgdcf ,_eeedc [3]._accf );};case 20:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._accf =append (_fadg ._accf ,_eeedc [1]._fgfe );};case 21:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._accf =append (_eeedc [1]._accf ,_eeedc [3]._fgfe );};case 23:_eeedc =_cgafa [_cdgbc -2:_cdgbc +1];{_fadg ._fgfe =NewPrefixExpr (_eeedc [1]._fgfe ,_eeedc [2]._fgfe );};case 25:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewSheetPrefixExpr (_eeedc [1]._fbaa ._dgad );};case 26:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewCellRef (_eeedc [1]._fbaa ._dgad );};case 27:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewRange (_eeedc [1]._fgfe ,_eeedc [3]._fgfe );};case 28:_eeedc =_cgafa [_cdgbc -4:_cdgbc +1];{_fadg ._fgfe =NewPrefixRangeExpr (_eeedc [1]._fgfe ,_eeedc [2]._fgfe ,_eeedc [4]._fgfe );};case 29:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewNamedRangeRef (_eeedc [1]._fbaa ._dgad );};case 30:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewHorizontalRange (_eeedc [1]._fbaa ._dgad );};case 31:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._fgfe =NewVerticalRange (_eeedc [1]._fbaa ._dgad );};case 32:_eeedc =_cgafa [_cdgbc -2:_cdgbc +1];{_fadg ._fgfe =NewPrefixHorizontalRange (_eeedc [1]._fgfe ,_eeedc [2]._fbaa ._dgad );};case 33:_eeedc =_cgafa [_cdgbc -2:_cdgbc +1];{_fadg ._fgfe =NewPrefixVerticalRange (_eeedc [1]._fgfe ,_eeedc [2]._fbaa ._dgad );};case 34:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypePlus ,_eeedc [3]._fgfe );};case 35:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeMinus ,_eeedc [3]._fgfe );};case 36:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeMult ,_eeedc [3]._fgfe );};case 37:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeDiv ,_eeedc [3]._fgfe );};case 38:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeExp ,_eeedc [3]._fgfe );};case 39:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeLT ,_eeedc [3]._fgfe );};case 40:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeGT ,_eeedc [3]._fgfe );};case 41:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeLEQ ,_eeedc [3]._fgfe );};case 42:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeGEQ ,_eeedc [3]._fgfe );};case 43:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeEQ ,_eeedc [3]._fgfe );};case 44:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeNE ,_eeedc [3]._fgfe );};case 45:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewBinaryExpr (_eeedc [1]._fgfe ,BinOpTypeConcat ,_eeedc [3]._fgfe );};case 47:_eeedc =_cgafa [_cdgbc -2:_cdgbc +1];{_fadg ._fgfe =NewFunction (_eeedc [1]._fbaa ._dgad ,nil );};case 48:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._fgfe =NewFunction (_eeedc [1]._fbaa ._dgad ,_eeedc [2]._accf );};case 49:_eeedc =_cgafa [_cdgbc -1:_cdgbc +1];{_fadg ._accf =append (_fadg ._accf ,_eeedc [1]._fgfe );};case 50:_eeedc =_cgafa [_cdgbc -3:_cdgbc +1];{_fadg ._accf =append (_eeedc [1]._accf ,_eeedc [3]._fgfe );};case 53:_eeedc =_cgafa [_cdgbc -0:_cdgbc +1];{_fadg ._fgfe =NewEmptyExpr ();};};goto _dadga ;};

// String returns a string representation of a vertical range with prefix.
func (_dbdf PrefixVerticalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dbdf ._begf .String (),_dbdf ._accfe ,_dbdf ._gebgfa );};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ggg :=_eg .ToLower (args [0].ValueString );if !_cacc (_ggg ){_ ,_ ,_ ,_ ,_agfc ,_bbe :=_ebd (_ggg );if _bbe .Type ==ResultTypeError {_bbe .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _bbe ;};if _agfc {return MakeNumberResult (0);};};_geed ,_gdf ,_cdcf ,_ ,_gcd :=_ebca (_ggg );if _gcd .Type ==ResultTypeError {return _gcd ;};return MakeNumberResult (_aac (_geed ,_gdf ,_cdcf ));};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_aabg :=len (args );if _aabg < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gebgf :=args [0].ValueNumber ;if _gebgf ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_dgab :=[]float64 {};for _ ,_acga :=range args [1:]{switch _acga .Type {case ResultTypeNumber :_dgab =append (_dgab ,_acga .ValueNumber );case ResultTypeArray ,ResultTypeList :_bbcd :=_cbcf (_acga );for _ ,_fcaeb :=range _bbcd {for _ ,_gefd :=range _fcaeb {if _gefd .Type ==ResultTypeNumber &&!_gefd .IsBoolean {_dgab =append (_dgab ,_gefd .ValueNumber );};};};};};_fecc :=0.0;for _ffdc ,_dbcc :=range _dgab {_fecc +=_dbcc /_ed .Pow (1+_gebgf ,float64 (_ffdc )+1);};return MakeNumberResult (_fecc );};func _dgfe (_abb Result ,_faad ,_fbbbd int )[][]Result {_dgabd :=[][]Result {};switch _abb .Type {case ResultTypeArray :for _efbag ,_gcda :=range _abb .ValueArray {if _efbag < _faad {_dgabd =append (_dgabd ,_aafd (MakeListResult (_gcda ),_fbbbd ));}else {_dgabd =append (_dgabd ,_aafd (MakeErrorResultType (ErrorTypeNA ,""),_fbbbd ));};};case ResultTypeList :_bgaa :=_aafd (_abb ,_fbbbd );for _fdagc :=0;_fdagc < _faad ;_fdagc ++{_dgabd =append (_dgabd ,_bgaa );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bgbgd :=0;_bgbgd < _faad ;_bgbgd ++{_defa :=_aafd (_abb ,_fbbbd );_dgabd =append (_dgabd ,_defa );};};return _dgabd ;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_gcad ,_ccgfa :=_cb .ParseFloat (v ,64);if _ccgfa !=nil {_ba .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_ccgfa );};return Number {_cadf :_gcad };};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gddd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcdc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccabc :=args [2].ValueNumber ;if _ccabc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdaad :=args [3].ValueNumber ;return MakeNumberResult (_cdaad *_gddd *(_gcdc /_ccabc -1));};type yyLexer interface{Lex (_bacab *yySymType )int ;Error (_eega string );};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bcgb ,_gdge ,_egea :=_agcbd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _egea .Type ==ResultTypeError {return _egea ;};if _gdge < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _bcgb ==0{return MakeNumberResult (0);};_gbff :=_bcgb < 0;if _gbff {_bcgb =-_bcgb ;};_cagg :=args [0].Value ();_ebab :=_eg .Split (_cagg ,"\u002e");_fdaa :=float64 (int (_bcgb ));_ddge :=_ebab [1];_fffdg :=len (_ddge );_dafc :=int (_ed .Log10 (_gdge ))+1;_ccegf :=float64 (_dafc -_fffdg );_accdc ,_dace :=_cb .ParseFloat (_ddge ,64);if _dace !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_accdc *=_ed .Pow (10,_ccegf );_fabc :=_fdaa +_accdc /_gdge ;if _gbff {_fabc =-_fabc ;};return MakeNumberResult (_fabc );};

// Reference returns an invalid reference for Negate.
func (_efdde Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _aafd (_ebbcg Result ,_feaec int )[]Result {_affdg :=[]Result {};switch _ebbcg .Type {case ResultTypeList :_agdd :=_ebbcg .ValueList ;_ecgd :=len (_agdd );for _gagcb :=0;_gagcb < _feaec ;_gagcb ++{if _gagcb < _ecgd {_affdg =append (_affdg ,_agdd [_gagcb ]);}else {_affdg =append (_affdg ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bbaa :=0;_bbaa < _feaec ;_bbaa ++{_affdg =append (_affdg ,_ebbcg );};};return _affdg ;};const _cdcfe =57371;func _cebf ()yyParser {return &yyParserImpl {}};func _gdfb (_afga ,_abdc float64 ,_acbc ,_bgef int )(float64 ,Result ){_cede ,_dffd :=_eecd (_afga ),_eecd (_abdc );if _dffd .After (_cede ){_cgbe :=_dgfaf (_cede ,_dffd ,_acbc ,_bgef );_eebbb :=(_dffd .Year ()-_cgbe .Year ())*12+int (_dffd .Month ())-int (_cgbe .Month ());return float64 (_eebbb *_acbc )/12.0,_daaf ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbee :=args [0];switch _gbee .Type {case ResultTypeError :return _gbee ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_gbee .ValueNumber !=0);};if _gbee .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _beff (args );case ResultTypeArray :return _fgge (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgfc :=args [0].Ref ;if _cgfc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_bgdb ,_dbbb :=_fg .ParseCellReference (_cgfc .Value );if _dbbb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cgfc .Value );};return MakeNumberResult (float64 (_bgdb .ColumnIdx +1));};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_cgba :v }};const (_fceb rmode =iota ;_aagg ;_fbab ;);var _ddeb =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egeag :=0;_ebfg :=false ;for _ ,_abadg :=range args {switch _abadg .Type {case ResultTypeList ,ResultTypeArray :_gedb :=Xor (_abadg .ListValues ());if _gedb .Type ==ResultTypeError {return _gedb ;};if _gedb .ValueNumber !=0{_egeag ++;};_ebfg =true ;case ResultTypeNumber :if _abadg .ValueNumber !=0{_egeag ++;};_ebfg =true ;case ResultTypeString :case ResultTypeError :return _abadg ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_ebfg {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_egeag %2!=0);};func _fdaae (_fcggd Result ,_aged *criteriaParsed )bool {if _fcggd .IsBoolean {return false ;};_cfef :=_fcggd .Type ;if _aged ._gcff {return _cfef ==ResultTypeNumber &&_fcggd .ValueNumber ==_aged ._bccdd ;}else if _cfef ==ResultTypeNumber {return _fgea (_fcggd .ValueNumber ,_aged ._dbbbc );};return _ebccf (_fcggd ,_aged );};

// Reference returns a string reference value to a vertical range with prefix.
func (_cbcfg PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_gcag :=_cbcfg ._begf .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_cbcfg .verticalRangeReference (_gcag .Value )};};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_ddfef :=_dddgc (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _ddfef .Type !=ResultTypeEmpty {return _ddfef ;};_eecdg :=_bgcc (args [1:]);_edggb :=_ed .MaxFloat64 ;_baagd :=_cbcf (args [0]);for _ ,_cdgce :=range _eecdg {_badcd :=_baagd [_cdgce ._dafbg ][_cdgce ._agfg ].ValueNumber ;if _edggb > _badcd {_edggb =_badcd ;};};if _edggb ==_ed .MaxFloat64 {_edggb =0;};return MakeNumberResult (float64 (_edggb ));};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_ecgf :=_eg .Split (v ,"\u003a");if len (_ecgf )!=2{return nil ;};if _ecgf [0]> _ecgf [1]{_ecgf [0],_ecgf [1]=_ecgf [1],_ecgf [0];};return PrefixVerticalRange {_begf :pfx ,_accfe :_ecgf [0],_gebgfa :_ecgf [1]};};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_adea string };

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcda :=int (args [0].ValueNumber );return MakeBoolResult (_bcda ==_bcda /2*2);};func _bbbb (_gdg ,_ggdd float64 ,_bdbe int )(float64 ,Result ){_bec ,_fda :=_eecd (_gdg ),_eecd (_ggdd );_cbda :=_bec .Unix ();_ccdc :=_fda .Unix ();if _cbda ==_ccdc {return 0,_daaf ;};_fbgd ,_dfeg ,_ebb :=_bec .Date ();_faca ,_edd ,_fec :=_fda .Date ();_efac ,_dac :=int (_dfeg ),int (_edd );var _gggf ,_ccab float64 ;switch _bdbe {case 0:if _ebb ==31{_ebb --;};if _ebb ==30&&_fec ==31{_fec --;}else if _gcfa :=_gfaf (_fbgd );_efac ==2&&((_gcfa &&_ebb ==29)||(!_gcfa &&_ebb ==28)){_ebb =30;if _aaed :=_gfaf (_faca );_dac ==2&&((_aaed &&_fec ==29)||(!_aaed &&_fec ==28)){_fec =30;};};_gggf =float64 ((_faca -_fbgd )*360+(_dac -_efac )*30+(_fec -_ebb ));_ccab =360;case 1:_gggf =_ggdd -_gdg ;_dfbcf :=_fbgd !=_faca ;if _dfbcf &&(_faca !=_fbgd +1||_efac < _dac ||(_efac ==_dac &&_ebb < _fec )){_dgd :=0;for _fgce :=_fbgd ;_fgce <=_faca ;_fgce ++{_dgd +=_gba (_fgce ,1);};_ccab =float64 (_dgd )/float64 (_faca -_fbgd +1);}else {if !_dfbcf &&_gfaf (_fbgd ){_ccab =366;}else {if _dfbcf &&((_gfaf (_fbgd )&&(_efac < 2||(_efac ==2&&_ebb <=29)))||(_gfaf (_faca )&&(_dac > 2||(_dac ==2&&_fec ==29)))){_ccab =366;}else {_ccab =365;};};};case 2:_gggf =_ggdd -_gdg ;_ccab =360;case 3:_gggf =_ggdd -_gdg ;_ccab =365;case 4:if _ebb ==31{_ebb --;};if _fec ==31{_fec --;};_gggf =float64 ((_faca -_fbgd )*360+(_dac -_efac )*30+(_fec -_ebb ));_ccab =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _gggf /_ccab ,_daaf ;};func _ecb (_fca string ,_abf *_adf .UpdateQuery )string {_gab ,_dbg :=_fg .ParseCellReference (_fca );if _dbg !=nil {return "\u0023\u0052\u0045F\u0021";};if _abf .UpdateType ==_adf .UpdateActionRemoveColumn {_de :=_abf .ColumnIdx ;_bdg :=_gab .ColumnIdx ;if _bdg < _de {return _fca ;}else if _bdg ==_de {return "\u0023\u0052\u0045F\u0021";}else {return _gab .Update (_adf .UpdateActionRemoveColumn ).String ();};};return _fca ;};func (_abdfc Result )String ()string {return _abdfc .Value ()};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_bffa :=len (args );if _bffa !=4&&_bffa !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_bed ,_bffae :=_febg (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _bffae .Type ==ResultTypeError {return _bffae ;};_fafc ,_bffae :=_febg (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _bffae .Type ==ResultTypeError {return _bffae ;};if _bed >=_fafc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_aefe :=args [2].ValueNumber ;if _aefe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cabb :=args [3].ValueNumber ;if _cabb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbbg :=0;if _bffa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbbg =int (args [4].ValueNumber );if !_cggba (_gbbg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_abad ,_bffae :=_bbbb (_bed ,_fafc ,_gbbg );if _bffae .Type ==ResultTypeError {return _bffae ;};return MakeNumberResult (_cabb *_aefe *_abad );};func _ebbd (_fdfe string ,_ggbf func (_efacg float64 )float64 )Function {return func (_fcce []Result )Result {if len (_fcce )!=1{return MakeErrorResult (_fdfe +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_abg :=_fcce [0].AsNumber ();switch _abg .Type {case ResultTypeNumber :_defb :=_ggbf (_abg .ValueNumber );if _ed .IsNaN (_defb ){return MakeErrorResult (_fdfe +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ed .IsInf (_defb ,0){return MakeErrorResult (_fdfe +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _defb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_fdfe +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_defb );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fdfe +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _abg ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdfe ,_abg .Type ));};};};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_deea :e }};func _dcggc (_aacf Result )bool {_abcf :=_aacf .Type ;return _abcf !=ResultTypeArray &&_abcf !=ResultTypeList ;};func (_fbgb *noCache )SetCache (key string ,value Result ){};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_gcgbg PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gdgg :=_gcgbg ._begf .Reference (ctx ,ev );switch _gdgg .Type {case ReferenceTypeSheet :if _ebbgb (_gdgg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gdgg .Value ));};_adcbe :=_gcgbg .verticalRangeReference (_gdgg .Value );if _ffag ,_dfggc :=ev .GetFromCache (_adcbe );_dfggc {return _ffag ;};_ffgbd :=ctx .Sheet (_gdgg .Value );_fbea ,_geage :=_ffbd (_ffgbd ,_gcgbg ._accfe ,_gcgbg ._gebgfa );_edgf :=_bdbf (_ffgbd ,ev ,_fbea ,_geage );ev .SetCache (_adcbe ,_edgf );return _edgf ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gdgg .Type ));};};func _dbge (_fggd ,_bgecg ,_bdbed ,_eff int )int {if !_bgdd (_eff ){return _bdbed ;};_dfgf :=_bdbed ;_eagc :=_egf (_fggd ,_bgecg );if _dfgf > 30||_bdbed >=_eagc ||_dfgf >=_eagc {_dfgf =30;};return _dfgf ;};const _cdea =57351;

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_ccdaa :=args [0];if _ccdaa .Type !=ResultTypeArray &&_ccdaa .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cefgd :=_eadac (args [1]);_bdfb :=0;for _ ,_gfab :=range _cbcf (_ccdaa ){for _ ,_ebbge :=range _gfab {if _fdaae (_ebbge ,_cefgd ){_bdfb ++;};};};return MakeNumberResult (float64 (_bdfb ));};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// String returns a string representation of SheetPrefixExpr.
func (_effcg SheetPrefixExpr )String ()string {return _effcg ._adea };

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_defbg .Lock ();defer _defbg .Unlock ();if _ ,_gcfda :=_adcaba [name ];_gcfda {_ba .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_adcaba [name ]=fn ;};var _efcdg =false ;

// Reference returns an invalid reference for String.
func (_fbegf String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _bdea (_dgagf ,_agfef ,_adbe ,_cedg ,_ggba ,_bddg float64 ,_gafg int )(float64 ,Result ){_dcad :=int (_bddg );_fdcf :=_gegg (_dgagf ,_agfef ,_dcad ,_gafg );_ddea :=_beg (_dgagf ,_agfef ,_dcad ,_gafg )/_fdcf ;_cbac ,_bead :=_gdfb (_dgagf ,_agfef ,_dcad ,_gafg );if _bead .Type ==ResultTypeError {return 0,_bead ;};_bace :=_ggb (_dgagf ,_agfef ,_dcad ,_gafg );_gaaf :=_ggba /_ed .Pow (1+_cedg /_bddg ,_cbac -1+_ddea );_gaaf -=100*_adbe /_bddg *_bace /_fdcf ;_gaee :=100*_adbe /_bddg ;_cafg :=1+_cedg /_bddg ;for _aebf :=0.0;_aebf < _cbac ;_aebf ++{_gaaf +=_gaee /_ed .Pow (_cafg ,_aebf +_ddea );};return _gaaf ,MakeEmptyResult ();};var _gcc =[]int {31,28,31,30,31,30,31,31,30,31,30,31};const _dcbe ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";const _ebcea =57373;type evCache struct{_ag map[string ]Result ;_def *_dc .Mutex ;};type Expression interface{Eval (_ffg Context ,_fdd Evaluator )Result ;Reference (_egdg Context ,_bf Evaluator )Reference ;String ()string ;Update (_faff *_adf .UpdateQuery )Expression ;};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_affad :=len (args );if _affad < 3||_affad > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfgfa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfed :=args [1].ValueNumber ;if _dfed ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_efdf :=args [2].ValueNumber ;_dedf :=0.0;if _affad >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dedf =args [3].ValueNumber ;};_cced :=0.0;if _affad ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cced =args [4].ValueNumber ;if _cced !=0{_cced =1;};};var _aafb float64 ;if _gfgfa ==0{_aafb =(_efdf +_dedf )/_dfed ;}else {_bccd :=_ed .Pow (1+_gfgfa ,_dfed );if _cced ==1{_aafb =(_dedf *_gfgfa /(_bccd -1)+_efdf *_gfgfa /(1-1/_bccd ))/(1+_gfgfa );}else {_aafb =_dedf *_gfgfa /(_bccd -1)+_efdf *_gfgfa /(1-1/_bccd );};};return MakeNumberResult (-_aafb );};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfgfd :=false ;for _ ,_adaf :=range args {switch _adaf .Type {case ResultTypeList ,ResultTypeArray :_afec :=Or (_adaf .ListValues ());if _afec .Type ==ResultTypeError {return _afec ;};if _afec .ValueNumber !=0{_gfgfd =true ;};case ResultTypeNumber :if _adaf .ValueNumber !=0{_gfgfd =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _adaf ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_gfgfd );};func _beff (_bccdf []Result )Result {_dcbce :=_bccdf [0].ValueList ;_fgdg :=len (_dcbce );switch len (_bccdf ){case 1:_bcdaa :=[]Result {};for _ ,_aaadc :=range _dcbce {_bcdaa =append (_bcdaa ,MakeBoolResult (_aaadc .ValueNumber !=0));};return MakeListResult (_bcdaa );case 2:_becdg :=_bccdf [1];switch _becdg .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_daaea :=[]Result {};for _ ,_cgdcb :=range _dcbce {var _fbdb Result ;if _cgdcb .ValueNumber ==0{_fbdb =MakeBoolResult (false );}else {_fbdb =_becdg ;};_daaea =append (_daaea ,_fbdb );};return MakeListResult (_daaea );case ResultTypeList :_bbgf :=_aafd (_becdg ,_fgdg );_fgfaa :=[]Result {};for _gfba ,_dcbg :=range _dcbce {var _eafe Result ;if _dcbg .ValueNumber ==0{_eafe =MakeBoolResult (false );}else {_eafe =_bbgf [_gfba ];};_fgfaa =append (_fgfaa ,_eafe );};return MakeListResult (_fgfaa );case ResultTypeArray :_abdd :=_dgfe (_becdg ,len (_becdg .ValueArray ),_fgdg );_beee :=[][]Result {};for _ ,_febe :=range _abdd {_begca :=[]Result {};for _bgee ,_cfcc :=range _dcbce {var _ebaag Result ;if _cfcc .ValueNumber ==0{_ebaag =MakeBoolResult (false );}else {_ebaag =_febe [_bgee ];};_begca =append (_begca ,_ebaag );};_beee =append (_beee ,_begca );};return MakeArrayResult (_beee );};case 3:_afea :=_bccdf [1];_fabf :=_bccdf [2];_bgbga :=_dcggc (_afea );_dcda :=_dcggc (_fabf );if _bgbga &&_dcda {_aegae :=[]Result {};for _ ,_dggfb :=range _dcbce {var _bccb Result ;if _dggfb .ValueNumber ==0{_bccb =_fabf ;}else {_bccb =_afea ;};_aegae =append (_aegae ,_bccb );};return MakeListResult (_aegae );};if _afea .Type !=ResultTypeArray &&_fabf .Type !=ResultTypeArray {_fgad :=_aafd (_afea ,_fgdg );_bafda :=_aafd (_fabf ,_fgdg );_beef :=[]Result {};for _fbee ,_gfbab :=range _dcbce {var _aeee Result ;if _gfbab .ValueNumber ==0{_aeee =_bafda [_fbee ];}else {_aeee =_fgad [_fbee ];};_beef =append (_beef ,_aeee );};return MakeListResult (_beef );};_dfega ,_eaec :=len (_afea .ValueArray ),len (_fabf .ValueArray );_ecbf ,_agdff :=_dfega ,_eaec ;if _eaec > _ecbf {_ecbf ,_agdff =_agdff ,_ecbf ;};_ddbbd :=_dgfe (_afea ,_ecbf ,_fgdg );_cbdeg :=_dgfe (_fabf ,_ecbf ,_fgdg );_eabdc :=[][]Result {};for _ddfg :=0;_ddfg < _ecbf ;_ddfg ++{_egbc :=[]Result {};for _gdgdc ,_gdbec :=range _dcbce {var _fbbd Result ;if _gdbec .ValueNumber ==0{if _ddfg < _eaec {_fbbd =_cbdeg [_ddfg ][_gdgdc ];}else {_fbbd =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _ddfg < _dfega {_fbbd =_ddbbd [_ddfg ][_gdgdc ];}else {_fbbd =MakeErrorResultType (ErrorTypeNA ,"");};};_egbc =append (_egbc ,_fbbd );};_eabdc =append (_eabdc ,_egbc );};return MakeArrayResult (_eabdc );};return MakeErrorResult ("");};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_ed .Pi );};func _bceg (_gfadc ,_eddd []float64 ,_dcf float64 )float64 {_fffde :=_dcf +1;_fccf :=_gfadc [0];_cbdc :=len (_gfadc );_gfb :=_eddd [0];for _aabf :=1;_aabf < _cbdc ;_aabf ++{_fccf +=_gfadc [_aabf ]/_ed .Pow (_fffde ,(_eddd [_aabf ]-_gfb )/365);};return _fccf ;};func _fcbd (_cefa ,_gaga ,_eac int )int {if _cefa > _gaga {return 0;};if _bgdd (_eac ){return (_gaga -_cefa +1)*360;};_dda :=0;for _abd :=_cefa ;_abd <=_gaga ;_abd ++{_afe :=365;if _gfaf (_abd ){_afe =366;};_dda +=_afe ;};return _dda ;};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_aaba :=args [0];if _aaba .Type !=ResultTypeArray &&_aaba .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cdac :=_aaba .ValueArray ;if len (_cdac )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_cdac [0])));};func _cbcf (_fcaea Result )[][]Result {switch _fcaea .Type {case ResultTypeArray :return _fcaea .ValueArray ;case ResultTypeList :return [][]Result {_fcaea .ValueList };default:return [][]Result {};};};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgdf :=args [0].AsNumber ();if _cgdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eace :=float64 (0);if len (args )> 1{_efdd :=args [1].AsNumber ();if _efdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eace =_efdd .ValueNumber ;};_feaef :=_cgdf .ValueNumber ;_fdef :=1.0;if _eace >=0{_fdef =_ed .Pow (1/10.0,_eace );}else {return MakeNumberResult (0);};_feaef ,_dccf :=_ed .Modf (_feaef /_fdef );_ccadc :=0.99999;if _dccf > _ccadc {_feaef ++;}else if _dccf < -_ccadc {_feaef --;};_ =_dccf ;return MakeNumberResult (_feaef *_fdef );};type node struct{_ecbbf tokenType ;_dgad string ;};type ivr struct{};var _ddgf =[]*_cd .Regexp {};func _bc (_dge BinOpType ,_cab []Result ,_cc Result )Result {_caf :=[]Result {};switch _cc .Type {case ResultTypeNumber :_ecd :=_cc .ValueNumber ;for _cce :=range _cab {_gd :=_cab [_cce ].AsNumber ();if _gd .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _dge {case BinOpTypePlus :_caf =append (_caf ,MakeNumberResult (_gd .ValueNumber +_ecd ));case BinOpTypeMinus :_caf =append (_caf ,MakeNumberResult (_gd .ValueNumber -_ecd ));case BinOpTypeMult :_caf =append (_caf ,MakeNumberResult (_gd .ValueNumber *_ecd ));case BinOpTypeDiv :if _ecd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_caf =append (_caf ,MakeNumberResult (_gd .ValueNumber /_ecd ));case BinOpTypeExp :_caf =append (_caf ,MakeNumberResult (_ed .Pow (_gd .ValueNumber ,_ecd )));case BinOpTypeLT :_caf =append (_caf ,MakeBoolResult (_gd .ValueNumber < _ecd ));case BinOpTypeGT :_caf =append (_caf ,MakeBoolResult (_gd .ValueNumber > _ecd ));case BinOpTypeEQ :_caf =append (_caf ,MakeBoolResult (_gd .ValueNumber ==_ecd ));case BinOpTypeLEQ :_caf =append (_caf ,MakeBoolResult (_gd .ValueNumber <=_ecd ));case BinOpTypeGEQ :_caf =append (_caf ,MakeBoolResult (_gd .ValueNumber >=_ecd ));case BinOpTypeNE :_caf =append (_caf ,MakeBoolResult (_gd .ValueNumber !=_ecd ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dge ));};};case ResultTypeString :_eba :=_cc .ValueString ;for _ab :=range _cab {_ade :=_cab [_ab ].AsString ();if _ade .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _dge {case BinOpTypeLT :_caf =append (_caf ,MakeBoolResult (_ade .ValueString < _eba ));case BinOpTypeGT :_caf =append (_caf ,MakeBoolResult (_ade .ValueString > _eba ));case BinOpTypeEQ :_caf =append (_caf ,MakeBoolResult (_ade .ValueString ==_eba ));case BinOpTypeLEQ :_caf =append (_caf ,MakeBoolResult (_ade .ValueString <=_eba ));case BinOpTypeGEQ :_caf =append (_caf ,MakeBoolResult (_ade .ValueString >=_eba ));case BinOpTypeNE :_caf =append (_caf ,MakeBoolResult (_ade .ValueString !=_eba ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dge ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_caf );};var _facab =[...]struct{_fdccc int ;_abfgb int ;_effde string ;}{};

// String returns a string representation of a horizontal range.
func (_bdgf HorizontalRange )String ()string {return _bdgf .horizontalRangeReference ()};func _gfcc (_fgddd ,_gffce Expression )(Expression ,Expression ,error ){_fbff ,_cbegd :=_fgddd .(CellRef );if !_cbegd {return nil ,nil ,_f .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fgddd .String ()));};_gaffg ,_cbegd :=_gffce .(CellRef );if !_cbegd {return nil ,nil ,_f .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_gffce .String ()));};_fbgg ,_abefb :=_fg .ParseCellReference (_fbff ._aded );if _abefb !=nil {return nil ,nil ,_abefb ;};_cfada ,_abcd :=_fg .ParseCellReference (_gaffg ._aded );if _abcd !=nil {return nil ,nil ,_abcd ;};_cbbbb :=false ;if _fbgg .RowIdx > _cfada .RowIdx {_cbbbb =true ;_fbgg .RowIdx ,_cfada .RowIdx =_cfada .RowIdx ,_fbgg .RowIdx ;};if _fbgg .ColumnIdx > _cfada .ColumnIdx {_cbbbb =true ;_fbgg .ColumnIdx ,_cfada .ColumnIdx =_cfada .ColumnIdx ,_fbgg .ColumnIdx ;_fbgg .Column ,_cfada .Column =_cfada .Column ,_fbgg .Column ;};if _cbbbb {return NewCellRef (_fbgg .String ()),NewCellRef (_cfada .String ()),nil ;};return _fgddd ,_gffce ,nil ;};func LexReader (r _a .Reader )chan *node {_bfgaf :=NewLexer ();go _bfgaf .lex (r );return _bfgaf ._cggd };

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_deef Expression ;_cdffc Expression ;};const _bfff ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _gag =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func _cggba (_bbbc int )bool {return _bbbc >=0&&_bbbc <=4};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};var _adcaba =map[string ]Function {};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cbc :=args [0];switch _cbc .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_gcb :=_eecd (_cbc .ValueNumber );return MakeNumberResult (float64 (_gcb .Month ()));case ResultTypeString :_gdaa :=_eg .ToLower (_cbc .ValueString );if !_cacc (_gdaa ){_ ,_ ,_ ,_ ,_fafa ,_cabe :=_ebd (_gdaa );if _cabe .Type ==ResultTypeError {_cabe .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _cabe ;};if _fafa {return MakeNumberResult (1);};};_ ,_fge ,_ ,_ ,_gdfc :=_ebca (_gdaa );if _gdfc .Type ==ResultTypeError {return _gdfc ;};return MakeNumberResult (float64 (_fge ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};func _bdbf (_deaed Context ,_geaa Evaluator ,_debdff ,_dafab string )Result {_cfcae ,_gcegg :=_fg .ParseCellReference (_debdff );if _gcegg !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_debdff ,_gcegg .Error ()));};_adcgb ,_dbfc :=_cfcae .ColumnIdx ,_cfcae .RowIdx ;_dgb ,_eeadf :=_fg .ParseCellReference (_dafab );if _eeadf !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_dafab ,_eeadf .Error ()));};_afdfg ,_agad :=_dgb .ColumnIdx ,_dgb .RowIdx ;_cfadc :=[][]Result {};for _fbgc :=_dbfc ;_fbgc <=_agad ;_fbgc ++{_begge :=[]Result {};for _agfda :=_adcgb ;_agfda <=_afdfg ;_agfda ++{_fbeab :=_deaed .Cell (_g .Sprintf ("\u0025\u0073\u0025\u0064",_fg .IndexToColumn (_agfda ),_fbgc ),_geaa );_begge =append (_begge ,_fbeab );};_cfadc =append (_cfadc ,_begge );};if len (_cfadc )==1{if len (_cfadc [0])==1{return _cfadc [0][0];};return MakeListResult (_cfadc [0]);};return MakeArrayResult (_cfadc );};var _gf =map[string ]*_cd .Regexp {};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_agdcd :=len (args );if _agdcd !=5&&_agdcd !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eef ,_cedec ,_gcfg :=_bbg (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _gcfg .Type ==ResultTypeError {return _gcfg ;};_ebfa ,_gcfg :=_febg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _gcfg .Type ==ResultTypeError {return _gcfg ;};if _ebfa >=_eef {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gdag :=args [3].ValueNumber ;if _gdag < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_badeb :=args [4].ValueNumber ;if _badeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_fdag :=0;if _agdcd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdag =int (args [5].ValueNumber );if !_cggba (_fdag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_bbcf ,_gcfg :=_bbbb (_eef ,_cedec ,_fdag );if _gcfg .Type ==ResultTypeError {return _gcfg ;};_cbdf ,_gcfg :=_bbbb (_ebfa ,_cedec ,_fdag );if _gcfg .Type ==ResultTypeError {return _gcfg ;};_cbdg ,_gcfg :=_bbbb (_ebfa ,_eef ,_fdag );if _gcfg .Type ==ResultTypeError {return _gcfg ;};_fgdb :=1+_cbdf *_gdag ;_agee :=1+_bbcf *_badeb ;return MakeNumberResult ((_fgdb /_agee -_cbdg *_gdag )*100);};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_bde ,_cbg :=_dgea (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _cbg .Type ==ResultTypeError {return _cbg ;};return MakeNumberResult (_gegg (_bde ._bfd ,_bde ._cdee ,_bde ._cdgb ,_bde ._fgfa ));};

// String returns a string representation of a vertical range.
func (_aedfg VerticalRange )String ()string {return _aedfg .verticalRangeReference ()};func _ebccf (_debdf Result ,_cgbfa *criteriaParsed )bool {_edae :=_eg .ToLower (_debdf .ValueString );_begee :=_cgbfa ._dbbbc ._edab ;_bgedc :=_cgbfa ._dbbbc ._dbde ;if _begee ==_aacde {return _edae ==_bgedc ||_b .Match (_bgedc ,_edae );};if _debdf .Type !=ResultTypeEmpty {if _edae ==_cgbfa ._cfce ||_b .Match (_cgbfa ._cfce ,_edae ){return true ;};if _ ,_bfcaa :=_cb .ParseFloat (_bgedc ,64);_bfcaa ==nil {return false ;};switch _begee {case _affe :return _edae <=_bgedc ;case _aadda :return _edae >=_bgedc ;case _dabe :return _edae < _bgedc ;case _bcegb :return _edae > _bgedc ;};};return false ;};var _agddb =[...]uint8 {0,17,33,49,63,78,93,108};func _acdea (_efed string )*criteriaRegex {_cbaf :=&criteriaRegex {};if _efed ==""{return _cbaf ;};if _ggfg :=_aecf .FindStringSubmatch (_efed );len (_ggfg )> 1{_cbaf ._edab =_aacde ;_cbaf ._dbde =_ggfg [1];}else if _fdgc :=_cadc .FindStringSubmatch (_efed );len (_fdgc )> 1{_cbaf ._edab =_aacde ;_cbaf ._dbde =_fdgc [1];}else if _bgbea :=_ebce .FindStringSubmatch (_efed );len (_bgbea )> 1{_cbaf ._edab =_affe ;_cbaf ._dbde =_bgbea [1];}else if _egfa :=_decc .FindStringSubmatch (_efed );len (_egfa )> 1{_cbaf ._edab =_aadda ;_cbaf ._dbde =_egfa [1];}else if _gbeb :=_facf .FindStringSubmatch (_efed );len (_gbeb )> 1{_cbaf ._edab =_dabe ;_cbaf ._dbde =_gbeb [1];}else if _abbd :=_cgggg .FindStringSubmatch (_efed );len (_abbd )> 1{_cbaf ._edab =_bcegb ;_cbaf ._dbde =_abbd [1];};return _cbaf ;};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bafe :=args [0].AsNumber ();if _bafe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gced :=args [1].AsNumber ();if _gced .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_ed .Pow (_bafe .ValueNumber ,_gced .ValueNumber ));};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gdab :=_eg .ToLower (args [0].ValueString );if !_gce (_gdab ){_ ,_ ,_ ,_bgd ,_fgf :=_ebca (_gdab );if _fgf .Type ==ResultTypeError {_fgf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _fgf ;};if _bgd {return MakeNumberResult (0);};};_fabg ,_ebada ,_dfbc ,_acb ,_ ,_dae :=_ebd (_gdab );if _dae .Type ==ResultTypeError {return _dae ;};_agfe :=_bcg (float64 (_fabg ),float64 (_ebada ),_dfbc );if _acb {_agfe +=0.5;}else if _agfe >=1{_agfe -=float64 (int (_agfe ));};return MakeNumberResult (_agfe );};func _cec ()evCache {_dff :=evCache {};_dff ._ag =make (map[string ]Result );_dff ._def =&_dc .Mutex {};return _dff ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// Eval evaluates and returns the result of a formula.
func (_ebad *defEval )Eval (ctx Context ,formula string )Result {_ddg :=ParseString (formula );_bdd :=make (chan Result );go func (){if _ddg ==nil {_bdd <-MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_ebad .checkLastEvalIsRef (ctx ,_ddg );_bdd <-_ddg .Eval (ctx ,_ebad );};}();select{case _ggc :=<-_bdd :return _ggc ;case <-_fb .After (_bdf ):_ba .Log ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};const _feca =57368;

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_eagd :=len (args );if _eagd < 3||_eagd > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbdab :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_caecfb :=args [1].ValueNumber ;if _caecfb !=float64 (int (_caecfb )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bee :=args [2].ValueNumber ;_aeac :=0.0;if _eagd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeac =args [3].ValueNumber ;};_daafc :=0.0;if _eagd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_daafc =args [4].ValueNumber ;if _daafc !=0{_daafc =1;};};if _cbdab ==0{return MakeNumberResult (-_bee *_caecfb -_aeac );}else {return MakeNumberResult ((((1-_ed .Pow (1+_cbdab ,_caecfb ))/_cbdab )*_bee *(1+_cbdab *_daafc )-_aeac )/_ed .Pow (1+_cbdab ,_caecfb ));};};

// String returns a string representation of ConstArrayExpr.
func (_ffd ConstArrayExpr )String ()string {return ""};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_fgga :=args [1].ValueNumber ;_ddc :=args [0];var _gac float64 ;switch _ddc .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_gac =_ddc .ValueNumber ;case ResultTypeString :_abac :=DateValue ([]Result {args [0]});if _abac .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gac =_abac .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cdb :=_eecd (_gac );_fgdd :=_cdb .AddDate (0,int (_fgga ),0);_gfad ,_feag ,_afgf :=_fgdd .Date ();_gegd :=_aac (_gfad ,int (_feag ),_afgf );if _gegd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_gegd );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_fdae ,_gegae ,_fffe :=_gfcc (from ,to );if _fffe !=nil {_ba .Log (_fffe .Error ());return NewError (_fffe .Error ());};return Range {_fggbe :_fdae ,_fegga :_gegae };};

// Eval evaluates a range returning a list of results or an error.
func (_beegd Range )Eval (ctx Context ,ev Evaluator )Result {_ebgd :=_beegd ._fggbe .Reference (ctx ,ev );_bbgb :=_beegd ._fegga .Reference (ctx ,ev );_cfdgd :=_caeag (_ebgd ,_bbgb );if _ebgd .Type ==ReferenceTypeCell &&_bbgb .Type ==ReferenceTypeCell {if _acgdcc ,_bfgfc :=ev .GetFromCache (_cfdgd );_bfgfc {return _acgdcc ;}else {_cfcac :=_bdbf (ctx ,ev ,_ebgd .Value ,_bbgb .Value );ev .SetCache (_cfdgd ,_cfcac );return _cfcac ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_cfdgd );};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgca :=args [0].AsString ();if _bgca .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_bgca .ValueString )));};const _befcda =57362;

// Update updates the FunctionCall references after removing a row/column.
func (_gecdg FunctionCall )Update (q *_adf .UpdateQuery )Expression {_gefcb :=[]Expression {};for _ ,_ffcca :=range _gecdg ._fbdg {_egac :=_ffcca .Update (q );_gefcb =append (_gefcb ,_egac );};return FunctionCall {_gfabg :_gecdg ._gfabg ,_fbdg :_gefcb };};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfdgd :=args [0].AsNumber ();if _dfdgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _fbdf float64 ;_gbbb :=args [1].AsNumber ();if _gbbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbdf =_gbbb .ValueNumber ;if _fbdf < 0&&_dfdgd .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_gggd :=_dfdgd .ValueNumber ;_gggd ,_gecg :=_ed .Modf (_gggd /_fbdf );if _gecg !=0{if _dfdgd .ValueNumber < 0&&_gecg < 0{_gggd --;};};return MakeNumberResult (_gggd *_fbdf );};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_gbac :=len (args );if _gbac !=5&&_gbac !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adef ,_fde ,_ebcc :=_bbg (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _ebcc .Type ==ResultTypeError {return _ebcc ;};_ebbc ,_ebcc :=_febg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _ebcc .Type ==ResultTypeError {return _ebcc ;};if _ebbc >=_adef {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_afbb :=args [3].ValueNumber ;if _afbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_befc :=args [4].ValueNumber ;if _befc <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_facd :=0;if _gbac ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_facd =int (args [5].ValueNumber );if !_cggba (_facd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_cdba ,_ebcc :=_bbbb (_ebbc ,_fde ,_facd );if _ebcc .Type ==ResultTypeError {return _ebcc ;};_gagc ,_ebcc :=_bbbb (_ebbc ,_adef ,_facd );if _ebcc .Type ==ResultTypeError {return _ebcc ;};_daage ,_ebcc :=_bbbb (_adef ,_fde ,_facd );if _ebcc .Type ==ResultTypeError {return _ebcc ;};_eaede :=1+_cdba *_afbb ;_eaede /=_befc /100+_gagc *_afbb ;_eaede --;_eaede /=_daage ;return MakeNumberResult (_eaede );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func _agcbd (_agdf []Result ,_cbea string )(float64 ,float64 ,Result ){if len (_agdf )!=2{return 0,0,MakeErrorResult (_cbea +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _agdf [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_cbea +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bacf :=_agdf [0].ValueNumber ;if _agdf [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_cbea +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gfge :=float64 (int (_agdf [1].ValueNumber ));if _gfge < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_cbea +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _bacf ,_gfge ,_daaf ;};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcebc :=args [0].AsString ();if _fcebc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_fcebc .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_fcebc .ValueString [0]));};var _aaee =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };type amorArgs struct{_gacd float64 ;_bga float64 ;_eege float64 ;_fdcg float64 ;_edgg int ;_gdbe float64 ;_bdae int ;};

// Eval evaluates the binary expression using the context given.
func (_fd BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_fdc :=_fd ._da .Eval (ctx ,ev );if _fdc .Type ==ResultTypeError {return _fdc ;};_dce :=_fd ._dgf .Eval (ctx ,ev );if _dce .Type ==ResultTypeError {return _dce ;};if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeArray {if !_daa (_fdc .ValueArray ,_dce .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ede (_fd ._ege ,_fdc .ValueArray ,_dce .ValueArray );}else if _fdc .Type ==ResultTypeList {if len (_fdc .ValueList )!=len (_dce .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _baf (_fd ._ege ,_fdc .ValueList ,_dce .ValueList );};}else if _fdc .Type ==ResultTypeArray &&(_dce .Type ==ResultTypeNumber ||_dce .Type ==ResultTypeString ){return _ca (_fd ._ege ,_fdc .ValueArray ,_dce );}else if _fdc .Type ==ResultTypeList &&(_dce .Type ==ResultTypeNumber ||_dce .Type ==ResultTypeString ){return _bc (_fd ._ege ,_fdc .ValueList ,_dce );};switch _fd ._ege {case BinOpTypePlus :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeNumberResult (_fdc .ValueNumber +_dce .ValueNumber );};};case BinOpTypeMinus :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeNumberResult (_fdc .ValueNumber -_dce .ValueNumber );};};case BinOpTypeMult :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeNumberResult (_fdc .ValueNumber *_dce .ValueNumber );};};case BinOpTypeDiv :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {if _dce .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_fdc .ValueNumber /_dce .ValueNumber );};};case BinOpTypeExp :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeNumberResult (_ed .Pow (_fdc .ValueNumber ,_dce .ValueNumber ));};};case BinOpTypeLT :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeBoolResult (_fdc .ValueNumber < _dce .ValueNumber );};if _fdc .Type ==ResultTypeString {return MakeBoolResult (_fdc .ValueString < _dce .ValueString );};if _fdc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _fdc .Type ==ResultTypeString &&_dce .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _fdc .Type ==ResultTypeNumber &&_dce .Type ==ResultTypeString {return MakeBoolResult (true );}else if _fdc .Type ==ResultTypeEmpty &&(_dce .Type ==ResultTypeNumber ||_dce .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_fdc .Type ==ResultTypeNumber ||_fdc .Type ==ResultTypeString )&&_dce .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeBoolResult (_fdc .ValueNumber > _dce .ValueNumber );};if _fdc .Type ==ResultTypeString {return MakeBoolResult (_fdc .ValueString > _dce .ValueString );};if _fdc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _fdc .Type ==ResultTypeString &&_dce .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _fdc .Type ==ResultTypeNumber &&_dce .Type ==ResultTypeString {return MakeBoolResult (false );}else if _fdc .Type ==ResultTypeEmpty &&(_dce .Type ==ResultTypeNumber ||_dce .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_fdc .Type ==ResultTypeNumber ||_fdc .Type ==ResultTypeString )&&_dce .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeBoolResult (_fdc .ValueNumber ==_dce .ValueNumber );};if _fdc .Type ==ResultTypeString {return MakeBoolResult (_fdc .ValueString ==_dce .ValueString );};if _fdc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_fdc .Type ==ResultTypeString &&_dce .Type ==ResultTypeNumber )||(_fdc .Type ==ResultTypeNumber &&_dce .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _fdc .Type ==ResultTypeEmpty &&(_dce .Type ==ResultTypeNumber ||_dce .Type ==ResultTypeString ){return MakeBoolResult (_bd (_dce ));}else if (_fdc .Type ==ResultTypeNumber ||_fdc .Type ==ResultTypeString )&&_dce .Type ==ResultTypeEmpty {return MakeBoolResult (_bd (_fdc ));};case BinOpTypeNE :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeBoolResult (_fdc .ValueNumber !=_dce .ValueNumber );};if _fdc .Type ==ResultTypeString {return MakeBoolResult (_fdc .ValueString !=_dce .ValueString );};if _fdc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_fdc .Type ==ResultTypeString &&_dce .Type ==ResultTypeNumber )||(_fdc .Type ==ResultTypeNumber &&_dce .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _fdc .Type ==ResultTypeEmpty &&(_dce .Type ==ResultTypeNumber ||_dce .Type ==ResultTypeString ){return MakeBoolResult (!_bd (_dce ));}else if (_fdc .Type ==ResultTypeNumber ||_fdc .Type ==ResultTypeString )&&_dce .Type ==ResultTypeEmpty {return MakeBoolResult (!_bd (_fdc ));};case BinOpTypeLEQ :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeBoolResult (_fdc .ValueNumber <=_dce .ValueNumber );};if _fdc .Type ==ResultTypeString {return MakeBoolResult (_fdc .ValueString <=_dce .ValueString );};if _fdc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _fdc .Type ==ResultTypeString &&_dce .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _fdc .Type ==ResultTypeNumber &&_dce .Type ==ResultTypeString {return MakeBoolResult (true );}else if _fdc .Type ==ResultTypeEmpty &&(_dce .Type ==ResultTypeNumber ||_dce .Type ==ResultTypeString ){return MakeBoolResult (_bd (_dce ));}else if (_fdc .Type ==ResultTypeNumber ||_fdc .Type ==ResultTypeString )&&_dce .Type ==ResultTypeEmpty {return MakeBoolResult (_bd (_fdc ));};case BinOpTypeGEQ :if _fdc .Type ==_dce .Type {if _fdc .Type ==ResultTypeNumber {return MakeBoolResult (_fdc .ValueNumber >=_dce .ValueNumber );};if _fdc .Type ==ResultTypeString {return MakeBoolResult (_fdc .ValueString >=_dce .ValueString );};if _fdc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _fdc .Type ==ResultTypeString &&_dce .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _fdc .Type ==ResultTypeNumber &&_dce .Type ==ResultTypeString {return MakeBoolResult (false );}else if _fdc .Type ==ResultTypeEmpty &&(_dce .Type ==ResultTypeNumber ||_dce .Type ==ResultTypeString ){return MakeBoolResult (_bd (_dce ));}else if (_fdc .Type ==ResultTypeNumber ||_fdc .Type ==ResultTypeString )&&_dce .Type ==ResultTypeEmpty {return MakeBoolResult (_bd (_fdc ));};case BinOpTypeConcat :return MakeStringResult (_fdc .Value ()+_dce .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _effce (args ,true )};func _ddfe (_feda ,_gbgg _fb .Time ,_bgbb int )float64 {if _feda .After (_gbgg ){_feda ,_gbgg =_gbgg ,_feda ;};_dfca :=0;_bebd ,_baag ,_dfd :=_feda .Date ();_aedcf ,_dfbg ,_bac :=_gbgg .Date ();_bggc ,_dbaa :=int (_baag ),int (_dfbg );_dgc ,_eebd :=_dbge (_bebd ,_bggc ,_dfd ,_bgbb ),_dbge (_aedcf ,_dbaa ,_bac ,_bgbb );if !_bgdd (_bgbb ){return _aac (_aedcf ,_dbaa ,_eebd )-_aac (_bebd ,_bggc ,_dgc );};if _bgbb ==0{if (_bggc ==2||_dgc < 30)&&_bac ==31{_eebd =31;}else if _dbaa ==2&&_eebd ==_egf (_aedcf ,_dbaa ){_eebd =_egf (_aedcf ,2);};}else {if _bggc ==2&&_dgc ==30{_dgc =_egf (_bebd ,2);};if _dbaa ==2&&_eebd ==30{_eebd =_egf (_aedcf ,2);};};if _bebd < _aedcf ||(_bebd ==_aedcf &&_bggc < _dbaa ){_dfca =30-_dgc +1;_dfd =1;_dgc =1;_ffa :=_fb .Date (_bebd ,_fb .Month (_bggc ),_dfd ,0,0,0,0,_fb .UTC ).AddDate (0,1,0);if _ffa .Year ()< _aedcf {_dfca +=_ead (_ffa .Year (),int (_ffa .Month ()),12,_bgbb );_ffa =_ffa .AddDate (0,13-int (_ffa .Month ()),0);_dfca +=_fcbd (_ffa .Year (),_aedcf -1,_bgbb );};_dfca +=_ead (_aedcf ,int (_ffa .Month ()),_dbaa -1,_bgbb );_ffa =_ffa .AddDate (0,_dbaa -int (_ffa .Month ()),0);_bggc =_ffa .Day ();};_dfca +=_eebd -_dgc ;if _dfca > 0{return float64 (_dfca );}else {return 0;};};func _bcg (_faaa ,_dddd ,_eea float64 )float64 {return (_faaa *3600+_dddd *60+_eea )/86400};var _cfcce =[...]string {};const _dcdg ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// Reference returns an invalid reference for ConstArrayExpr.
func (_dfb ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_abc :=args [1].ValueNumber ;_gcg :=args [0];var _acc float64 ;switch _gcg .Type {case ResultTypeEmpty :_acc =0;case ResultTypeNumber :_acc =_gcg .ValueNumber ;case ResultTypeString :_dffg :=DateValue ([]Result {args [0]});if _dffg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_acc =_dffg .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ggfc :=_eecd (_acc );_fae :=_ggfc .AddDate (0,int (_abc +1),0);_bbb ,_dfff ,_ :=_fae .Date ();_gef :=_aac (_bbb ,int (_dfff ),0);if _gef < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _bbb ==1900&&_dfff ==3{_gef --;};return MakeNumberResult (_gef );};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_dfffd :=_d .Buffer {};for _ ,_gafce :=range args {switch _gafce .Type {case ResultTypeString :_dfffd .WriteString (_gafce .ValueString );case ResultTypeNumber :var _dafg string ;if _gafce .IsBoolean {if _gafce .ValueNumber ==0{_dafg ="\u0046\u0041\u004cS\u0045";}else {_dafg ="\u0054\u0052\u0055\u0045";};}else {_dafg =_gafce .AsString ().ValueString ;};_dfffd .WriteString (_dafg );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_dfffd .String ());};

// GetFilename returns an empty string for the invalid reference context.
func (_fffgd *ivr )GetFilename ()string {return ""};func _dbdbb (_gebf []Result ,_gcdfcg countMode )float64 {_gdacf :=0.0;for _ ,_degg :=range _gebf {switch _degg .Type {case ResultTypeNumber :if _gcdfcg ==_cedc ||(_gcdfcg ==_gafb &&!_degg .IsBoolean ){_gdacf ++;};case ResultTypeList ,ResultTypeArray :_gdacf +=_dbdbb (_degg .ListValues (),_gcdfcg );case ResultTypeString :if _gcdfcg ==_cedc {_gdacf ++;};case ResultTypeEmpty :if _gcdfcg ==_dbac {_gdacf ++;};};};return _gdacf ;};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_bfcc :=len (args );if _bfcc < 3||_bfcc > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aagc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_agca :=args [1].ValueNumber ;if _agca !=float64 (int (_agca )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgfb :=args [2].ValueNumber ;_fcaee :=0.0;if _bfcc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcaee =args [3].ValueNumber ;};_bbaf :=0;if _bfcc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbaf =int (args [4].ValueNumber );if _bbaf !=0{_bbaf =1;};};return MakeNumberResult (_dfgc (_aagc ,_agca ,_cgfb ,_fcaee ,_bbaf ));};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_gaea :=_dddgc (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _gaea .Type !=ResultTypeEmpty {return _gaea ;};_faeac :=_bgcc (args [1:]);_dcfef :=-_ed .MaxFloat64 ;_cedgd :=_cbcf (args [0]);for _ ,_cfcg :=range _faeac {_fcbac :=_cedgd [_cfcg ._dafbg ][_cfcg ._agfg ].ValueNumber ;if _dcfef < _fcbac {_dcfef =_fcbac ;};};if _dcfef ==-_ed .MaxFloat64 {_dcfef =0;};return MakeNumberResult (float64 (_dcfef ));};var _egcbd =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};var _defbg _dc .Mutex ;func _gdad (_bbcfc []Result ,_edaad rmode )Result {if len (_bbcfc )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgedf :=_bbcfc [0].AsNumber ();if _bgedf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_adbf :=_bbcfc [1].AsNumber ();if _adbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_becb :=_adbf .ValueNumber ;_egbb :=_bgedf .ValueNumber ;_dbed :=1.0;if _becb > 0{_dbed =_ed .Pow (1/10.0,_becb );}else {_dbed =_ed .Pow (10.0,-_becb );};_egbb ,_bdegg :=_ed .Modf (_egbb /_dbed );switch _edaad {case _fceb :const _cfba =0.499999999;if _bdegg >=_cfba {_egbb ++;}else if _bdegg <=-_cfba {_egbb --;};case _aagg :case _fbab :if _bdegg > 0{_egbb ++;}else if _bdegg < 0{_egbb --;};};return MakeNumberResult (_egbb *_dbed );};

// Eval evaluates and returns the result of a sheet expression.
func (_cadab SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_befcdf :=args [0].AsNumber ();_gbge :=args [1].AsNumber ();if _befcdf .Type !=ResultTypeNumber ||_gbge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gbge .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_ed .Trunc (_befcdf .ValueNumber /_gbge .ValueNumber ));};func _dgea (_cdfb []Result ,_bfc string )(*couponArgs ,Result ){_fgcg :=len (_cdfb );if _fgcg !=3&&_fgcg !=4{return nil ,MakeErrorResult (_bfc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebe ,_cbe ,_cgd :=_bbg (_cdfb [0],_cdfb [1],_bfc );if _cgd .Type ==ResultTypeError {return nil ,_cgd ;};if _cdfb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bfc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdaaf :=_cdfb [2].ValueNumber ;if !_cggb (_cdaaf ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_bfc );};_dacc :=0;if _fgcg ==4&&_cdfb [3].Type !=ResultTypeEmpty {if _cdfb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bfc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dacc =int (_cdfb [3].ValueNumber );if !_cggba (_dacc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_bfc );};};return &couponArgs {_ebe ,_cbe ,int (_cdaaf ),_dacc },_daaf ;};

// Function is a standard function whose result only depends on its arguments.
type Function func (_fagb []Result )Result ;const _dbeb =1;

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _febg (_dbc Result ,_aad ,_fedf string )(float64 ,Result ){var _bgc float64 ;switch _dbc .Type {case ResultTypeNumber :_bgc =float64 (int (_dbc .ValueNumber ));case ResultTypeString :_ccgf :=DateValue ([]Result {_dbc });if _ccgf .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_aad +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_fedf );};_bgc =_ccgf .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_fedf );};if _bgc < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_aad +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _bgc ,_daaf ;};func _beg (_gead ,_afab float64 ,_caea ,_daf int )float64 {_gbae :=_eecd (_gead );_ecbe :=_eecd (_afab );_baac :=_eae (_gbae ,_ecbe ,_caea );return _ddfe (_gbae ,_baac ,_daf );};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcgc :=args [0].AsString ();if _dcgc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_acgbd :=_d .Buffer {};for _ ,_eeca :=range _dcgc .ValueString {if _c .IsPrint (_eeca ){_acgbd .WriteRune (_eeca );};};return MakeStringResult (_acgbd .String ());};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbcag ,_egff ,_eegd :=_bbg (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _eegd .Type ==ResultTypeError {return _eegd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcbf :=_egff -_bbcag ;if _fcbf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_bffg :=args [2].ValueNumber ;if _bffg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_bffg )/(360-_bffg *_fcbf ));};

// String returns a string representation of a range with prefix.
func (_gebd PrefixRangeExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gebd ._eabg .String (),_gebd ._ffcgd .String (),_gebd ._gefgc .String ());};const _gbdff =57374;func _ccgc (_fee ,_gda ,_bdfe int )bool {if _gda < 1||_gda > 12{return false ;};if _bdfe < 1{return false ;};return _bdfe <=_egf (_fee ,_gda );};var _abce =[...]int {0};func _bgdd (_ggff int )bool {return _ggff ==0||_ggff ==4};func _cfeg (){_cac ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_cd .MustCompile ("\u005e"+_bff +_aba );_cac ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_cd .MustCompile ("\u005e"+_fgd +_aba );_cac ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_cd .MustCompile ("\u005e"+_bfff +_aba );_cac ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_cd .MustCompile ("\u005e"+_agf +_aba );_gf ["\u0068\u0068"]=_cd .MustCompile (_fgbc +_bgg +"\u0024");_gf ["\u0068\u0068\u003am\u006d"]=_cd .MustCompile (_fgbc +_adg +"\u0024");_gf ["\u006d\u006d\u003as\u0073"]=_cd .MustCompile (_fgbc +_bge +"\u0024");_gf ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_cd .MustCompile (_fgbc +_cfe +"\u0024");_ddgf =[]*_cd .Regexp {_cd .MustCompile ("\u005e"+_bff +"\u0024"),_cd .MustCompile ("\u005e"+_fgd +"\u0024"),_cd .MustCompile ("\u005e"+_bfff +"\u0024"),_cd .MustCompile ("\u005e"+_agf +"\u0024")};_dcecg =[]*_cd .Regexp {_cd .MustCompile ("\u005e"+_bgg +"\u0024"),_cd .MustCompile ("\u005e"+_adg +"\u0024"),_cd .MustCompile ("\u005e"+_bge +"\u0024"),_cd .MustCompile ("\u005e"+_cfe +"\u0024")};};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_eaeca :=MakeNumberResult (0);for _ ,_dccb :=range args {_dccb =_dccb .AsNumber ();switch _dccb .Type {case ResultTypeNumber :_eaeca .ValueNumber +=_dccb .ValueNumber *_dccb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_adafc :=SumSquares (_dccb .ListValues ());if _adafc .Type !=ResultTypeNumber {return _adafc ;};_eaeca .ValueNumber +=_adafc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _dccb ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_dccb .Type ));};};return _eaeca ;};const _cccb =_fb .Millisecond *1000;func _edbd (_gafc ,_fdfcd float64 )bool {return _ed .Abs (_gafc -_fdfcd )< 1.0e-6};

// String returns a string of a range.
func (_fgaa Range )String ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_fgaa ._fggbe .String (),_fgaa ._fegga .String ());};func _dgcb (_cbgd ,_bebe []float64 ,_fece float64 )Result {_acgd :=false ;_abef :=false ;for _gbfa :=0;_gbfa < len (_cbgd );_gbfa ++{if _cbgd [_gbfa ]> 0{_acgd =true ;};if _cbgd [_gbfa ]< 0{_abef =true ;};};if !_acgd ||!_abef {return MakeErrorResultType (ErrorTypeNum ,"");};_debe :=_fece ;_dgaag :=1e-10;_bgac :=0;_cdd :=50;_fbbb :=false ;for {_aeda :=_bceg (_cbgd ,_bebe ,_debe );_bbfb :=_debe -_aeda /_eecf (_cbgd ,_bebe ,_debe );_fega :=_ed .Abs (_bbfb -_debe );_debe =_bbfb ;_bgac ++;if _fega <=_dgaag ||_ed .Abs (_aeda )<=_dgaag {break ;};if _bgac > _cdd {_fbbb =true ;break ;};};if _fbbb ||_ed .IsNaN (_debe )||_ed .IsInf (_debe ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_debe );};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _a .Reader )Expression {_agdb :=&plex {_ddaba :LexReader (r )};_aagf (_agdb );if _agdb ._gggfff !=""{return nil ;};return _agdb ._bdabe ;};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_aecc :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_aecc =int (args [1].ValueNumber );if _aecc < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _aecc ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ggae :=args [0].Value ();if _aecc > len (_ggae ){return MakeStringResult (_ggae );};return MakeStringResult (_ggae [0:_aecc ]);};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_defbg .Lock ();defer _defbg .Unlock ();if _ ,_gaffb :=_dgbc [name ];_gaffb {_ba .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_dgbc [name ]=fn ;};func _ffbd (_gfggb Context ,_ebaed ,_aced string )(string ,string ){_gcbcg :=_ebaed +"\u0031";_gbfg :=_gfggb .LastRow (_ebaed );_gcbfe :=_aced +_cb .Itoa (_gbfg );return _gcbcg ,_gcbfe ;};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_da :lhs ,_dgf :rhs ,_ege :op };};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// String returns a string representation for Bool.
func (_dadg Bool )String ()string {if _dadg ._ebf {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};func (_fefa *yyParserImpl )Lookahead ()int {return _fefa ._afgaf };

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Reference returns a string reference value to a named range.
func (_dbcb NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_dbcb ._ceddd };};func _dfgc (_deac ,_aaef ,_dffgg ,_ebg float64 ,_caecf int )float64 {var _eead float64 ;if _deac ==0{_eead =_ebg +_dffgg *_aaef ;}else {_bgeb :=_ed .Pow (1+_deac ,_aaef );if _caecf ==1{_eead =_ebg *_bgeb +_dffgg *(1+_deac )*(_bgeb -1)/_deac ;}else {_eead =_ebg *_bgeb +_dffgg *(_bgeb -1)/_deac ;};};return -_eead ;};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfa :=args [0].Ref ;for _bfa .Type ==ReferenceTypeNamedRange {_bfa =ctx .NamedRange (_bfa .Value );};_eegf :="";switch _bfa .Type {case ReferenceTypeCell :_eegf =_bfa .Value ;case ReferenceTypeRange :_cafgc :=_eg .Split (_bfa .Value ,"\u003a");if len (_cafgc )==2{_eegf =_cafgc [0];};default:return MakeErrorResult (_g .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_bfa .Type ));};_baeg ,_bffgd :=_fg .ParseCellReference (_eegf );if _bffgd !=nil {return MakeErrorResult (_g .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_bffgd .Error ()));};_cfda ,_aecd ,_acae :=_baeg .Column ,_baeg .RowIdx ,_baeg .SheetName ;_fdfb :=args [1].AsNumber ();if _fdfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_adba :=args [2].AsNumber ();if _adba .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _fdcgc ,_dacf Result ;if len (args )==3{_fdcgc =MakeNumberResult (1);_dacf =MakeNumberResult (1);}else {_fdcgc =args [3].AsNumber ();if _fdcgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _fdcgc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_dacf =args [4].AsNumber ();if _dacf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _dacf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_dcga :=_fg .ColumnToIndex (_cfda );_effg :=_aecd +uint32 (_fdfb .ValueNumber );_cfbd :=_dcga +uint32 (_adba .ValueNumber );_acebf :=_effg +uint32 (_fdcgc .ValueNumber );_gdaab :=_cfbd +uint32 (_dacf .ValueNumber );if _fdcgc .ValueNumber > 0{_acebf --;}else {_acebf ++;_effg ,_acebf =_acebf ,_effg ;};if _dacf .ValueNumber > 0{_gdaab --;}else {_gdaab ++;_cfbd ,_gdaab =_gdaab ,_cfbd ;};_fdaac :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_fg .IndexToColumn (_cfbd ),_effg );_abcg :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_fg .IndexToColumn (_gdaab ),_acebf );if _acae ==""{return _bdbf (ctx ,ev ,_fdaac ,_abcg );}else {return _bdbf (ctx .Sheet (_acae ),ev ,_fdaac ,_abcg );};};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_ggbb :=len (args );if _ggbb < 4||_ggbb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ccad :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gebg :=args [1].ValueNumber ;if _gebg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bafcb :=args [2].ValueNumber ;if _bafcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_feae :=args [3].ValueNumber ;_dgcd :=0.0;if _ggbb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dgcd =args [4].ValueNumber ;};_fcac :=0;if _ggbb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fcac =int (args [5].ValueNumber );if _fcac !=0{_fcac =1;};};return MakeNumberResult (_ebbe (_ccad ,_gebg ,_bafcb ,_feae ,_dgcd ,_fcac ));};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cdebf :=args [0].AsNumber ();if _cdebf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggbg :=args [1].AsNumber ();if _ggbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eacg :=int (_ggbg .ValueNumber );if _eacg < 0||_eacg > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_cdbea :=0;if len (args )> 2{_gaec :=args [2].AsNumber ();if _gaec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cdbea =int (_gaec .ValueNumber );};_gcddd :=_cb .FormatInt (int64 (_cdebf .ValueNumber ),_eacg );if len (_gcddd )< _cdbea {_gcddd =_eg .Repeat ("\u0030",_cdbea -len (_gcddd ))+_gcddd ;};return MakeStringResult (_gcddd );};type durationArgs struct{_cdgd float64 ;_ccdf float64 ;_bgffb float64 ;_cbcg float64 ;_ecde float64 ;_cega int ;};func _eecf (_ffffg ,_eeef []float64 ,_ffcc float64 )float64 {_facg :=_ffcc +1;_dfgfb :=0.0;_afc :=len (_ffffg );_cefd :=_eeef [0];for _acdg :=1;_acdg < _afc ;_acdg ++{_cbfb :=(_eeef [_acdg ]-_cefd )/365;_dfgfb -=_cbfb *_ffffg [_acdg ]/_ed .Pow (_facg ,_cbfb +1);};return _dfgfb ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_aadaa :=_eg .Split (v ,"\u003a");if len (_aadaa )!=2{return nil ;};_ggce ,_ :=_cb .Atoi (_aadaa [0]);_bfeca ,_ :=_cb .Atoi (_aadaa [1]);if _ggce > _bfeca {_ggce ,_bfeca =_bfeca ,_ggce ;};return HorizontalRange {_eggf :_ggce ,_cgce :_bfeca };};var _bfec =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gbf :=args [0].ValueNumber ;_afbe :=args [1].ValueNumber ;_eafc :=args [2].ValueNumber ;_bgff :=_bcg (_gbf ,_afbe ,_eafc );if _bgff >=0{return MakeNumberResult (_bgff );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Match implements the MATCH function.
func Match (args []Result )Result {_bceeg :=len (args );if _bceeg !=2&&_bceeg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efcg :=1;if _bceeg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_fgff :=args [2].ValueNumber ;if _fgff ==-1||_fgff ==0{_efcg =int (_fgff );};};_bage :=args [1];var _fgae []Result ;switch _bage .Type {case ResultTypeList :_fgae =_bage .ValueList ;case ResultTypeArray :_gcgb :=_bage .ValueArray ;for _ ,_cfbc :=range _gcgb {if len (_cfbc )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fgae =append (_fgae ,_cfbc [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fbde :=_eadac (args [0]);switch _efcg {case 0:for _aaad ,_cbgdd :=range _fgae {if _fdfg (_cbgdd ,_fbde ){return MakeNumberResult (float64 (_aaad +1));};};case -1:for _acba :=0;_acba < len (_fgae );_acba ++{if _fdfg (_fgae [_acba ],_fbde ){return MakeNumberResult (float64 (_acba +1));};if _fbde ._gcff &&(_fgae [_acba ].ValueNumber < _fbde ._bccdd ){if _acba ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_acba ));};};case 1:for _cecd :=0;_cecd < len (_fgae );_cecd ++{if _fdfg (_fgae [_cecd ],_fbde ){return MakeNumberResult (float64 (_cecd +1));};if _fbde ._gcff &&(_fgae [_cecd ].ValueNumber > _fbde ._bccdd ){if _cecd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_cecd ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};type ri struct{_bdab float64 ;_dfcfa string ;};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_gggg :=len (args );if _gggg < 3||_gggg > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdb :=args [0].ValueNumber ;if _dfdb !=float64 (int (_dfdb )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gedd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dcgf :=args [2].ValueNumber ;_afgc :=0.0;if _gggg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_afgc =args [3].ValueNumber ;};_bbbd :=0.0;if _gggg >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bbbd =args [4].ValueNumber ;if _bbbd !=0{_bbbd =1;};};_abfgg :=0.1;if _gggg >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abfgg =args [5].ValueNumber ;};_ecfd :=100;_fgbb :=0;_gge :=false ;_ffcg :=1e-6;_ggcf :=_abfgg ;for _fgbb < _ecfd &&!_gge {_bdff :=_ed .Pow (_ggcf +1,_dfdb );_efaa :=_ed .Pow (_ggcf +1,_dfdb -1);_bfbe :=_ggcf *_bbbd +1;_gfaae :=_gedd *(_bdff -1);_ffccb :=_afgc +_bdff *_dcgf +_gfaae *_bfbe /_ggcf ;_bgfg :=_dfdb *_efaa *_dcgf -_gfaae *_bfbe /_ed .Pow (_ggcf ,2);_edde :=(_dfdb *_gedd *_efaa *_bfbe +_gfaae *_bbbd )/_ggcf ;_beca :=_ffccb /(_bgfg +_edde );if _ed .Abs (_beca )< _ffcg {_gge =true ;};_fgbb ++;_ggcf -=_beca ;};return MakeNumberResult (_ggcf );};const _gg ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_ebaagd ,_gfcab ,_accg :=_gfcc (from ,to );if _accg !=nil {_ba .Log (_accg .Error ());return NewError (_accg .Error ());};return PrefixRangeExpr {_eabg :pfx ,_ffcgd :_ebaagd ,_gefgc :_gfcab };};var InvalidReferenceContext =&ivr {};func _bdaa (_afffb int )string {if _afffb >=0&&_afffb < len (_cfcce ){if _cfcce [_afffb ]!=""{return _cfcce [_afffb ];};};return _g .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_afffb );};const _bff ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fdb :=args [0].ValueNumber ;if _fdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_cceb :=float64 (int (args [1].ValueNumber ));if _cceb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_ed .Pow (_fdb +1,1/_cceb )-1)*_cceb );};const _cbed =-1000;

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_eg .NewReader (s ));};

// Reference returns a string reference value to a vertical range.
func (_dbcedd VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_dbcedd .verticalRangeReference ()};};func _gfaf (_dfcb int )bool {if _dfcb ==_dfcb /400*400{return true ;};if _dfcb ==_dfcb /100*100{return false ;};return _dfcb ==_dfcb /4*4;};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_bcfd PrefixRangeExpr )Update (q *_adf .UpdateQuery )Expression {_accb :=_bcfd ;_cabga :=_bcfd ._eabg .String ();if _cabga ==q .SheetToUpdate {_dabgc :=*q ;_dabgc .UpdateCurrentSheet =true ;_accb ._ffcgd =_bcfd ._ffcgd .Update (&_dabgc );_accb ._gefgc =_bcfd ._gefgc .Update (&_dabgc );};return _accb ;};func _gce (_dbd string )bool {for _ ,_baff :=range _dcecg {_gabd :=_baff .FindStringSubmatch (_dbd );if len (_gabd )> 1{return true ;};};return false ;};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_eeed :=args [0].ValueNumber ;if _eeed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bgefd :=float64 (int (args [1].ValueNumber ));if _bgefd < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_ed .Pow ((1+_eeed /_bgefd ),_bgefd )-1);};

// String returns an empty string for EmptyExpr.
func (_gea EmptyExpr )String ()string {return ""};

// String is a string expression.
type String struct{_acddc string };

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _effce (args ,false )};func _cggb (_edc float64 )bool {return _edc ==1||_edc ==2||_edc ==4};

// Update updates references in the VerticalRange after removing a row/column.
func (_fafdb VerticalRange )Update (q *_adf .UpdateQuery )Expression {if q .UpdateType ==_adf .UpdateActionRemoveColumn {_cgfab :=_fafdb ;if q .UpdateCurrentSheet {_dccgc :=q .ColumnIdx ;_cgfab ._aedb =_gcf (_fafdb ._aedb ,_dccgc );_cgfab ._ffef =_gcf (_fafdb ._ffef ,_dccgc );};return _cgfab ;};return _fafdb ;};var _dbgb =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _baf (_dcb BinOpType ,_fgb ,_ae []Result )Result {_eb :=[]Result {};for _gc :=range _fgb {_cgb :=_fgb [_gc ].AsNumber ();_ebc :=_ae [_gc ].AsNumber ();if _cgb .Type !=ResultTypeNumber ||_ebc .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _dcb {case BinOpTypePlus :_eb =append (_eb ,MakeNumberResult (_cgb .ValueNumber +_ebc .ValueNumber ));case BinOpTypeMinus :_eb =append (_eb ,MakeNumberResult (_cgb .ValueNumber -_ebc .ValueNumber ));case BinOpTypeMult :_eb =append (_eb ,MakeNumberResult (_cgb .ValueNumber *_ebc .ValueNumber ));case BinOpTypeDiv :if _ebc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eb =append (_eb ,MakeNumberResult (_cgb .ValueNumber /_ebc .ValueNumber ));case BinOpTypeExp :_eb =append (_eb ,MakeNumberResult (_ed .Pow (_cgb .ValueNumber ,_ebc .ValueNumber )));case BinOpTypeLT :_eb =append (_eb ,MakeBoolResult (_cgb .ValueNumber < _ebc .ValueNumber ));case BinOpTypeGT :_eb =append (_eb ,MakeBoolResult (_cgb .ValueNumber > _ebc .ValueNumber ));case BinOpTypeEQ :_eb =append (_eb ,MakeBoolResult (_cgb .ValueNumber ==_ebc .ValueNumber ));case BinOpTypeLEQ :_eb =append (_eb ,MakeBoolResult (_cgb .ValueNumber <=_ebc .ValueNumber ));case BinOpTypeGEQ :_eb =append (_eb ,MakeBoolResult (_cgb .ValueNumber >=_ebc .ValueNumber ));case BinOpTypeNE :_eb =append (_eb ,MakeBoolResult (_cgb .ValueNumber !=_ebc .ValueNumber ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dcb ));};};return MakeListResult (_eb );};func _gec (_edbf ,_dfcg _fb .Time )bool {_cga :=_edbf .Unix ();_fgdf :=_dfcg .Unix ();_cfa :=_edbf .Year ();_dgfa :=_cdaa (_cfa ,_fb .March ,1);if _gfaf (_cfa )&&_cga < _dgfa &&_fgdf >=_dgfa {return true ;};var _ecgb =_dfcg .Year ();var _acfb =_cdaa (_ecgb ,_fb .March ,1);return (_gfaf (_ecgb )&&_fgdf >=_acfb &&_cga < _acfb );};var _fcgg =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_ccea SheetPrefixExpr )Update (q *_adf .UpdateQuery )Expression {return _ccea };var _edfca string =string ([]byte {92});const _bdabb =57348;func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgbf :=args [0].AsString ();if _fgbf .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_fgbf .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_fgbf .ValueString [0]));};const _cbagg =57363;

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bab :=args [0].AsNumber ();_cgbf :=args [1].AsNumber ();_dcea :=args [2].AsNumber ();_aefg :=args [3].ListValues ();if _bab .Type !=ResultTypeNumber ||_cgbf .Type !=ResultTypeNumber ||_dcea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_afgb :=float64 (0);for _daefc ,_dgdb :=range _aefg {_afgb +=_dgdb .ValueNumber *_ed .Pow (_bab .ValueNumber ,_cgbf .ValueNumber +float64 (_daefc )*_dcea .ValueNumber );};return MakeNumberResult (_afgb );};var _dgff =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_fbda :=1.0;for _ ,_dgfec :=range args {_dgfec =_dgfec .AsNumber ();switch _dgfec .Type {case ResultTypeNumber :_fbda *=_dgfec .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gcab :=Product (_dgfec .ListValues ());if _gcab .Type !=ResultTypeNumber {return _gcab ;};_fbda *=_gcab .ValueNumber ;case ResultTypeString :case ResultTypeError :return _dgfec ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_dgfec .Type ));};};return MakeNumberResult (_fbda );};var _eede =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_gfdd ,_ccba :=_cabfd ("\u0046\u0049\u004e\u0044",args );if _ccba .Type !=ResultTypeEmpty {return _ccba ;};_fddd :=_gfdd ._gcaeg ;if _fddd ==""{return MakeNumberResult (1.0);};_gffg :=_gfdd ._cfddd ;_cbfe :=_gfdd ._bbfga -1;_beba :=1;_eddca :=0;for _edddd :=range _gffg {if _edddd !=0{_bfab :=1;if _edddd -_eddca > 1{_bfab =2;};_beba +=_bfab ;};if _beba > _cbfe {_dbca :=_eg .Index (_gffg [_edddd :],_fddd );if _dbca ==0{return MakeNumberResult (float64 (_beba ));};};_eddca =_edddd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func (_ccgcf *noCache )GetFromCache (key string )(Result ,bool ){return _daaf ,false };

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fegag :=args [0];switch _fegag .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_egdc :=0.0;_egge :=0.0;for _ ,_ggdc :=range _fegag .ValueString {_cbbe :=0.0;switch _ggdc {case 'I':_cbbe =1;case 'V':_cbbe =5;case 'X':_cbbe =10;case 'L':_cbbe =50;case 'C':_cbbe =100;case 'D':_cbbe =500;case 'M':_cbbe =1000;};_egdc +=_cbbe ;switch {case _egge ==_cbbe &&(_egge ==5||_egge ==50||_egge ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_egge ==_cbbe :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _egge < _cbbe {_egdc -=2*_egge ;};_egge =_cbbe ;};return MakeNumberResult (_egdc );case ResultTypeError :return _fegag ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fegag .Type ));};};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_fdab :=args [0].AsString ();if _fdab .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_eegcf :=_d .Buffer {};_ddeaf :=false ;for _ ,_dbcae :=range _fdab .ValueString {if !_ddeaf &&_c .IsLetter (_dbcae ){_eegcf .WriteRune (_c .ToUpper (_dbcae ));}else {_eegcf .WriteRune (_c .ToLower (_dbcae ));};_ddeaf =_c .IsLetter (_dbcae );};return MakeStringResult (_eegcf .String ());};func _gcef (_geaec ,_gbcg ,_dccage ,_eebda ,_ceca ,_cgda float64 )float64 {var _adca ,_acfg float64 ;_aebd :=0.0;_aabdb :=_ed .Ceil (_ceca );_edea :=_geaec -_gbcg ;_deeb :=false ;_cdgc :=0.0;for _bbdb :=1.0;_bbdb <=_aabdb ;_bbdb ++{if !_deeb {_adca =_eaag (_geaec ,_gbcg ,_dccage ,_bbdb ,_cgda );_cdgc =_edea /(_dccage -_bbdb +1);if _cdgc > _adca {_acfg =_cdgc ;_deeb =true ;}else {_acfg =_adca ;_edea -=_adca ;};}else {_acfg =_cdgc ;};if _bbdb ==_aabdb {_acfg *=_ceca +1-_aabdb ;};_aebd +=_acfg ;};return _aebd ;};var _ecgg =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func (_eag *defEval )checkLastEvalIsRef (_efg Context ,_bg Expression ){switch _bg .(type ){case FunctionCall :switch _bg .(FunctionCall )._gfabg {case "\u0049\u0053\u0052E\u0046":for _ ,_aedc :=range _bg .(FunctionCall )._fbdg {switch _aedc .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_fcb :=_aedc .Eval (_efg ,_eag );_eag ._fgc =!(_fcb .Type ==ResultTypeError &&_fcb .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_eag ._fgc =false ;};};};};};